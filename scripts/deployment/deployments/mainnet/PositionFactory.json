{
  "address": "0xeCDE1EF432447ca4504B08DFe0b863BBe5eB62ac",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_parent",
          "type": "address"
        }
      ],
      "name": "clonePosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_deuro",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "_initPeriod",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "_duration",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "_challengePeriod",
          "type": "uint40"
        },
        {
          "internalType": "uint24",
          "name": "_riskPremiumPPM",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "_liqPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_reserve",
          "type": "uint24"
        }
      ],
      "name": "createNewPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd662a4755469843b008a929a1ee34dfc2d9b958ec30d49798deaab51b2f06f3c",
  "receipt": {
    "to": null,
    "from": "0x7246a902fD8Bf96eCe1Dc9DCc3Bfa9299aF4937e",
    "contractAddress": "0xeCDE1EF432447ca4504B08DFe0b863BBe5eB62ac",
    "transactionIndex": 62,
    "gasUsed": "3081934",
    "logsBloom": "0x
    "blockHash": "0x8278e059aad02f3ab6170b9f526459258572049576d56bc986f0cbb1fca5b2bb",
    "transactionHash": "0xd662a4755469843b008a929a1ee34dfc2d9b958ec30d49798deaab51b2f06f3c",
    "logs": [],
    "blockNumber": 21568973,
    "cumulativeGasUsed": "8223600",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "ece481ab51611799f01de526970750f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"}],\"name\":\"clonePosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deuro\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"_initPeriod\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_duration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_challengePeriod\",\"type\":\"uint40\"},{\"internalType\":\"uint24\",\"name\":\"_riskPremiumPPM\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"_liqPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_reserve\",\"type\":\"uint24\"}],\"name\":\"createNewPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clonePosition(address)\":{\"params\":{\"_parent\":\"address of the position we want to clone\"},\"returns\":{\"_0\":\"address of the newly created clone position\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clonePosition(address)\":{\"notice\":\"Clone an existing position. This can be a clone of another clone, or an original position.\"},\"createNewPosition(address,address,address,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)\":{\"notice\":\"Create a completely new position in a newly deployed contract. Must be called through the minting hub to be recognized as a valid position.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintingHubV2/PositionFactory.sol\":\"PositionFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/MintingHubV2/Position.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IMintingHubGateway} from \\\"../gateway/interface/IMintingHubGateway.sol\\\";\\nimport {IDecentralizedEURO} from \\\"../interface/IDecentralizedEURO.sol\\\";\\nimport {IReserve} from \\\"../interface/IReserve.sol\\\";\\nimport {MathUtil} from \\\"../utils/MathUtil.sol\\\";\\nimport {IMintingHub} from \\\"./interface/IMintingHub.sol\\\";\\nimport {IPosition} from \\\"./interface/IPosition.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title Position\\n * @notice A collateralized minting position.\\n */\\ncontract Position is Ownable, IPosition, MathUtil {\\n    /**\\n     * @notice Note that this contract is intended to be cloned. All clones will share the same values for\\n     * the constant and immutable fields, but have their own values for the other fields.\\n     */\\n\\n    /**\\n     * @notice The deuro price per unit of the collateral below which challenges succeed, (36 - collateral.decimals) decimals\\n     */\\n    uint256 public price;\\n\\n    /**\\n     * @notice How much has been minted in total. This variable is only used in the parent position.\\n     */\\n    uint256 private totalMinted;\\n\\n    uint256 public immutable limit;\\n\\n    /**\\n     * @notice Amount of the collateral that is currently under a challenge.\\n     * Used to figure out whether there are pending challenges.\\n     */\\n    uint256 public challengedAmount;\\n\\n    /**\\n     * @notice Challenge period in seconds.\\n     */\\n    uint40 public immutable challengePeriod;\\n\\n    /**\\n     * @notice Timestamp when minting can start and the position is no longer denied.\\n     */\\n    uint40 public immutable start;\\n\\n    /**\\n     * @notice End of the latest cooldown. If this is in the future, minting is suspended.\\n     */\\n    uint40 public cooldown;\\n\\n    /**\\n     * @notice Timestamp of the expiration of the position. After expiration, challenges cannot be averted\\n     * any more. This is also the basis for fee calculations.\\n     */\\n    uint40 public expiration;\\n\\n    bool private closed;\\n\\n    /**\\n     * @notice The original position to help identify clones.\\n     */\\n    address public immutable original;\\n\\n    /**\\n     * @notice Pointer to the minting hub.\\n     */\\n    address public immutable hub;\\n\\n    /**\\n     * @notice The Eurocoin contract.\\n     */\\n    IDecentralizedEURO public immutable deuro;\\n\\n    /**\\n     * @notice The collateral token.\\n     */\\n    IERC20 public immutable override collateral;\\n\\n    /**\\n     * @notice Minimum acceptable collateral amount to prevent dust.\\n     */\\n    uint256 public immutable override minimumCollateral;\\n\\n    /**\\n     * @notice The interest in parts per million per year that is deducted when minting dEURO.\\n     * To be paid upfront.\\n     */\\n    uint24 public immutable riskPremiumPPM;\\n\\n    /**\\n     * @notice The reserve contribution in parts per million of the minted amount.\\n     */\\n    uint24 public immutable reserveContribution;\\n\\n    /**\\n     * @notice The total principal borrowed.\\n     */\\n    uint256 public principal;\\n\\n    /**\\n     * @notice The total interest accrued but not yet paid.\\n     */\\n    uint256 public accruedInterest;\\n\\n    /**\\n     * @notice The timestamp of the last interest accrual update.\\n     */\\n    uint40 public lastAccrual;\\n\\n    event MintingUpdate(uint256 collateral, uint256 price, uint256 minted);\\n    event PositionDenied(address indexed sender, string message); // emitted if closed by governance\\n\\n    error InsufficientCollateral(uint256 needed, uint256 available);\\n    error TooLate();\\n    error RepaidTooMuch(uint256 excess);\\n    error LimitExceeded(uint256 tried, uint256 available);\\n    error ChallengeTooSmall();\\n    error Expired(uint40 time, uint40 expiration);\\n    error Alive();\\n    error Closed();\\n    error Hot();\\n    error Challenged();\\n    error NotHub();\\n    error NotOriginal();\\n    error InvalidExpiration();\\n    error AlreadyInitialized();\\n\\n    modifier alive() {\\n        if (block.timestamp >= expiration) revert Expired(uint40(block.timestamp), expiration);\\n        _;\\n    }\\n\\n    // requires that the position has always been backed by a minimal amount of collateral\\n    modifier backed() {\\n        if (isClosed()) revert Closed();\\n        _;\\n    }\\n\\n    modifier expired() {\\n        if (block.timestamp < expiration) revert Alive();\\n        _;\\n    }\\n\\n    modifier noCooldown() {\\n        if (block.timestamp <= cooldown) revert Hot();\\n        _;\\n    }\\n\\n    modifier noChallenge() {\\n        if (challengedAmount > 0) revert Challenged();\\n        _;\\n    }\\n\\n    modifier onlyHub() {\\n        if (msg.sender != address(hub)) revert NotHub();\\n        _;\\n    }\\n\\n    modifier ownerOrRoller() {\\n        if (msg.sender != address(IMintingHub(hub).ROLLER())) _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev See MintingHub.openPosition\\n     *\\n     * @param _riskPremiumPPM       ppm of minted amount that is added to the applicable minting fee as a risk premium\\n     */\\n    constructor(\\n        address _owner,\\n        address _hub,\\n        address _deuro,\\n        address _collateral,\\n        uint256 _minCollateral,\\n        uint256 _initialLimit,\\n        uint40 _initPeriod,\\n        uint40 _duration,\\n        uint40 _challengePeriod,\\n        uint24 _riskPremiumPPM,\\n        uint256 _liqPrice,\\n        uint24 _reservePPM\\n    ) Ownable(_owner) {\\n        require(_initPeriod >= 3 days); // must be at least three days, recommended to use higher values\\n        original = address(this);\\n        hub = _hub;\\n        deuro = IDecentralizedEURO(_deuro);\\n        collateral = IERC20(_collateral);\\n        riskPremiumPPM = _riskPremiumPPM;\\n        reserveContribution = _reservePPM;\\n        minimumCollateral = _minCollateral;\\n        challengePeriod = _challengePeriod;\\n        start = uint40(block.timestamp) + _initPeriod; // at least three days time to deny the position\\n        cooldown = start;\\n        expiration = start + _duration;\\n        limit = _initialLimit;\\n        _setPrice(_liqPrice, _initialLimit);\\n    }\\n\\n    /**\\n     * Initialization method for clones.\\n     * Can only be called once. Should be called immediately after creating the clone.\\n     */\\n    function initialize(address parent, uint40 _expiration) external onlyHub {\\n        if (expiration != 0) revert AlreadyInitialized();\\n        if (_expiration < block.timestamp || _expiration > Position(original).expiration()) revert InvalidExpiration(); // expiration must not be later than original\\n        expiration = _expiration;\\n        price = Position(parent).price();\\n        _transferOwnership(hub);\\n    }\\n\\n    /**\\n     * Cloning a position is only allowed if the position is not challenged, not expired and not in cooldown.\\n     */\\n    function assertCloneable() external noChallenge noCooldown alive backed {}\\n\\n    /**\\n     * Notify the original that some amount has been minted.\\n     */\\n    function notifyMint(uint256 mint_) external {\\n        if (deuro.getPositionParent(msg.sender) != hub) revert NotHub();\\n        totalMinted += mint_;\\n    }\\n\\n    function notifyRepaid(uint256 repaid_) external {\\n        if (deuro.getPositionParent(msg.sender) != hub) revert NotHub();\\n        totalMinted -= repaid_;\\n    }\\n\\n    /**\\n     * Should only be called on the original position.\\n     * Better use 'availableForMinting'.\\n     */\\n    function availableForClones() external view returns (uint256) {\\n        // reserve capacity for the original to the extent the owner provided collateral\\n        uint256 debt = principal + accruedInterest;\\n        uint256 potential = (_collateralBalance() * price) / ONE_DEC18;\\n        uint256 unusedPotential = debt > potential ? 0 : potential - debt;\\n        if (totalMinted + unusedPotential >= limit) {\\n            return 0;\\n        } else {\\n            return limit - totalMinted - unusedPotential;\\n        }\\n    }\\n\\n    /**\\n     * The amount available for minting in this position family.\\n     *\\n     * Does not check if positions are challenged, closed, or under cooldown.\\n     */\\n    function availableForMinting() public view returns (uint256) {\\n        if (address(this) == original) {\\n            return limit - totalMinted;\\n        } else {\\n            return Position(original).availableForClones();\\n        }\\n    }\\n\\n    /**\\n     * @notice Qualified pool share holders can call this method to immediately expire a freshly proposed position.\\n     */\\n    function deny(address[] calldata helpers, string calldata message) external {\\n        if (block.timestamp >= start) revert TooLate();\\n        IReserve(deuro.reserve()).checkQualified(msg.sender, helpers);\\n        _close();\\n        emit PositionDenied(msg.sender, message);\\n    }\\n\\n    /**\\n     * Closes the position by putting it into eternal cooldown.\\n     * This allows the users to still withdraw the collateral that is left, but never to mint again.\\n     */\\n    function _close() internal {\\n        closed = true;\\n    }\\n\\n    function isClosed() public view returns (bool) {\\n        return closed;\\n    }\\n\\n    /**\\n     * @notice This is how much the minter can actually use when minting deuro, with the rest being assigned\\n     * to the minter reserve.\\n     */\\n    function getUsableMint(uint256 totalMint) public view returns (uint256) {\\n        return (totalMint * (1000_000 - reserveContribution)) / 1000_000;\\n    }\\n\\n    /**\\n     * Returns the corresponding mint amount (disregarding the limit).\\n     */\\n    function getMintAmount(uint256 usableMint) external view returns (uint256) {\\n        return\\n            usableMint == 0\\n                ? 0\\n                : (usableMint * 1000_000 - 1) / (1000_000 - reserveContribution) + 1;\\n    }\\n\\n    /**\\n     * @notice \\\"All in one\\\" function to adjust the outstanding amount of deuro, the collateral amount,\\n     * and the price in one transaction.\\n     */\\n    function adjust(uint256 newDebt, uint256 newCollateral, uint256 newPrice) external onlyOwner {\\n        uint256 debt = _accrueInterest();\\n        uint256 colbal = _collateralBalance();\\n        if (newCollateral > colbal) {\\n            collateral.transferFrom(msg.sender, address(this), newCollateral - colbal);\\n        }\\n        // Must be called after collateral deposit, but before withdrawal\\n        if (newDebt < debt) {\\n            _payDownDebt(msg.sender, debt - newDebt);\\n        }\\n        if (newCollateral < colbal) {\\n            _withdrawCollateral(msg.sender, colbal - newCollateral);\\n        }\\n        // Must be called after collateral withdrawal\\n        if (newDebt > debt) {\\n            _mint(msg.sender, newDebt - debt, newCollateral);\\n        }\\n        if (newPrice != price) {\\n            _adjustPrice(newPrice);\\n        }\\n        emit MintingUpdate(newCollateral, newPrice, newDebt);\\n    }\\n\\n    /**\\n     * @notice Allows the position owner to adjust the liquidation price as long as there is no pending challenge.\\n     * Lowering the liquidation price can be done with immediate effect, given that there is enough collateral.\\n     * Increasing the liquidation price triggers a cooldown period of 3 days, during which minting is suspended.\\n     */\\n    function adjustPrice(uint256 newPrice) public onlyOwner {\\n        _adjustPrice(newPrice);\\n        emit MintingUpdate(_collateralBalance(), price, principal + accruedInterest);\\n    }\\n\\n    function _adjustPrice(uint256 newPrice) internal noChallenge alive backed {\\n        if (newPrice > price) {\\n            _restrictMinting(3 days);\\n        } else {\\n            _checkCollateral(_collateralBalance(), newPrice);\\n        }\\n        _setPrice(newPrice, principal + accruedInterest + availableForMinting());\\n    }\\n\\n    function _setPrice(uint256 newPrice, uint256 bounds) internal {\\n        require(newPrice * minimumCollateral <= bounds * ONE_DEC18); // sanity check\\n        price = newPrice;\\n    }\\n\\n    function _collateralBalance() internal view returns (uint256) {\\n        return IERC20(collateral).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Mint deuro as long as there is no open challenge, the position is not subject to a cooldown,\\n     * and there is sufficient collateral.\\n     */\\n    function mint(address target, uint256 amount) public ownerOrRoller {\\n        uint256 debt = _accrueInterest();\\n        uint256 collateralBalance = _collateralBalance();\\n        _mint(target, amount, collateralBalance);\\n        emit MintingUpdate(collateralBalance, price, debt);\\n    }\\n\\n    /**\\n     * The applicable interest rate in ppm when minting more dEURO.\\n     * It consists of the globally valid interest plus an individual risk premium.\\n     */\\n    function annualInterestPPM() public view returns (uint24) {\\n        return IMintingHubGateway(hub).RATE().currentRatePPM() + riskPremiumPPM;\\n    }\\n\\n    /**\\n     * @notice Accrues interest on the principal amount since the last accrual time.\\n     * \\n     * This function calculates the interest based on the time elapsed since the last accrual,\\n     * the principal amount, and the annual interest rate. The calculated interest is then added\\n     * to the accrued interest and the total minted amount is updated.\\n     */\\n    function _accrueInterest() internal returns (uint256 debt) {\\n        uint40 nowTime = uint40(block.timestamp);\\n        debt = _getDebtAtTime(nowTime);\\n\\n        if (debt - principal > accruedInterest) {\\n            accruedInterest = debt - principal;\\n        }\\n\\n        lastAccrual = nowTime;\\n    }\\n\\n    /**\\n     * @notice Internal helper to calculate debt based on a given timestamp\\n     * @param currentTime The current block timestamp for calculation\\n     * @return The total debt (principal + interest accrued up to currentTime)\\n     */\\n    function _getDebtAtTime(uint40 currentTime) internal view returns (uint256) {\\n        uint256 interest = accruedInterest;\\n\\n        if (currentTime > lastAccrual && principal > 0) {\\n            uint256 delta = currentTime - lastAccrual;\\n            interest += (principal * annualInterestPPM() * delta) / (365 days * 1_000_000);\\n        }\\n\\n        return principal + interest;\\n    }\\n\\n    /**\\n     * @notice Public function to calculate current debt without modifying state\\n     * @return The total current debt (principal + accrued interest up to now)\\n     */\\n    function getDebt() public view returns (uint256) {\\n        return _getDebtAtTime(uint40(block.timestamp));\\n    }\\n\\n    function _mint(address target, uint256 amount, uint256 collateral_) internal noChallenge noCooldown alive backed {\\n        if (amount > availableForMinting()) revert LimitExceeded(amount, availableForMinting());\\n\\n        Position(original).notifyMint(amount);\\n        deuro.mintWithReserve(target, amount, reserveContribution, 0);\\n\\n        principal += amount;\\n        _checkCollateral(collateral_, price);\\n    }\\n\\n    function _restrictMinting(uint40 period) internal {\\n        uint40 horizon = uint40(block.timestamp) + period;\\n        if (horizon > cooldown) {\\n            cooldown = horizon;\\n        }\\n    }\\n\\n    /**\\n    * @notice Repays a specified amount of debt from `msg.sender`, prioritizing accrued interest first and then principal.\\n    * @dev This method integrates the logic of paying accrued interest before principal, as introduced in the continuous\\n    *      interest accrual model. Any interest repaid is collected as profit, and principal repayment uses `burnWithReserve`.\\n    * \\n    *      Unlike previous implementations, this function delegates the actual repayment steps to `_payDownDebt`, ensuring\\n    *      a clean separation of logic. As a result:\\n    *      - Any surplus `amount` beyond what is needed to pay all outstanding interest and principal is never withdrawn \\n    *        from `msg.sender`\\u2019s account (no leftover handling required).\\n    *      - The function can be called while there are challenges, though in that scenario, collateral withdrawals remain \\n    *        blocked until all challenges are resolved.\\n    * \\n    *      To fully close the position (bring `minted` to 0), the amount required generally follows the formula:\\n    *      `minted = principal + accruedInterest + deuro.calculateAssignedReserve(principal + accruedInterest, reservePPM)`.\\n    *      Under normal conditions, this simplifies to:\\n    *      `amount = (principal + accruedInterest) * (1000000 - reservePPM) / 1000000`.\\n    * \\n    *      For example, if `principal` is 40, `accruedInterest` is 10, and `reservePPM` is 200000, repaying 40 dEURO \\n    *      is required to fully close the position.\\n    * \\n    * @param amount The maximum amount of dEURO that `msg.sender` is willing to repay.\\n    * @return used  The actual amount of dEURO used for interest and principal repayment.\\n    * \\n    * Emits a {MintingUpdate} event.\\n    */\\n    function repay(uint256 amount) public returns (uint256) {\\n        uint256 used = _payDownDebt(msg.sender, amount);\\n        emit MintingUpdate(_collateralBalance(), price, principal + accruedInterest);\\n        return used;\\n    }\\n\\n    function repayFull() external returns (uint256) {\\n        return repay(_accrueInterest());\\n    }\\n\\n    /**\\n     * @notice Notifies the original position that a portion of the debt (principal) has been repaid.\\n     */\\n    function _notifyRepaid(uint256 amount) internal {\\n        Position(original).notifyRepaid(amount);\\n    }\\n\\n    /**\\n     * @notice Forcefully sells some of the collateral after the position has expired, using the given buyer as the source of proceeds.\\n     * @dev\\n     * - Can only be called by the minting hub once the position is expired.\\n     * - Requires that there are no open challenges, ensuring that a forced sale is not used to circumvent the challenge process.\\n     * - The proceeds from the sale are first used to repay any accrued interest (treated as profit, collected via `collectProfits`),\\n     *   and then the principal (via `burnWithReserve`). This ensures correct accounting, where interest is always realized as profit before principal is returned.\\n     * - If all debt is fully repaid and there are surplus proceeds, these are transferred to the position owner.\\n     * - If there is a shortfall (not enough proceeds to fully repay the debt) and no remaining collateral, the system covers the loss.\\n     *\\n     * Do not allow a forced sale as long as there is an open challenge. Otherwise, a forced sale by the owner\\n     * himself could remove any incentive to launch challenges shortly before the expiration. (CS-ZCHF2-001)\\n     *\\n     * In the old model, `forceSale` would rely on `calculateAssignedReserve` and treat `minted` as a lump sum including principal, reserve, and fees.\\n     * Now, with principal and interest separated, `forceSale` no longer needs manual calculation of reserves. Instead, it uses `burnWithReserve` \\n     * to handle the principal and reserve portions automatically.\\n     *\\n     * @param buyer       The address buying the collateral. This address provides `proceeds` in dEURO to repay the outstanding debt.\\n     * @param collAmount  The amount of collateral to be forcibly sold and transferred to the `buyer`.\\n     * @param proceeds    The amount of dEURO proceeds provided by the `buyer` to repay interest and principal.\\n     *\\n     * Emits a {MintingUpdate} event indicating the updated collateral balance, price, and minted amount after the forced sale.\\n     */\\n    function forceSale(address buyer, uint256 collAmount, uint256 proceeds) external onlyHub expired noChallenge {\\n        uint256 debt = _accrueInterest(); // ensure latest state\\n\\n        // send collateral to buyer\\n        uint256 remainingCollateral = _sendCollateral(buyer, collAmount);\\n\\n        if (debt == 0) {\\n            // No debt, everything goes to owner if proceeds > 0\\n            if (proceeds > 0) {\\n                deuro.transferFrom(buyer, owner(), proceeds);\\n            }\\n            emit MintingUpdate(_collateralBalance(), price, debt);\\n            return;\\n        }\\n\\n        // Pay down debt from `buyer` up to `proceeds`.\\n        uint256 used = _payDownDebt(buyer, proceeds);\\n        uint256 leftover = proceeds > used ? (proceeds - used) : 0;\\n        debt = used > debt ? 0 : debt - used;\\n\\n        if (debt == 0 && leftover > 0) {\\n            // All debt paid, leftover is profit for owner\\n            deuro.transferFrom(buyer, owner(), leftover);\\n        } else if (debt > 0 && remainingCollateral == 0) {\\n            uint256 deficit = debt;\\n            // Shortfall scenario, cover the loss if needed\\n            deuro.coverLoss(buyer, deficit);\\n            _payDownDebt(buyer, deficit);\\n        }\\n\\n        emit MintingUpdate(_collateralBalance(), price, debt);\\n    }\\n\\n    /**\\n     * @notice Withdraw any ERC20 token that might have ended up on this address.\\n     * Withdrawing collateral is subject to the same restrictions as withdrawCollateral(...).\\n     */\\n    function withdraw(address token, address target, uint256 amount) external onlyOwner {\\n        if (token == address(collateral)) {\\n            withdrawCollateral(target, amount);\\n        } else {\\n            uint256 balance = _collateralBalance();\\n            IERC20(token).transfer(target, amount);\\n            require(balance == _collateralBalance()); // guard against double-entry-point tokens\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral from the position up to the extent that it is still well collateralized afterwards.\\n     * Not possible as long as there is an open challenge or the contract is subject to a cooldown.\\n     *\\n     * Withdrawing collateral below the minimum collateral amount formally closes the position.\\n     */\\n    function withdrawCollateral(address target, uint256 amount) public ownerOrRoller {\\n        uint256 balance = _withdrawCollateral(target, amount);\\n        emit MintingUpdate(balance, price, principal + accruedInterest);\\n    }\\n\\n    function _withdrawCollateral(address target, uint256 amount) internal noChallenge returns (uint256) {\\n        if (block.timestamp <= cooldown) revert Hot();\\n        uint256 balance = _sendCollateral(target, amount);\\n        _checkCollateral(balance, price);\\n        return balance;\\n    }\\n\\n    function _sendCollateral(address target, uint256 amount) internal returns (uint256) {\\n        if (amount > 0) {\\n            // Some weird tokens fail when trying to transfer 0 amounts\\n            IERC20(collateral).transfer(target, amount);\\n        }\\n        uint256 balance = _collateralBalance();\\n        if (balance < minimumCollateral) {\\n            _close();\\n        }\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice This invariant must always hold and must always be checked when any of the three\\n     * variables change in an adverse way.\\n     */\\n    function _checkCollateral(uint256 collateralReserve, uint256 atPrice) internal view {\\n        uint256 relevantCollateral = collateralReserve < minimumCollateral ? 0 : collateralReserve;\\n        if (relevantCollateral * atPrice < principal * ONE_DEC18) {\\n            revert InsufficientCollateral(relevantCollateral * atPrice, principal * ONE_DEC18);\\n        }\\n    }\\n\\n    function _notifyInterestPaid(uint256 amount) internal {\\n        if (IERC165(hub).supportsInterface(type(IMintingHubGateway).interfaceId)) {\\n            IMintingHubGateway(hub).notifyInterestPaid(amount);\\n        }\\n    }\\n\\n    function _payDownDebt(address payer, uint256 amount) internal returns (uint256 repaidAmount) {\\n        uint256 debt = _accrueInterest(); // ensure principal, accruedInterest, minted are up-to-date\\n\\n        if (amount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 remaining = amount > debt ? debt : amount;\\n        IERC20(deuro).transferFrom(payer, address(this), remaining);\\n        repaidAmount = 0;\\n\\n        // 1) Pay accrued interest first\\n        if (accruedInterest > 0) {\\n            uint256 interestToPay = (accruedInterest > remaining) ? remaining : accruedInterest;\\n            if (interestToPay > 0) {\\n                deuro.collectProfits(address(this), interestToPay);\\n                _notifyInterestPaid(interestToPay);\\n                accruedInterest -= interestToPay;\\n                remaining -= interestToPay;\\n                repaidAmount += interestToPay;\\n            }\\n        }\\n\\n        // 2) Pay principal next\\n        if (principal > 0 && remaining > 0) {\\n            uint256 principalToPay = (principal > remaining) ? remaining : principal;\\n            if (principalToPay > 0) {\\n                uint256 reservePortion = deuro.calculateAssignedReserve(principalToPay, reserveContribution);\\n                uint256 repaid = deuro.burnWithReserve(principalToPay - reservePortion, reserveContribution);\\n                principal -= principalToPay;\\n                remaining -= principalToPay;\\n                repaidAmount += principalToPay;\\n                _notifyRepaid(repaid);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the liquidation price and the durations for phase1 and phase2 of the challenge.\\n     * Both phases are usually of equal duration, but near expiration, phase one is adjusted such that\\n     * it cannot last beyond the expiration date of the position.\\n     */\\n    function challengeData() external view returns (uint256 liqPrice, uint40 phase) {\\n        return (price, challengePeriod);\\n    }\\n\\n    function notifyChallengeStarted(uint256 size) external onlyHub alive {\\n        // Require minimum size. Collateral balance can be below minimum if it was partially challenged before.\\n        if (size < minimumCollateral && size < _collateralBalance()) revert ChallengeTooSmall();\\n        if (size == 0) revert ChallengeTooSmall();\\n        challengedAmount += size;\\n    }\\n\\n    /**\\n     * @param size   amount of collateral challenged (dec18)\\n     */\\n    function notifyChallengeAverted(uint256 size) external onlyHub {\\n        challengedAmount -= size;\\n\\n        // Don't allow minter to close the position immediately so challenge can be repeated before\\n        // the owner has a chance to mint more on an undercollateralized position\\n        _restrictMinting(1 days);\\n    }\\n\\n    /**\\n     * @notice Notifies the position that a challenge was successful.\\n     * Triggers the payout of the challenged part of the collateral.\\n     * Everything else is assumed to be handled by the hub.\\n     *\\n     * @param _bidder address of the bidder that receives the collateral\\n     * @param _size   amount of the collateral bid for\\n     * @return (position owner, effective challenge size in deuro, amount to be repaid, reserve ppm)\\n     */\\n    function notifyChallengeSucceeded(\\n        address _bidder,\\n        uint256 _size\\n    ) external onlyHub returns (address, uint256, uint256, uint32) {\\n        uint256 debt = _accrueInterest();\\n\\n        challengedAmount -= _size;\\n        uint256 colBal = _collateralBalance();\\n        if (colBal < _size) {\\n            _size = colBal;\\n        }\\n\\n        // Determine how much must be repaid based on challenged collateral\\n        uint256 repayment = (colBal == 0) ? 0 : (debt * _size) / colBal;\\n\\n        // First account for paid down accrued interest, then principal\\n        repayment -= (accruedInterest > repayment) ? repayment : accruedInterest;\\n        repayment = (principal > repayment) ? repayment : principal;\\n        _notifyRepaid(repayment);\\n\\n        // Transfer the challenged collateral to the bidder\\n        uint256 newBalance = _sendCollateral(_bidder, _size);\\n        emit MintingUpdate(newBalance, price, debt);\\n\\n        // Give time for additional challenges before the owner can mint again.\\n        _restrictMinting(3 days);\\n\\n        return (owner(), _size, repayment, reserveContribution);\\n    }\\n}\\n\",\"keccak256\":\"0xacd2e7db719f3b15b6b70597703e61bf1b718726b45f9f7d233a915f17ea96c9\",\"license\":\"MIT\"},\"contracts/MintingHubV2/PositionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Position} from \\\"./Position.sol\\\";\\nimport {IDecentralizedEURO} from \\\"../interface/IDecentralizedEURO.sol\\\";\\n\\ncontract PositionFactory {\\n    /**\\n     * Create a completely new position in a newly deployed contract.\\n     * Must be called through the minting hub to be recognized as a valid position.\\n     */\\n    function createNewPosition(\\n        address _owner,\\n        address _deuro,\\n        address _collateral,\\n        uint256 _minCollateral,\\n        uint256 _initialLimit,\\n        uint40 _initPeriod,\\n        uint40 _duration,\\n        uint40 _challengePeriod,\\n        uint24 _riskPremiumPPM,\\n        uint256 _liqPrice,\\n        uint24 _reserve\\n    ) external returns (address) {\\n        return\\n            address(\\n                new Position(\\n                    _owner,\\n                    msg.sender,\\n                    _deuro,\\n                    _collateral,\\n                    _minCollateral,\\n                    _initialLimit,\\n                    _initPeriod,\\n                    _duration,\\n                    _challengePeriod,\\n                    _riskPremiumPPM,\\n                    _liqPrice,\\n                    _reserve\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Clone an existing position. This can be a clone of another clone,\\n     * or an original position.\\n     * @param _parent address of the position we want to clone\\n     * @return address of the newly created clone position\\n     */\\n    function clonePosition(address _parent) external returns (address) {\\n        Position parent = Position(_parent);\\n        parent.assertCloneable();\\n        Position clone = Position(_createClone(parent.original()));\\n        return address(clone);\\n    }\\n\\n    // github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n    function _createClone(address target) internal returns (address result) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            result := create(0, clone, 0x37)\\n        }\\n        require(result != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n}\",\"keccak256\":\"0xfc509b0e392c82b8eda4715cc1628531a13aea0d48c14788acf98c9292871234\",\"license\":\"MIT\"},\"contracts/MintingHubV2/PositionRoller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IDecentralizedEURO} from \\\"../interface/IDecentralizedEURO.sol\\\";\\nimport {IReserve} from \\\"../interface/IReserve.sol\\\";\\n\\nimport {IPosition} from \\\"./interface/IPosition.sol\\\";\\n\\n/**\\n * @title PositionRoller\\n *\\n * Helper to roll over a debt from an old position to a new one.\\n * Both positions should have the same collateral. Otherwise, it does not make much sense.\\n */\\ncontract PositionRoller {\\n    IDecentralizedEURO private deuro;\\n\\n    error NotOwner(address pos);\\n    error NotPosition(address pos);\\n    error Log(uint256, uint256, uint256);\\n\\n    event Roll(address source, uint256 collWithdraw, uint256 repay, address target, uint256 collDeposit, uint256 mint);\\n\\n    constructor(address deuro_) {\\n        deuro = IDecentralizedEURO(deuro_);\\n    }\\n\\n    /**\\n     * Convenience method to roll an old position into a new one.\\n     *\\n     * Pre-condition: an allowance for the roller to spend the collateral asset on behalf of the caller,\\n     * i.e., one should set collateral.approve(roller, collateral.balanceOf(sourcePosition)).\\n     *\\n     * The following is assumed:\\n     * - If the limit of the target position permits, the user wants to roll everything.\\n     * - The user does not want to add additional collateral, but excess collateral is returned.\\n     * - If not enough can be minted in the new position, it is acceptable for the roller to use dEURO from the msg.sender.\\n     */\\n    function rollFully(IPosition source, IPosition target) external {\\n        rollFullyWithExpiration(source, target, target.expiration());\\n    }\\n\\n    /**\\n     * Like rollFully, but with a custom expiration date for the new position.\\n     */\\n    function rollFullyWithExpiration(IPosition source, IPosition target, uint40 expiration) public {\\n        require(source.collateral() == target.collateral());\\n        uint256 repay = source.getDebt();\\n        uint256 mintAmount = target.getMintAmount(repay);\\n        uint256 collateralToWithdraw = IERC20(source.collateral()).balanceOf(address(source));\\n        uint256 targetPrice = target.price();\\n        uint256 depositAmount = (mintAmount * 10 ** 18 + targetPrice - 1) / targetPrice; // round up\\n        if (depositAmount > collateralToWithdraw) {\\n            // If we need more collateral than available from the old position, we opt for taking\\n            // the missing funds from the caller instead of requiring additional collateral.\\n            depositAmount = collateralToWithdraw;\\n            mintAmount = (depositAmount * target.price()) / 10 ** 18; // round down, rest will be taken from caller\\n        }\\n        roll(source, repay, collateralToWithdraw, target, mintAmount, depositAmount, expiration);\\n    }\\n\\n    /**\\n     * Rolls the source position into the target position using a flash loan.\\n     * Both the source and the target position must recognize this roller.\\n     * It is the responsibility of the caller to ensure that both positions are valid contracts.\\n     *\\n     * @param source The source position, must be owned by the msg.sender.\\n     * @param repay The amount to flash loan in order to repay the source position and free up some or all collateral.\\n     * @param collWithdraw Collateral to move from the source position to the msg.sender.\\n     * @param target The target position. If not owned by msg.sender or if it does not have the desired expiration,\\n     *               it is cloned to create a position owned by the msg.sender.\\n     * @param mint The amount to be minted from the target position using collateral from msg.sender.\\n     * @param collDeposit The amount of collateral to be sent from msg.sender to the target position.\\n     * @param expiration The desired expiration date for the target position.\\n     */\\n    function roll(\\n        IPosition source,\\n        uint256 repay,\\n        uint256 collWithdraw,\\n        IPosition target,\\n        uint256 mint,\\n        uint256 collDeposit,\\n        uint40 expiration\\n    ) public valid(source) valid(target) own(source) {\\n        deuro.mint(address(this), repay); // take a flash loan\\n        source.repay(repay);\\n        source.withdrawCollateral(msg.sender, collWithdraw);\\n        if (mint > 0) {\\n            IERC20 targetCollateral = IERC20(target.collateral());\\n            if (Ownable(address(target)).owner() != msg.sender || expiration != target.expiration()) {\\n                targetCollateral.transferFrom(msg.sender, address(this), collDeposit); // get the new collateral\\n                targetCollateral.approve(target.hub(), collDeposit); // approve the new collateral and clone:\\n                target = IPosition(\\n                    IMintingHub(target.hub()).clone(msg.sender, address(target), collDeposit, mint, expiration)\\n                );\\n            } else {\\n                // We can roll into the provided existing position.\\n                // We do not verify whether the target position was created by the known minting hub in order\\n                // to allow positions to be rolled into future versions of the minting hub.\\n                targetCollateral.transferFrom(msg.sender, address(target), collDeposit);\\n                target.mint(msg.sender, mint);\\n            }\\n        }\\n        deuro.burnFrom(msg.sender, repay); // repay the flash loan\\n        emit Roll(address(source), collWithdraw, repay, address(target), collDeposit, mint);\\n    }\\n\\n    modifier own(IPosition pos) {\\n        if (Ownable(address(pos)).owner() != msg.sender) revert NotOwner(address(pos));\\n        _;\\n    }\\n\\n    modifier valid(IPosition pos) {\\n        if (deuro.getPositionParent(address(pos)) == address(0x0)) revert NotPosition(address(pos));\\n        _;\\n    }\\n}\\n\\ninterface IMintingHub {\\n    function clone(\\n        address owner,\\n        address parent,\\n        uint256 _initialCollateral,\\n        uint256 _initialMint,\\n        uint40 expiration\\n    ) external returns (address);\\n}\",\"keccak256\":\"0xeb3561db51b305283e79ae849d8f73a1efbc22bab27d8962ada288d418fb6090\",\"license\":\"MIT\"},\"contracts/MintingHubV2/interface/IMintingHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {ILeadrate} from \\\"../../interface/ILeadrate.sol\\\";\\nimport {IPosition} from \\\"./IPosition.sol\\\";\\nimport {PositionRoller} from \\\"../PositionRoller.sol\\\";\\n\\ninterface IMintingHub {\\n    function RATE() external view returns (ILeadrate);\\n\\n    function ROLLER() external view returns (PositionRoller);\\n\\n    function challenge(\\n        address _positionAddr,\\n        uint256 _collateralAmount,\\n        uint256 minimumPrice\\n    ) external returns (uint256);\\n\\n    function bid(uint32 _challengeNumber, uint256 size, bool postponeCollateralReturn) external;\\n\\n    function returnPostponedCollateral(address collateral, address target) external;\\n\\n    function buyExpiredCollateral(IPosition pos, uint256 upToAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x7f73a2cbecb1943c1d7f54d60dfb212e7067ce27d337d7f8814354c4b2c81f1f\",\"license\":\"MIT\"},\"contracts/MintingHubV2/interface/IPosition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPosition {\\n    function hub() external view returns (address);\\n\\n    function collateral() external view returns (IERC20);\\n\\n    function minimumCollateral() external view returns (uint256);\\n\\n    function price() external view returns (uint256);\\n\\n    function challengedAmount() external view returns (uint256);\\n\\n    function original() external view returns (address);\\n\\n    function expiration() external view returns (uint40);\\n\\n    function cooldown() external view returns (uint40);\\n\\n    function limit() external view returns (uint256);\\n\\n    function challengePeriod() external view returns (uint40);\\n\\n    function start() external view returns (uint40);\\n\\n    function riskPremiumPPM() external view returns (uint24);\\n\\n    function reserveContribution() external view returns (uint24);\\n\\n    function principal() external view returns (uint256);\\n\\n    function accruedInterest() external view returns (uint256);\\n\\n    function lastAccrual() external view returns (uint40);\\n\\n    function initialize(address parent, uint40 _expiration) external;\\n\\n    function assertCloneable() external;\\n\\n    function notifyMint(uint256 mint_) external;\\n\\n    function notifyRepaid(uint256 repaid_) external;\\n\\n    function availableForClones() external view returns (uint256);\\n\\n    function availableForMinting() external view returns (uint256);\\n\\n    function deny(address[] calldata helpers, string calldata message) external;\\n\\n    function getUsableMint(uint256 totalMint) external view returns (uint256);\\n\\n    function getMintAmount(uint256 usableMint) external view returns (uint256);\\n\\n    function adjust(uint256 newMinted, uint256 newCollateral, uint256 newPrice) external;\\n\\n    function adjustPrice(uint256 newPrice) external;\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function annualInterestPPM() external view returns (uint24);\\n\\n    function getDebt() external view returns (uint256);\\n\\n    function repay(uint256 amount) external returns (uint256);\\n\\n    function repayFull() external returns (uint256);\\n\\n    function forceSale(address buyer, uint256 collAmount, uint256 proceeds) external;\\n\\n    function withdraw(address token, address target, uint256 amount) external;\\n\\n    function withdrawCollateral(address target, uint256 amount) external;\\n\\n    function challengeData() external view returns (uint256 liqPrice, uint40 phase);\\n\\n    function notifyChallengeStarted(uint256 size) external;\\n\\n    function notifyChallengeAverted(uint256 size) external;\\n\\n    function notifyChallengeSucceeded(\\n        address _bidder,\\n        uint256 _size\\n    ) external returns (address, uint256, uint256, uint32);\\n}\\n\",\"keccak256\":\"0xc52f3500aac93daa730420bd34b3194f326ef60e203017a614154a48f00c540d\",\"license\":\"MIT\"},\"contracts/gateway/interface/IMintingHubGateway.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport {IMintingHub} from \\\"../../MintingHubV2/interface/IMintingHub.sol\\\";\\n\\ninterface IMintingHubGateway is IMintingHub {\\n    function notifyInterestPaid(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xbd573071c073f6956ad666918d5110c5f662afb44d6373024fd1513feb32f3ca\",\"license\":\"UNLICENSED\"},\"contracts/interface/IDecentralizedEURO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IReserve} from \\\"./IReserve.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDecentralizedEURO is IERC20 {\\n    function suggestMinter(\\n        address _minter,\\n        uint256 _applicationPeriod,\\n        uint256 _applicationFee,\\n        string calldata _message\\n    ) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function minterReserve() external view returns (uint256);\\n\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\n\\n    function calculateFreedAmount(uint256 amountExcludingReserve, uint32 reservePPM) external view returns (uint256);\\n\\n    function equity() external view returns (uint256);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function getPositionParent(address position) external view returns (address);\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burnFrom(address target, uint256 amount) external;\\n\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnFromWithReserve(\\n        address payer,\\n        uint256 targetTotalBurnAmount,\\n        uint32 _reservePPM\\n    ) external returns (uint256);\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function coverLoss(address source, uint256 amount) external;\\n\\n    function collectProfits(address source, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x5a794e79a91424814795d9f3edd3db86e4d360f652a0250c04c279592417bb8e\",\"license\":\"MIT\"},\"contracts/interface/ILeadrate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILeadrate {\\n   function currentRatePPM() external view returns (uint24);\\n   function currentTicks() external view returns (uint64);\\n}\",\"keccak256\":\"0x881b944dbc6c7d79ad5e8de37e31e1c11ff9b75eed314b62b1071f2e5b96dfc4\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IReserve is IERC20 {\\n    function invest(uint256 amount, uint256 expected) external returns (uint256);\\n    function checkQualified(address sender, address[] calldata helpers) external view;\\n}\\n\",\"keccak256\":\"0x8d413b94c7860d6f8a9ba0168642db626830209824e4ad2d879d5f252490d2b9\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Functions for share valuation\\n */\\ncontract MathUtil {\\n    uint256 internal constant ONE_DEC18 = 10 ** 18;\\n\\n    // Let's go for 12 digits of precision (18-6)\\n    uint256 internal constant THRESH_DEC18 = 10 ** 6;\\n\\n    /**\\n     * @notice Fifth root with Halley approximation\\n     *         Number 1e18 decimal\\n     * @param _v     number for which we calculate x**(1/5)\\n     * @return returns _v**(1/5)\\n     */\\n    function _fifthRoot(uint256 _v) internal pure returns (uint256) {\\n        // Good first guess for _v slightly above 1.0, which is often the case in the dEURO system\\n        uint256 x = _v > ONE_DEC18 && _v < 10 ** 19 ? (_v - ONE_DEC18) / 5 + ONE_DEC18 : ONE_DEC18;\\n        uint256 diff;\\n        do {\\n            uint256 powX5 = _power5(x);\\n            uint256 xnew = (x * (2 * powX5 + 3 * _v)) / (3 * powX5 + 2 * _v);\\n            diff = xnew > x ? xnew - x : x - xnew;\\n            x = xnew;\\n        } while (diff > THRESH_DEC18);\\n        return x;\\n    }\\n\\n    function _mulD18(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a * _b) / ONE_DEC18;\\n    }\\n\\n    function _divD18(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a * ONE_DEC18) / _b;\\n    }\\n\\n    function _power5(uint256 _x) internal pure returns (uint256) {\\n        return _mulD18(_mulD18(_mulD18(_mulD18(_x, _x), _x), _x), _x);\\n    }\\n\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x05890b75cecebc9ed779dee07d9163d5f62718255002bb77361b871071a0eef1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b5061372e8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635d824f761461003b578063b3e891801461006a575b600080fd5b61004e61004936600461029e565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e61007836600461035b565b6100d9565b60008b338c8c8c8c8c8c8c8c8c8c6040516100979061024c565b6100ac9c9b9a9998979695949392919061037f565b604051809103906000f0801580156100c8573d6000803e3d6000fd5b509c9b505050505050505050505050565b600080829050806001600160a01b0316630e49d77e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561011a57600080fd5b505af115801561012e573d6000803e3d6000fd5b50505050600061019e826001600160a01b03166346c715fa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610175573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610199919061040f565b6101a6565b949350505050565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09250506001600160a01b0382166102465760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b50919050565b6132cc8061042d83390190565b6001600160a01b038116811461026e57600080fd5b50565b803564ffffffffff8116811461028657600080fd5b919050565b803562ffffff8116811461028657600080fd5b60008060008060008060008060008060006101608c8e0312156102c057600080fd5b8b356102cb81610259565b9a5060208c01356102db81610259565b995060408c01356102eb81610259565b985060608c0135975060808c0135965061030760a08d01610271565b955061031560c08d01610271565b945061032360e08d01610271565b93506103326101008d0161028b565b92506101208c013591506103496101408d0161028b565b90509295989b509295989b9093969950565b60006020828403121561036d57600080fd5b813561037881610259565b9392505050565b6001600160a01b038d811682528c811660208301528b811660408301528a1660608201526080810189905260a0810188905264ffffffffff87811660c0830152861660e0820152610180810164ffffffffff861661010083015262ffffff8516610120830152836101408301526103fe61016083018462ffffff169052565b9d9c50505050505050505050505050565b60006020828403121561042157600080fd5b81516103788161025956fe6101c060405234801561001157600080fd5b506040516132cc3803806132cc83398101604081905261003091610201565b8b6001600160a01b03811661005f57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100688161013c565b506203f4808664ffffffffff16101561008057600080fd5b3060e0526001600160a01b038b8116610100528a81166101205289166101405262ffffff8084166101805281166101a05261016088905264ffffffffff841660a0526100cc86426102e0565b64ffffffffff1660c08190526004805464ffffffffff1916821790556100f39086906102e0565b6004805464ffffffffff92909216650100000000000264ffffffffff60281b19909216919091179055608087905261012b828861018c565b50505050505050505050505061031a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61019e670de0b6b3a764000082610303565b610160516101ac9084610303565b11156101b757600080fd5b50600155565b80516001600160a01b03811681146101d457600080fd5b919050565b805164ffffffffff811681146101d457600080fd5b805162ffffff811681146101d457600080fd5b6000806000806000806000806000806000806101808d8f03121561022457600080fd5b61022d8d6101bd565b9b5061023b60208e016101bd565b9a5061024960408e016101bd565b995061025760608e016101bd565b60808e015160a08f0151919a509850965061027460c08e016101d9565b955061028260e08e016101d9565b94506102916101008e016101d9565b93506102a06101208e016101ee565b6101408e015190935091506102b86101608e016101ee565b90509295989b509295989b509295989b565b634e487b7160e01b600052601160045260246000fd5b64ffffffffff81811683821601908111156102fd576102fd6102ca565b92915050565b80820281158282048414176102fd576102fd6102ca565b60805160a05160c05160e05161010051610120516101405161016051610180516101a051612de06104ec600039600081816103c701528181610a81015281816118d101528181611a220152818161216901528181612265015261254c0152600081816104ed01526117b80152600081816105ca0152818161121801528181611ef00152818161282401526128d301526000818161065b0152818161161e01528181611b5101528181611d780152611e7301526000818161053e015281816107ee01528181610b7001528181610caf01528181610d920152818161135501528181611aa101528181611fb90152818161207b0152818161219301528181612214015261257a0152600081816103750152818161093e01528181610ab601528181610f300152818161108301528181611189015281816112af0152818161133101528181611406015281816115c4015281816117d901528181611a7d0152818161275b01526127e901526000818161045f01528181610e5901528181610eae0152818161148401528181611ddd01526124c00152600081816105f101526107a701526000818161033201526106a801526000818161059201528181610e880152818161199a01526119dc0152612de06000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c8063715018a611610151578063a8a3e31d116100c3578063c54a89ca11610087578063c54a89ca14610630578063cfb636f014610643578063d8dfeb4514610656578063d9caed121461067d578063f2fde38b14610690578063f3f480d9146106a357600080fd5b8063a8a3e31d146105b4578063ba5d3078146105bc578063babe7c74146105c5578063be9a6555146105ec578063c2b6b58c1461061357600080fd5b80637bd6fb9b116101155780637bd6fb9b1461053157806382b8eaf5146105395780638da5cb5b146105605780639de2f79614610571578063a035b1fe14610584578063a4d66daf1461058d57600080fd5b8063715018a6146104cd57806372bf079e146104d5578063730d48b7146104e8578063787a08a61461050f5780637b3baab41461052057600080fd5b8063371fd8e6116101ea5780634665096d116101ae5780634665096d1461042c57806346c715fa1461045a57806349746f10146104815780635be980f5146104945780636d4749fa146104a75780636f871cec146104ba57600080fd5b8063371fd8e6146103af5780633a7c29fb146103c257806340c10f19146103fd57806342d020411461041057806345fe329f1461042357600080fd5b806324e657fe1161023c57806324e657fe1461030757806329d93d67146103105780632a37eeae14610318578063329864aa14610320578063350c35e91461035d578063365a86fc1461037057600080fd5b80630e49d77e1461027957806314a6bf0f146102835780631bbea34c1461029e57806320aa9e72146102b1578063211d7983146102f4575b600080fd5b6102816106ca565b005b61028b610795565b6040519081526020015b60405180910390f35b6102816102ac366004612952565b6107a5565b6102c46102bf366004612a0a565b61092e565b604080516001600160a01b03909516855260208501939093529183015263ffffffff166060820152608001610295565b610281610302366004612a36565b610aab565b61028b60035481565b61028b610e40565b61028b610e4d565b6001546040805191825264ffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602083015201610295565b61028161036b366004612a0a565b610f2e565b6103977f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610295565b61028b6103bd366004612a6b565b611024565b6103e97f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff9091168152602001610295565b61028161040b366004612a0a565b611081565b61028161041e366004612a6b565b61117e565b61028b60065481565b60045461044490600160281b900464ffffffffff1681565b60405164ffffffffff9091168152602001610295565b6103977f000000000000000000000000000000000000000000000000000000000000000081565b61028161048f366004612a6b565b6112a4565b6102816104a2366004612a6b565b611314565b6102816104b5366004612a97565b6113fb565b6102816104c8366004612ad0565b6115ec565b610281611746565b6102816104e3366004612a6b565b611758565b6103e97f000000000000000000000000000000000000000000000000000000000000000081565b6004546104449064ffffffffff1681565b6007546104449064ffffffffff1681565b6103e96117b4565b6103977f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316610397565b61028b61057f366004612a6b565b6118c4565b61028b60015481565b61028b7f000000000000000000000000000000000000000000000000000000000000000081565b61028b61193a565b61028b60055481565b61028b7f000000000000000000000000000000000000000000000000000000000000000081565b6104447f000000000000000000000000000000000000000000000000000000000000000081565b600454600160501b900460ff166040519015158152602001610295565b61028b61063e366004612a6b565b611a17565b610281610651366004612a6b565b611a60565b6103977f000000000000000000000000000000000000000000000000000000000000000081565b61028161068b366004612afc565b611b47565b61028161069e366004612b3d565b611c2d565b6104447f000000000000000000000000000000000000000000000000000000000000000081565b600354156106eb5760405163d26e2de960e01b815260040160405180910390fd5b60045464ffffffffff16421161071457604051631c02820f60e21b815260040160405180910390fd5b600454600160281b900464ffffffffff16421061076857600480546040516238ddd760e41b815264ffffffffff42811693820193909352600160281b90910490911660248201526044015b60405180910390fd5b600454600160501b900460ff161561079357604051631cdde67b60e01b815260040160405180910390fd5b565b60006107a042611c68565b905090565b7f000000000000000000000000000000000000000000000000000000000000000064ffffffffff1642106107ec5760405163ecdd1c2960e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086e9190612b5a565b6001600160a01b031663352e3a833386866040518463ffffffff1660e01b815260040161089d93929190612b77565b60006040518083038186803b1580156108b557600080fd5b505afa1580156108c9573d6000803e3d6000fd5b505050506108e56004805460ff60501b1916600160501b179055565b336001600160a01b03167faca80c800ec0d2aa9d9d31b7f886a1dd3067d4676abc637626a18ffb9381653d8383604051610920929190612bd5565b60405180910390a250505050565b6000808080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461097c576040516313bd2e8360e31b815260040160405180910390fd5b6000610986611d0b565b9050856003600082825461099a9190612c1a565b90915550600090506109aa611d60565b9050868110156109b8578096505b600081156109da57816109cb8985612c2d565b6109d59190612c44565b6109dd565b60005b905080600654116109f0576006546109f2565b805b6109fc9082612c1a565b90508060055411610a0f57600554610a11565b805b9050610a1c81611dc7565b6000610a288a8a611e45565b6001546040805183815260208101929092528101869052909150600080516020612d8b8339815191529060600160405180910390a1610a696203f480611f2e565b506000546001600160a01b0316999798509662ffffff7f0000000000000000000000000000000000000000000000000000000000000000169650945050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610af4576040516313bd2e8360e31b815260040160405180910390fd5b600454600160281b900464ffffffffff16421015610b25576040516302de694d60e41b815260040160405180910390fd5b60035415610b465760405163d26e2de960e01b815260040160405180910390fd5b6000610b50611d0b565b90506000610b5e8585611e45565b905081600003610c55578215610c14577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd86610bb06000546001600160a01b031690565b866040518463ffffffff1660e01b8152600401610bcf93929190612c66565b6020604051808303816000875af1158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c129190612c8a565b505b600080516020612d8b833981519152610c2b611d60565b60015460408051928352602083019190915281018490526060015b60405180910390a15050505050565b6000610c618685611f6f565b90506000818511610c73576000610c7d565b610c7d8286612c1a565b9050838211610c9557610c908285612c1a565b610c98565b60005b935083158015610ca85750600081115b15610d57577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd88610cef6000546001600160a01b031690565b846040518463ffffffff1660e01b8152600401610d0e93929190612c66565b6020604051808303816000875af1158015610d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d519190612c8a565b50610dfd565b600084118015610d65575082155b15610dfd57604051631a3f4bd360e31b81526001600160a01b0388811660048301526024820186905285917f00000000000000000000000000000000000000000000000000000000000000009091169063d1fa5e9890604401600060405180830381600087803b158015610dd857600080fd5b505af1158015610dec573d6000803e3d6000fd5b50505050610dfa8882611f6f565b50505b600080516020612d8b833981519152610e14611d60565b600154604080519283526020830191909152810186905260600160405180910390a1505050505b505050565b60006107a06103bd611d0b565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610eac576002546107a0907f0000000000000000000000000000000000000000000000000000000000000000612c1a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a8a3e31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f0a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190612cac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f09e9e3a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb09190612b5a565b6001600160a01b0316336001600160a01b031614610fd057610fd0612318565b6000610fdc8383612345565b9050600080516020612d8b833981519152816001546006546005546110019190612cc5565b6040805193845260208401929092529082015260600160405180910390a1505050565b6000806110313384611f6f565b9050600080516020612d8b83398151915261104a611d60565b60015460065460055461105d9190612cc5565b6040805193845260208401929092529082015260600160405180910390a192915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f09e9e3a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111039190612b5a565b6001600160a01b0316336001600160a01b03161461112357611123612318565b600061112d611d0b565b90506000611139611d60565b90506111468484836123ac565b6001546040805183815260208101929092528101839052600080516020612d8b8339815191529060600160405180910390a150505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111c7576040516313bd2e8360e31b815260040160405180910390fd5b600454600160281b900464ffffffffff16421061121657600480546040516238ddd760e41b815264ffffffffff42811693820193909352600160281b909104909116602482015260440161075f565b7f00000000000000000000000000000000000000000000000000000000000000008110801561124b5750611248611d60565b81105b1561126957604051633c80636b60e21b815260040160405180910390fd5b8060000361128a57604051633c80636b60e21b815260040160405180910390fd5b806003600082825461129c9190612cc5565b909155505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112ed576040516313bd2e8360e31b815260040160405180910390fd5b80600360008282546112ff9190612c1a565b90915550611311905062015180611f2e565b50565b60405163aa5dd7f160e01b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa15801561139e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c29190612b5a565b6001600160a01b0316146113e9576040516313bd2e8360e31b815260040160405180910390fd5b806002600082825461129c9190612c1a565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611444576040516313bd2e8360e31b815260040160405180910390fd5b600454600160281b900464ffffffffff16156114725760405162dc149f60e41b815260040160405180910390fd5b428164ffffffffff16108061151557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115049190612cd8565b64ffffffffff168164ffffffffff16115b1561153357604051637d9533a960e11b815260040160405180910390fd5b6004805469ffffffffff00000000001916600160281b64ffffffffff8416021781556040805163501ad8ff60e11b815290516001600160a01b0385169263a035b1fe928082019260209290918290030181865afa158015611598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bc9190612cac565b6001556115e87f00000000000000000000000000000000000000000000000000000000000000006125fd565b5050565b6115f4612318565b60006115fe611d0b565b9050600061160a611d60565b9050808411156116b2576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd333061164f8589612c1a565b6040518463ffffffff1660e01b815260040161166d93929190612c66565b6020604051808303816000875af115801561168c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b09190612c8a565b505b818510156116cf576116cd336116c88785612c1a565b611f6f565b505b808410156116ec576116ea336116e58684612c1a565b612345565b505b8185111561170857611708336117028488612c1a565b866123ac565b600154831461171a5761171a8361264d565b6040805185815260208101859052908101869052600080516020612d8b83398151915290606001610c46565b61174e612318565b61079360006125fd565b611760612318565b6117698161264d565b600080516020612d8b833981519152611780611d60565b6001546006546005546117939190612cc5565b6040805193845260208401929092529082015260600160405180910390a150565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663664e97046040518163ffffffff1660e01b8152600401602060405180830381865afa158015611835573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118599190612b5a565b6001600160a01b03166306a7b3766040518163ffffffff1660e01b8152600401602060405180830381865afa158015611896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ba9190612cf5565b6107a09190612d1a565b60008115611931576118f97f0000000000000000000000000000000000000000000000000000000000000000620f4240612d35565b62ffffff16600161190d84620f4240612c2d565b6119179190612c1a565b6119219190612c44565b61192c906001612cc5565b611934565b60005b92915050565b60008060065460055461194d9190612cc5565b90506000670de0b6b3a7640000600154611965611d60565b61196f9190612c2d565b6119799190612c44565b905060008183116119935761198e8383612c1a565b611996565b60005b90507f0000000000000000000000000000000000000000000000000000000000000000816002546119c79190612cc5565b106119d6576000935050505090565b806002547f0000000000000000000000000000000000000000000000000000000000000000611a059190612c1a565b611a0f9190612c1a565b935050505090565b6000620f4240611a477f000000000000000000000000000000000000000000000000000000000000000082612d35565b611a569062ffffff1684612c2d565b6119349190612c44565b60405163aa5dd7f160e01b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa158015611aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0e9190612b5a565b6001600160a01b031614611b35576040516313bd2e8360e31b815260040160405180910390fd5b806002600082825461129c9190612cc5565b611b4f612318565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031603611b9257610e3b8282610f2e565b6000611b9c611d60565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529192509085169063a9059cbb906044016020604051808303816000875af1158015611bef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c139190612c8a565b50611c1c611d60565b8114611c2757600080fd5b50505050565b611c35612318565b6001600160a01b038116611c5f57604051631e4fbdf760e01b81526000600482015260240161075f565b611311816125fd565b6006546007546000919064ffffffffff908116908416118015611c8d57506000600554115b15611cf657600754600090611ca99064ffffffffff1685612d50565b64ffffffffff169050651cae8c13e00081611cc26117b4565b62ffffff16600554611cd49190612c2d565b611cde9190612c2d565b611ce89190612c44565b611cf29083612cc5565b9150505b80600554611d049190612cc5565b9392505050565b600042611d1781611c68565b915060065460055483611d2a9190612c1a565b1115611d4157600554611d3d9083612c1a565b6006555b6007805464ffffffffff191664ffffffffff9290921691909117905590565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610f0a573d6000803e3d6000fd5b604051635be980f560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635be980f5906024015b600060405180830381600087803b158015611e2a57600080fd5b505af1158015611e3e573d6000803e3d6000fd5b5050505050565b60008115611ee25760405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee09190612c8a565b505b6000611eec611d60565b90507f0000000000000000000000000000000000000000000000000000000000000000811015611d0457611d046004805460ff60501b1916600160501b179055565b6000611f3a8242612d6d565b60045490915064ffffffffff90811690821611156115e8576004805464ffffffffff831664ffffffffff199091161790555050565b600080611f7a611d0b565b905082600003611f8e576000915050611934565b6000818411611f9d5783611f9f565b815b6040516323b872dd60e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90611ff290889030908690600401612c66565b6020604051808303816000875af1158015612011573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120359190612c8a565b50600654600093501561211b576000816006541161205557600654612057565b815b905080156121195760405163375edc7760e11b8152306004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636ebdb8ee90604401600060405180830381600087803b1580156120c757600080fd5b505af11580156120db573d6000803e3d6000fd5b505050506120e88161273f565b80600660008282546120fa9190612c1a565b9091555061210a90508183612c1a565b91506121168185612cc5565b93505b505b600060055411801561212d5750600081115b15612310576000816005541161214557600554612147565b815b9050801561230e576040516302dc1ca760e31b81526004810182905262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906316e0e53890604401602060405180830381865afa1580156121e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122069190612cac565b905060006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a47d75ad6122438486612c1a565b6040516001600160e01b031960e084901b168152600481019190915262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526044016020604051808303816000875af11580156122ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d09190612cac565b905082600560008282546122e49190612c1a565b909155506122f490508385612c1a565b93506123008387612cc5565b955061230b81611dc7565b50505b505b505092915050565b6000546001600160a01b031633146107935760405163118cdaa760e01b815233600482015260240161075f565b600354600090156123695760405163d26e2de960e01b815260040160405180910390fd5b60045464ffffffffff16421161239257604051631c02820f60e21b815260040160405180910390fd5b600061239e8484611e45565b9050611d0481600154612820565b600354156123cd5760405163d26e2de960e01b815260040160405180910390fd5b60045464ffffffffff1642116123f657604051631c02820f60e21b815260040160405180910390fd5b600454600160281b900464ffffffffff16421061244557600480546040516238ddd760e41b815264ffffffffff42811693820193909352600160281b909104909116602482015260440161075f565b600454600160501b900460ff161561247057604051631cdde67b60e01b815260040160405180910390fd5b612478610e4d565b8211156124aa5781612488610e4d565b604051634779077960e11b81526004810192909252602482015260440161075f565b604051630cfb636f60e41b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cfb636f090602401600060405180830381600087803b15801561250c57600080fd5b505af1158015612520573d6000803e3d6000fd5b5050604051638112eb2b60e01b81526001600160a01b0386811660048301526024820186905262ffffff7f0000000000000000000000000000000000000000000000000000000000000000166044830152600060648301527f0000000000000000000000000000000000000000000000000000000000000000169250638112eb2b9150608401600060405180830381600087803b1580156125c057600080fd5b505af11580156125d4573d6000803e3d6000fd5b5050505081600560008282546125ea9190612cc5565b92505081905550610e3b81600154612820565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6003541561266e5760405163d26e2de960e01b815260040160405180910390fd5b600454600160281b900464ffffffffff1642106126bd57600480546040516238ddd760e41b815264ffffffffff42811693820193909352600160281b909104909116602482015260440161075f565b600454600160501b900460ff16156126e857604051631cdde67b60e01b815260040160405180910390fd5b600154811115612703576126fe6203f480611f2e565b612714565b61271461270e611d60565b82612820565b61131181612720610e4d565b6006546005546127309190612cc5565b61273a9190612cc5565b6128bc565b6040516301ffc9a760e01b8152637d0ea02d60e01b60048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906301ffc9a790602401602060405180830381865afa1580156127aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ce9190612c8a565b1561131157604051637d0ea02d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637d0ea02d90602401611e10565b60007f0000000000000000000000000000000000000000000000000000000000000000831061284f5782612852565b60005b9050670de0b6b3a764000060055461286a9190612c2d565b6128748383612c2d565b1015610e3b576128848282612c2d565b670de0b6b3a764000060055461289a9190612c2d565b604051632c1f8ef160e21b81526004810192909252602482015260440161075f565b6128ce670de0b6b3a764000082612c2d565b6128f87f000000000000000000000000000000000000000000000000000000000000000084612c2d565b111561290357600080fd5b50600155565b60008083601f84011261291b57600080fd5b50813567ffffffffffffffff81111561293357600080fd5b60208301915083602082850101111561294b57600080fd5b9250929050565b6000806000806040858703121561296857600080fd5b843567ffffffffffffffff81111561297f57600080fd5b8501601f8101871361299057600080fd5b803567ffffffffffffffff8111156129a757600080fd5b8760208260051b84010111156129bc57600080fd5b60209182019550935085013567ffffffffffffffff8111156129dd57600080fd5b6129e987828801612909565b95989497509550505050565b6001600160a01b038116811461131157600080fd5b60008060408385031215612a1d57600080fd5b8235612a28816129f5565b946020939093013593505050565b600080600060608486031215612a4b57600080fd5b8335612a56816129f5565b95602085013595506040909401359392505050565b600060208284031215612a7d57600080fd5b5035919050565b64ffffffffff8116811461131157600080fd5b60008060408385031215612aaa57600080fd5b8235612ab5816129f5565b91506020830135612ac581612a84565b809150509250929050565b600080600060608486031215612ae557600080fd5b505081359360208301359350604090920135919050565b600080600060608486031215612b1157600080fd5b8335612b1c816129f5565b92506020840135612b2c816129f5565b929592945050506040919091013590565b600060208284031215612b4f57600080fd5b8135611d04816129f5565b600060208284031215612b6c57600080fd5b8151611d04816129f5565b6001600160a01b0384168152604060208201819052810182905260008360608301825b85811015612bca578235612bad816129f5565b6001600160a01b0316825260209283019290910190600101612b9a565b509695505050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561193457611934612c04565b808202811582820484141761193457611934612c04565b600082612c6157634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215612c9c57600080fd5b81518015158114611d0457600080fd5b600060208284031215612cbe57600080fd5b5051919050565b8082018082111561193457611934612c04565b600060208284031215612cea57600080fd5b8151611d0481612a84565b600060208284031215612d0757600080fd5b815162ffffff81168114611d0457600080fd5b62ffffff818116838216019081111561193457611934612c04565b62ffffff828116828216039081111561193457611934612c04565b64ffffffffff828116828216039081111561193457611934612c04565b64ffffffffff818116838216019081111561193457611934612c0456fe9483a26ad376f30b5199a79e75df3bb05158c4ee32a348f53e83245a5e50c86ea2646970667358221220f89faf588c4fc8618baab8753095ba16d78f37810101e69fb8279e7337aa870d64736f6c634300081a0033a26469706673582212207116c2f1ae3eb744cfb0394d33b34050ede185fcff919c3b55920ce7baa4862964736f6c634300081a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80635d824f761461003b578063b3e891801461006a575b600080fd5b61004e61004936600461029e565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e61007836600461035b565b6100d9565b60008b338c8c8c8c8c8c8c8c8c8c6040516100979061024c565b6100ac9c9b9a9998979695949392919061037f565b604051809103906000f0801580156100c8573d6000803e3d6000fd5b509c9b505050505050505050505050565b600080829050806001600160a01b0316630e49d77e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561011a57600080fd5b505af115801561012e573d6000803e3d6000fd5b50505050600061019e826001600160a01b03166346c715fa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610175573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610199919061040f565b6101a6565b949350505050565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09250506001600160a01b0382166102465760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b50919050565b6132cc8061042d83390190565b6001600160a01b038116811461026e57600080fd5b50565b803564ffffffffff8116811461028657600080fd5b919050565b803562ffffff8116811461028657600080fd5b60008060008060008060008060008060006101608c8e0312156102c057600080fd5b8b356102cb81610259565b9a5060208c01356102db81610259565b995060408c01356102eb81610259565b985060608c0135975060808c0135965061030760a08d01610271565b955061031560c08d01610271565b945061032360e08d01610271565b93506103326101008d0161028b565b92506101208c013591506103496101408d0161028b565b90509295989b509295989b9093969950565b60006020828403121561036d57600080fd5b813561037881610259565b9392505050565b6001600160a01b038d811682528c811660208301528b811660408301528a1660608201526080810189905260a0810188905264ffffffffff87811660c0830152861660e0820152610180810164ffffffffff861661010083015262ffffff8516610120830152836101408301526103fe61016083018462ffffff169052565b9d9c50505050505050505050505050565b60006020828403121561042157600080fd5b81516103788161025956fe6101c060405234801561001157600080fd5b506040516132cc3803806132cc83398101604081905261003091610201565b8b6001600160a01b03811661005f57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100688161013c565b506203f4808664ffffffffff16101561008057600080fd5b3060e0526001600160a01b038b8116610100528a81166101205289166101405262ffffff8084166101805281166101a05261016088905264ffffffffff841660a0526100cc86426102e0565b64ffffffffff1660c08190526004805464ffffffffff1916821790556100f39086906102e0565b6004805464ffffffffff92909216650100000000000264ffffffffff60281b19909216919091179055608087905261012b828861018c565b50505050505050505050505061031a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61019e670de0b6b3a764000082610303565b610160516101ac9084610303565b11156101b757600080fd5b50600155565b80516001600160a01b03811681146101d457600080fd5b919050565b805164ffffffffff811681146101d457600080fd5b805162ffffff811681146101d457600080fd5b6000806000806000806000806000806000806101808d8f03121561022457600080fd5b61022d8d6101bd565b9b5061023b60208e016101bd565b9a5061024960408e016101bd565b995061025760608e016101bd565b60808e015160a08f0151919a509850965061027460c08e016101d9565b955061028260e08e016101d9565b94506102916101008e016101d9565b93506102a06101208e016101ee565b6101408e015190935091506102b86101608e016101ee565b90509295989b509295989b509295989b565b634e487b7160e01b600052601160045260246000fd5b64ffffffffff81811683821601908111156102fd576102fd6102ca565b92915050565b80820281158282048414176102fd576102fd6102ca565b60805160a05160c05160e05161010051610120516101405161016051610180516101a051612de06104ec600039600081816103c701528181610a81015281816118d101528181611a220152818161216901528181612265015261254c0152600081816104ed01526117b80152600081816105ca0152818161121801528181611ef00152818161282401526128d301526000818161065b0152818161161e01528181611b5101528181611d780152611e7301526000818161053e015281816107ee01528181610b7001528181610caf01528181610d920152818161135501528181611aa101528181611fb90152818161207b0152818161219301528181612214015261257a0152600081816103750152818161093e01528181610ab601528181610f300152818161108301528181611189015281816112af0152818161133101528181611406015281816115c4015281816117d901528181611a7d0152818161275b01526127e901526000818161045f01528181610e5901528181610eae0152818161148401528181611ddd01526124c00152600081816105f101526107a701526000818161033201526106a801526000818161059201528181610e880152818161199a01526119dc0152612de06000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c8063715018a611610151578063a8a3e31d116100c3578063c54a89ca11610087578063c54a89ca14610630578063cfb636f014610643578063d8dfeb4514610656578063d9caed121461067d578063f2fde38b14610690578063f3f480d9146106a357600080fd5b8063a8a3e31d146105b4578063ba5d3078146105bc578063babe7c74146105c5578063be9a6555146105ec578063c2b6b58c1461061357600080fd5b80637bd6fb9b116101155780637bd6fb9b1461053157806382b8eaf5146105395780638da5cb5b146105605780639de2f79614610571578063a035b1fe14610584578063a4d66daf1461058d57600080fd5b8063715018a6146104cd57806372bf079e146104d5578063730d48b7146104e8578063787a08a61461050f5780637b3baab41461052057600080fd5b8063371fd8e6116101ea5780634665096d116101ae5780634665096d1461042c57806346c715fa1461045a57806349746f10146104815780635be980f5146104945780636d4749fa146104a75780636f871cec146104ba57600080fd5b8063371fd8e6146103af5780633a7c29fb146103c257806340c10f19146103fd57806342d020411461041057806345fe329f1461042357600080fd5b806324e657fe1161023c57806324e657fe1461030757806329d93d67146103105780632a37eeae14610318578063329864aa14610320578063350c35e91461035d578063365a86fc1461037057600080fd5b80630e49d77e1461027957806314a6bf0f146102835780631bbea34c1461029e57806320aa9e72146102b1578063211d7983146102f4575b600080fd5b6102816106ca565b005b61028b610795565b6040519081526020015b60405180910390f35b6102816102ac366004612952565b6107a5565b6102c46102bf366004612a0a565b61092e565b604080516001600160a01b03909516855260208501939093529183015263ffffffff166060820152608001610295565b610281610302366004612a36565b610aab565b61028b60035481565b61028b610e40565b61028b610e4d565b6001546040805191825264ffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602083015201610295565b61028161036b366004612a0a565b610f2e565b6103977f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610295565b61028b6103bd366004612a6b565b611024565b6103e97f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff9091168152602001610295565b61028161040b366004612a0a565b611081565b61028161041e366004612a6b565b61117e565b61028b60065481565b60045461044490600160281b900464ffffffffff1681565b60405164ffffffffff9091168152602001610295565b6103977f000000000000000000000000000000000000000000000000000000000000000081565b61028161048f366004612a6b565b6112a4565b6102816104a2366004612a6b565b611314565b6102816104b5366004612a97565b6113fb565b6102816104c8366004612ad0565b6115ec565b610281611746565b6102816104e3366004612a6b565b611758565b6103e97f000000000000000000000000000000000000000000000000000000000000000081565b6004546104449064ffffffffff1681565b6007546104449064ffffffffff1681565b6103e96117b4565b6103977f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316610397565b61028b61057f366004612a6b565b6118c4565b61028b60015481565b61028b7f000000000000000000000000000000000000000000000000000000000000000081565b61028b61193a565b61028b60055481565b61028b7f000000000000000000000000000000000000000000000000000000000000000081565b6104447f000000000000000000000000000000000000000000000000000000000000000081565b600454600160501b900460ff166040519015158152602001610295565b61028b61063e366004612a6b565b611a17565b610281610651366004612a6b565b611a60565b6103977f000000000000000000000000000000000000000000000000000000000000000081565b61028161068b366004612afc565b611b47565b61028161069e366004612b3d565b611c2d565b6104447f000000000000000000000000000000000000000000000000000000000000000081565b600354156106eb5760405163d26e2de960e01b815260040160405180910390fd5b60045464ffffffffff16421161071457604051631c02820f60e21b815260040160405180910390fd5b600454600160281b900464ffffffffff16421061076857600480546040516238ddd760e41b815264ffffffffff42811693820193909352600160281b90910490911660248201526044015b60405180910390fd5b600454600160501b900460ff161561079357604051631cdde67b60e01b815260040160405180910390fd5b565b60006107a042611c68565b905090565b7f000000000000000000000000000000000000000000000000000000000000000064ffffffffff1642106107ec5760405163ecdd1c2960e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086e9190612b5a565b6001600160a01b031663352e3a833386866040518463ffffffff1660e01b815260040161089d93929190612b77565b60006040518083038186803b1580156108b557600080fd5b505afa1580156108c9573d6000803e3d6000fd5b505050506108e56004805460ff60501b1916600160501b179055565b336001600160a01b03167faca80c800ec0d2aa9d9d31b7f886a1dd3067d4676abc637626a18ffb9381653d8383604051610920929190612bd5565b60405180910390a250505050565b6000808080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461097c576040516313bd2e8360e31b815260040160405180910390fd5b6000610986611d0b565b9050856003600082825461099a9190612c1a565b90915550600090506109aa611d60565b9050868110156109b8578096505b600081156109da57816109cb8985612c2d565b6109d59190612c44565b6109dd565b60005b905080600654116109f0576006546109f2565b805b6109fc9082612c1a565b90508060055411610a0f57600554610a11565b805b9050610a1c81611dc7565b6000610a288a8a611e45565b6001546040805183815260208101929092528101869052909150600080516020612d8b8339815191529060600160405180910390a1610a696203f480611f2e565b506000546001600160a01b0316999798509662ffffff7f0000000000000000000000000000000000000000000000000000000000000000169650945050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610af4576040516313bd2e8360e31b815260040160405180910390fd5b600454600160281b900464ffffffffff16421015610b25576040516302de694d60e41b815260040160405180910390fd5b60035415610b465760405163d26e2de960e01b815260040160405180910390fd5b6000610b50611d0b565b90506000610b5e8585611e45565b905081600003610c55578215610c14577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd86610bb06000546001600160a01b031690565b866040518463ffffffff1660e01b8152600401610bcf93929190612c66565b6020604051808303816000875af1158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c129190612c8a565b505b600080516020612d8b833981519152610c2b611d60565b60015460408051928352602083019190915281018490526060015b60405180910390a15050505050565b6000610c618685611f6f565b90506000818511610c73576000610c7d565b610c7d8286612c1a565b9050838211610c9557610c908285612c1a565b610c98565b60005b935083158015610ca85750600081115b15610d57577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd88610cef6000546001600160a01b031690565b846040518463ffffffff1660e01b8152600401610d0e93929190612c66565b6020604051808303816000875af1158015610d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d519190612c8a565b50610dfd565b600084118015610d65575082155b15610dfd57604051631a3f4bd360e31b81526001600160a01b0388811660048301526024820186905285917f00000000000000000000000000000000000000000000000000000000000000009091169063d1fa5e9890604401600060405180830381600087803b158015610dd857600080fd5b505af1158015610dec573d6000803e3d6000fd5b50505050610dfa8882611f6f565b50505b600080516020612d8b833981519152610e14611d60565b600154604080519283526020830191909152810186905260600160405180910390a1505050505b505050565b60006107a06103bd611d0b565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610eac576002546107a0907f0000000000000000000000000000000000000000000000000000000000000000612c1a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a8a3e31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f0a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190612cac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f09e9e3a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb09190612b5a565b6001600160a01b0316336001600160a01b031614610fd057610fd0612318565b6000610fdc8383612345565b9050600080516020612d8b833981519152816001546006546005546110019190612cc5565b6040805193845260208401929092529082015260600160405180910390a1505050565b6000806110313384611f6f565b9050600080516020612d8b83398151915261104a611d60565b60015460065460055461105d9190612cc5565b6040805193845260208401929092529082015260600160405180910390a192915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f09e9e3a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111039190612b5a565b6001600160a01b0316336001600160a01b03161461112357611123612318565b600061112d611d0b565b90506000611139611d60565b90506111468484836123ac565b6001546040805183815260208101929092528101839052600080516020612d8b8339815191529060600160405180910390a150505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111c7576040516313bd2e8360e31b815260040160405180910390fd5b600454600160281b900464ffffffffff16421061121657600480546040516238ddd760e41b815264ffffffffff42811693820193909352600160281b909104909116602482015260440161075f565b7f00000000000000000000000000000000000000000000000000000000000000008110801561124b5750611248611d60565b81105b1561126957604051633c80636b60e21b815260040160405180910390fd5b8060000361128a57604051633c80636b60e21b815260040160405180910390fd5b806003600082825461129c9190612cc5565b909155505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112ed576040516313bd2e8360e31b815260040160405180910390fd5b80600360008282546112ff9190612c1a565b90915550611311905062015180611f2e565b50565b60405163aa5dd7f160e01b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa15801561139e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c29190612b5a565b6001600160a01b0316146113e9576040516313bd2e8360e31b815260040160405180910390fd5b806002600082825461129c9190612c1a565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611444576040516313bd2e8360e31b815260040160405180910390fd5b600454600160281b900464ffffffffff16156114725760405162dc149f60e41b815260040160405180910390fd5b428164ffffffffff16108061151557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115049190612cd8565b64ffffffffff168164ffffffffff16115b1561153357604051637d9533a960e11b815260040160405180910390fd5b6004805469ffffffffff00000000001916600160281b64ffffffffff8416021781556040805163501ad8ff60e11b815290516001600160a01b0385169263a035b1fe928082019260209290918290030181865afa158015611598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bc9190612cac565b6001556115e87f00000000000000000000000000000000000000000000000000000000000000006125fd565b5050565b6115f4612318565b60006115fe611d0b565b9050600061160a611d60565b9050808411156116b2576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd333061164f8589612c1a565b6040518463ffffffff1660e01b815260040161166d93929190612c66565b6020604051808303816000875af115801561168c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b09190612c8a565b505b818510156116cf576116cd336116c88785612c1a565b611f6f565b505b808410156116ec576116ea336116e58684612c1a565b612345565b505b8185111561170857611708336117028488612c1a565b866123ac565b600154831461171a5761171a8361264d565b6040805185815260208101859052908101869052600080516020612d8b83398151915290606001610c46565b61174e612318565b61079360006125fd565b611760612318565b6117698161264d565b600080516020612d8b833981519152611780611d60565b6001546006546005546117939190612cc5565b6040805193845260208401929092529082015260600160405180910390a150565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663664e97046040518163ffffffff1660e01b8152600401602060405180830381865afa158015611835573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118599190612b5a565b6001600160a01b03166306a7b3766040518163ffffffff1660e01b8152600401602060405180830381865afa158015611896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ba9190612cf5565b6107a09190612d1a565b60008115611931576118f97f0000000000000000000000000000000000000000000000000000000000000000620f4240612d35565b62ffffff16600161190d84620f4240612c2d565b6119179190612c1a565b6119219190612c44565b61192c906001612cc5565b611934565b60005b92915050565b60008060065460055461194d9190612cc5565b90506000670de0b6b3a7640000600154611965611d60565b61196f9190612c2d565b6119799190612c44565b905060008183116119935761198e8383612c1a565b611996565b60005b90507f0000000000000000000000000000000000000000000000000000000000000000816002546119c79190612cc5565b106119d6576000935050505090565b806002547f0000000000000000000000000000000000000000000000000000000000000000611a059190612c1a565b611a0f9190612c1a565b935050505090565b6000620f4240611a477f000000000000000000000000000000000000000000000000000000000000000082612d35565b611a569062ffffff1684612c2d565b6119349190612c44565b60405163aa5dd7f160e01b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa158015611aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0e9190612b5a565b6001600160a01b031614611b35576040516313bd2e8360e31b815260040160405180910390fd5b806002600082825461129c9190612cc5565b611b4f612318565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031603611b9257610e3b8282610f2e565b6000611b9c611d60565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529192509085169063a9059cbb906044016020604051808303816000875af1158015611bef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c139190612c8a565b50611c1c611d60565b8114611c2757600080fd5b50505050565b611c35612318565b6001600160a01b038116611c5f57604051631e4fbdf760e01b81526000600482015260240161075f565b611311816125fd565b6006546007546000919064ffffffffff908116908416118015611c8d57506000600554115b15611cf657600754600090611ca99064ffffffffff1685612d50565b64ffffffffff169050651cae8c13e00081611cc26117b4565b62ffffff16600554611cd49190612c2d565b611cde9190612c2d565b611ce89190612c44565b611cf29083612cc5565b9150505b80600554611d049190612cc5565b9392505050565b600042611d1781611c68565b915060065460055483611d2a9190612c1a565b1115611d4157600554611d3d9083612c1a565b6006555b6007805464ffffffffff191664ffffffffff9290921691909117905590565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610f0a573d6000803e3d6000fd5b604051635be980f560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635be980f5906024015b600060405180830381600087803b158015611e2a57600080fd5b505af1158015611e3e573d6000803e3d6000fd5b5050505050565b60008115611ee25760405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee09190612c8a565b505b6000611eec611d60565b90507f0000000000000000000000000000000000000000000000000000000000000000811015611d0457611d046004805460ff60501b1916600160501b179055565b6000611f3a8242612d6d565b60045490915064ffffffffff90811690821611156115e8576004805464ffffffffff831664ffffffffff199091161790555050565b600080611f7a611d0b565b905082600003611f8e576000915050611934565b6000818411611f9d5783611f9f565b815b6040516323b872dd60e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90611ff290889030908690600401612c66565b6020604051808303816000875af1158015612011573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120359190612c8a565b50600654600093501561211b576000816006541161205557600654612057565b815b905080156121195760405163375edc7760e11b8152306004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636ebdb8ee90604401600060405180830381600087803b1580156120c757600080fd5b505af11580156120db573d6000803e3d6000fd5b505050506120e88161273f565b80600660008282546120fa9190612c1a565b9091555061210a90508183612c1a565b91506121168185612cc5565b93505b505b600060055411801561212d5750600081115b15612310576000816005541161214557600554612147565b815b9050801561230e576040516302dc1ca760e31b81526004810182905262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906316e0e53890604401602060405180830381865afa1580156121e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122069190612cac565b905060006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a47d75ad6122438486612c1a565b6040516001600160e01b031960e084901b168152600481019190915262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526044016020604051808303816000875af11580156122ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d09190612cac565b905082600560008282546122e49190612c1a565b909155506122f490508385612c1a565b93506123008387612cc5565b955061230b81611dc7565b50505b505b505092915050565b6000546001600160a01b031633146107935760405163118cdaa760e01b815233600482015260240161075f565b600354600090156123695760405163d26e2de960e01b815260040160405180910390fd5b60045464ffffffffff16421161239257604051631c02820f60e21b815260040160405180910390fd5b600061239e8484611e45565b9050611d0481600154612820565b600354156123cd5760405163d26e2de960e01b815260040160405180910390fd5b60045464ffffffffff1642116123f657604051631c02820f60e21b815260040160405180910390fd5b600454600160281b900464ffffffffff16421061244557600480546040516238ddd760e41b815264ffffffffff42811693820193909352600160281b909104909116602482015260440161075f565b600454600160501b900460ff161561247057604051631cdde67b60e01b815260040160405180910390fd5b612478610e4d565b8211156124aa5781612488610e4d565b604051634779077960e11b81526004810192909252602482015260440161075f565b604051630cfb636f60e41b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cfb636f090602401600060405180830381600087803b15801561250c57600080fd5b505af1158015612520573d6000803e3d6000fd5b5050604051638112eb2b60e01b81526001600160a01b0386811660048301526024820186905262ffffff7f0000000000000000000000000000000000000000000000000000000000000000166044830152600060648301527f0000000000000000000000000000000000000000000000000000000000000000169250638112eb2b9150608401600060405180830381600087803b1580156125c057600080fd5b505af11580156125d4573d6000803e3d6000fd5b5050505081600560008282546125ea9190612cc5565b92505081905550610e3b81600154612820565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6003541561266e5760405163d26e2de960e01b815260040160405180910390fd5b600454600160281b900464ffffffffff1642106126bd57600480546040516238ddd760e41b815264ffffffffff42811693820193909352600160281b909104909116602482015260440161075f565b600454600160501b900460ff16156126e857604051631cdde67b60e01b815260040160405180910390fd5b600154811115612703576126fe6203f480611f2e565b612714565b61271461270e611d60565b82612820565b61131181612720610e4d565b6006546005546127309190612cc5565b61273a9190612cc5565b6128bc565b6040516301ffc9a760e01b8152637d0ea02d60e01b60048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906301ffc9a790602401602060405180830381865afa1580156127aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ce9190612c8a565b1561131157604051637d0ea02d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637d0ea02d90602401611e10565b60007f0000000000000000000000000000000000000000000000000000000000000000831061284f5782612852565b60005b9050670de0b6b3a764000060055461286a9190612c2d565b6128748383612c2d565b1015610e3b576128848282612c2d565b670de0b6b3a764000060055461289a9190612c2d565b604051632c1f8ef160e21b81526004810192909252602482015260440161075f565b6128ce670de0b6b3a764000082612c2d565b6128f87f000000000000000000000000000000000000000000000000000000000000000084612c2d565b111561290357600080fd5b50600155565b60008083601f84011261291b57600080fd5b50813567ffffffffffffffff81111561293357600080fd5b60208301915083602082850101111561294b57600080fd5b9250929050565b6000806000806040858703121561296857600080fd5b843567ffffffffffffffff81111561297f57600080fd5b8501601f8101871361299057600080fd5b803567ffffffffffffffff8111156129a757600080fd5b8760208260051b84010111156129bc57600080fd5b60209182019550935085013567ffffffffffffffff8111156129dd57600080fd5b6129e987828801612909565b95989497509550505050565b6001600160a01b038116811461131157600080fd5b60008060408385031215612a1d57600080fd5b8235612a28816129f5565b946020939093013593505050565b600080600060608486031215612a4b57600080fd5b8335612a56816129f5565b95602085013595506040909401359392505050565b600060208284031215612a7d57600080fd5b5035919050565b64ffffffffff8116811461131157600080fd5b60008060408385031215612aaa57600080fd5b8235612ab5816129f5565b91506020830135612ac581612a84565b809150509250929050565b600080600060608486031215612ae557600080fd5b505081359360208301359350604090920135919050565b600080600060608486031215612b1157600080fd5b8335612b1c816129f5565b92506020840135612b2c816129f5565b929592945050506040919091013590565b600060208284031215612b4f57600080fd5b8135611d04816129f5565b600060208284031215612b6c57600080fd5b8151611d04816129f5565b6001600160a01b0384168152604060208201819052810182905260008360608301825b85811015612bca578235612bad816129f5565b6001600160a01b0316825260209283019290910190600101612b9a565b509695505050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561193457611934612c04565b808202811582820484141761193457611934612c04565b600082612c6157634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215612c9c57600080fd5b81518015158114611d0457600080fd5b600060208284031215612cbe57600080fd5b5051919050565b8082018082111561193457611934612c04565b600060208284031215612cea57600080fd5b8151611d0481612a84565b600060208284031215612d0757600080fd5b815162ffffff81168114611d0457600080fd5b62ffffff818116838216019081111561193457611934612c04565b62ffffff828116828216039081111561193457611934612c04565b64ffffffffff828116828216039081111561193457611934612c04565b64ffffffffff818116838216019081111561193457611934612c0456fe9483a26ad376f30b5199a79e75df3bb05158c4ee32a348f53e83245a5e50c86ea2646970667358221220f89faf588c4fc8618baab8753095ba16d78f37810101e69fb8279e7337aa870d64736f6c634300081a0033a26469706673582212207116c2f1ae3eb744cfb0394d33b34050ede185fcff919c3b55920ce7baa4862964736f6c634300081a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "clonePosition(address)": {
        "params": {
          "_parent": "address of the position we want to clone"
        },
        "returns": {
          "_0": "address of the newly created clone position"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "clonePosition(address)": {
        "notice": "Clone an existing position. This can be a clone of another clone, or an original position."
      },
      "createNewPosition(address,address,address,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)": {
        "notice": "Create a completely new position in a newly deployed contract. Must be called through the minting hub to be recognized as a valid position."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}