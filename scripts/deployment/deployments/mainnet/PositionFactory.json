{
  "address": "0x5F57ae8222c1B8A56c808AF91a6D1171F1E0859A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_parent",
          "type": "address"
        }
      ],
      "name": "clonePosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_deuro",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "_initPeriod",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "_duration",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "_challengePeriod",
          "type": "uint40"
        },
        {
          "internalType": "uint24",
          "name": "_riskPremiumPPM",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "_liqPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_reserve",
          "type": "uint24"
        }
      ],
      "name": "createNewPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x09e5718dbfcc01687d23dc8a6d197fe008c552230cb131c4e1724116e34a787e",
  "receipt": {
    "to": null,
    "from": "0x7246a902fD8Bf96eCe1Dc9DCc3Bfa9299aF4937e",
    "contractAddress": "0x5F57ae8222c1B8A56c808AF91a6D1171F1E0859A",
    "transactionIndex": 126,
    "gasUsed": "3413149",
    "logsBloom": "0x
    "blockHash": "0x4ce11a21946ca0593d564e1d0f4b616fa0c617a22a72782f3f33e12e494e0f21",
    "transactionHash": "0x09e5718dbfcc01687d23dc8a6d197fe008c552230cb131c4e1724116e34a787e",
    "logs": [],
    "blockNumber": 21841034,
    "cumulativeGasUsed": "16404379",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "4a5a3784dacf73f644d615d19c184266",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"}],\"name\":\"clonePosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deuro\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"_initPeriod\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_duration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_challengePeriod\",\"type\":\"uint40\"},{\"internalType\":\"uint24\",\"name\":\"_riskPremiumPPM\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"_liqPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_reserve\",\"type\":\"uint24\"}],\"name\":\"createNewPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clonePosition(address)\":{\"params\":{\"_parent\":\"address of the position we want to clone\"},\"returns\":{\"_0\":\"address of the newly created clone position\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clonePosition(address)\":{\"notice\":\"Clone an existing position. This can be a clone of another clone, or an original position.\"},\"createNewPosition(address,address,address,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)\":{\"notice\":\"Create a completely new position in a newly deployed contract. Must be called through the minting hub to be recognized as a valid position.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintingHubV2/PositionFactory.sol\":\"PositionFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/MintingHubV2/Position.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IMintingHubGateway} from \\\"../gateway/interface/IMintingHubGateway.sol\\\";\\nimport {IDecentralizedEURO} from \\\"../interface/IDecentralizedEURO.sol\\\";\\nimport {IReserve} from \\\"../interface/IReserve.sol\\\";\\nimport {MathUtil} from \\\"../utils/MathUtil.sol\\\";\\nimport {IMintingHub} from \\\"./interface/IMintingHub.sol\\\";\\nimport {IPosition} from \\\"./interface/IPosition.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title Position\\n * @notice A collateralized minting position.\\n */\\ncontract Position is Ownable, IPosition, MathUtil {\\n    /**\\n     * @notice Note that this contract is intended to be cloned. All clones will share the same values for\\n     * the constant and immutable fields, but have their own values for the other fields.\\n     */\\n\\n    /**\\n     * @notice The deuro price per unit of the collateral below which challenges succeed, (36 - collateral.decimals) decimals\\n     */\\n    uint256 public price;\\n\\n    /**\\n     * @notice How much has been minted in total. This variable is only used in the parent position.\\n     */\\n    uint256 private totalMinted;\\n\\n    uint256 public immutable limit;\\n\\n    /**\\n     * @notice Amount of the collateral that is currently under a challenge.\\n     * Used to figure out whether there are pending challenges.\\n     */\\n    uint256 public challengedAmount;\\n\\n\\n    /**\\n     * @notice The price at which the challenge was initiated.\\n     */\\n    uint256 public challengedPrice;\\n\\n    /**\\n     * @notice Challenge period in seconds.\\n     */\\n    uint40 public immutable challengePeriod;\\n\\n    /**\\n     * @notice Timestamp when minting can start and the position is no longer denied.\\n     */\\n    uint40 public immutable start;\\n\\n    /**\\n     * @notice End of the latest cooldown. If this is in the future, minting is suspended.\\n     */\\n    uint40 public cooldown;\\n\\n    /**\\n     * @notice Timestamp of the expiration of the position. After expiration, challenges cannot be averted\\n     * any more. This is also the basis for fee calculations.\\n     */\\n    uint40 public expiration;\\n\\n    bool private closed;\\n\\n    /**\\n     * @notice The original position to help identify clones.\\n     */\\n    address public immutable original;\\n\\n    /**\\n     * @notice Pointer to the minting hub.\\n     */\\n    address public immutable hub;\\n\\n    /**\\n     * @notice The Eurocoin contract.\\n     */\\n    IDecentralizedEURO public immutable deuro;\\n\\n    /**\\n     * @notice The collateral token.\\n     */\\n    IERC20 public immutable override collateral;\\n\\n    /**\\n     * @notice Minimum acceptable collateral amount to prevent dust.\\n     */\\n    uint256 public immutable override minimumCollateral;\\n\\n    /**\\n     * @notice The interest in parts per million per year that is deducted when minting dEURO.\\n     */\\n    uint24 public immutable riskPremiumPPM;\\n\\n    /**\\n     * @notice The locked-in rate (including riskPremiumPPM) for this position.\\n     */\\n    uint24 public fixedAnnualRatePPM;\\n\\n    /**\\n     * @notice The reserve contribution in parts per million of the minted amount.\\n     */\\n    uint24 public immutable reserveContribution;\\n\\n    /**\\n     * @notice The total principal borrowed.\\n     */\\n    uint256 public principal;\\n\\n    /**\\n     * @notice The total outstanding interest.\\n     */\\n    uint256 public interest;\\n\\n    /**\\n     * @notice The timestamp of the last interest accrual.\\n     */\\n    uint40 public lastAccrual;\\n\\n    event MintingUpdate(uint256 collateral, uint256 price, uint256 principal);\\n    event PositionDenied(address indexed sender, string message); // emitted if closed by governance\\n\\n    error InsufficientCollateral(uint256 needed, uint256 available);\\n    error TooLate();\\n    error RepaidTooMuch(uint256 excess);\\n    error LimitExceeded(uint256 tried, uint256 available);\\n    error ChallengeTooSmall();\\n    error Expired(uint40 time, uint40 expiration);\\n    error Alive();\\n    error Closed();\\n    error Hot();\\n    error Challenged();\\n    error NotHub();\\n    error NotOriginal();\\n    error InvalidExpiration();\\n    error AlreadyInitialized();\\n    error PriceTooHigh(uint256 newPrice, uint256 maxPrice);\\n\\n    modifier alive() {\\n        if (block.timestamp >= expiration) revert Expired(uint40(block.timestamp), expiration);\\n        _;\\n    }\\n\\n    // requires that the position has always been backed by a minimal amount of collateral\\n    modifier backed() {\\n        if (isClosed()) revert Closed();\\n        _;\\n    }\\n\\n    modifier expired() {\\n        if (block.timestamp < expiration) revert Alive();\\n        _;\\n    }\\n\\n    modifier noCooldown() {\\n        if (block.timestamp <= cooldown) revert Hot();\\n        _;\\n    }\\n\\n    modifier noChallenge() {\\n        if (challengedAmount > 0) revert Challenged();\\n        _;\\n    }\\n\\n    modifier onlyHub() {\\n        if (msg.sender != address(hub)) revert NotHub();\\n        _;\\n    }\\n\\n    modifier ownerOrRoller() {\\n        if (msg.sender != address(IMintingHub(hub).ROLLER())) _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev See MintingHub.openPosition\\n     *\\n     * @param _riskPremiumPPM ppm of minted amount that is added to the applicable minting fee as a risk premium\\n     */\\n    constructor(\\n        address _owner,\\n        address _hub,\\n        address _deuro,\\n        address _collateral,\\n        uint256 _minCollateral,\\n        uint256 _initialLimit,\\n        uint40 _initPeriod,\\n        uint40 _duration,\\n        uint40 _challengePeriod,\\n        uint24 _riskPremiumPPM,\\n        uint256 _liqPrice,\\n        uint24 _reservePPM\\n    ) Ownable(_owner) {\\n        require(_initPeriod >= 3 days); // must be at least three days, recommended to use higher values\\n        original = address(this);\\n        hub = _hub;\\n        deuro = IDecentralizedEURO(_deuro);\\n        collateral = IERC20(_collateral);\\n        riskPremiumPPM = _riskPremiumPPM;\\n        reserveContribution = _reservePPM;\\n        minimumCollateral = _minCollateral;\\n        challengePeriod = _challengePeriod;\\n        start = uint40(block.timestamp) + _initPeriod; // at least three days time to deny the position\\n        cooldown = start;\\n        expiration = start + _duration;\\n        limit = _initialLimit;\\n        _setPrice(_liqPrice, _initialLimit);\\n        _fixRateToLeadrate(_riskPremiumPPM);\\n    }\\n\\n    /**\\n     * Initialization method for clones.\\n     * Can only be called once. Should be called immediately after creating the clone.\\n     */\\n    function initialize(address parent, uint40 _expiration) external onlyHub {\\n        if (expiration != 0) revert AlreadyInitialized();\\n        if (_expiration < block.timestamp || _expiration > Position(original).expiration()) revert InvalidExpiration(); // expiration must not be later than original\\n        expiration = _expiration;\\n        price = Position(parent).price();\\n        _fixRateToLeadrate(Position(parent).riskPremiumPPM());\\n        _transferOwnership(hub);\\n    }\\n\\n    /**\\n     * Cloning a position is only allowed if the position is not challenged, not expired and not in cooldown.\\n     */\\n    function assertCloneable() external noChallenge noCooldown alive backed {}\\n\\n    /**\\n     * Notify the original that some amount has been minted.\\n     */\\n    function notifyMint(uint256 mint_) external {\\n        if (deuro.getPositionParent(msg.sender) != hub) revert NotHub();\\n        totalMinted += mint_;\\n    }\\n\\n    function notifyRepaid(uint256 repaid_) external {\\n        if (deuro.getPositionParent(msg.sender) != hub) revert NotHub();\\n        totalMinted -= repaid_;\\n    }\\n\\n    /**\\n     * Should only be called on the original position.\\n     * Better use 'availableForMinting'.\\n     */\\n    function availableForClones() external view returns (uint256) {\\n        // reserve capacity for the original to the extent the owner provided collateral\\n        uint256 potential = (_collateralBalance() * price) / ONE_DEC18;\\n        uint256 unusedPotential = principal > potential ? 0 : potential - principal;\\n        if (totalMinted + unusedPotential >= limit) {\\n            return 0;\\n        } else {\\n            return limit - totalMinted - unusedPotential;\\n        }\\n    }\\n\\n    /**\\n     * The amount available for minting in this position family.\\n     *\\n     * Does not check if positions are challenged, closed, or under cooldown.\\n     */\\n    function availableForMinting() public view returns (uint256) {\\n        if (address(this) == original) {\\n            return limit - totalMinted;\\n        } else {\\n            return Position(original).availableForClones();\\n        }\\n    }\\n\\n    /**\\n     * @notice Qualified pool share holders can call this method to immediately expire a freshly proposed position.\\n     */\\n    function deny(address[] calldata helpers, string calldata message) external {\\n        if (block.timestamp >= start) revert TooLate();\\n        IReserve(deuro.reserve()).checkQualified(msg.sender, helpers);\\n        _close();\\n        emit PositionDenied(msg.sender, message);\\n    }\\n\\n    /**\\n     * Closes the position by putting it into eternal cooldown.\\n     * This allows the users to still withdraw the collateral that is left, but never to mint again.\\n     */\\n    function _close() internal {\\n        closed = true;\\n    }\\n\\n    function isClosed() public view returns (bool) {\\n        return closed;\\n    }\\n\\n    /**\\n     * @notice This is how much the minter can actually use when minting deuro, with the rest being assigned\\n     * to the minter reserve.\\n     */\\n    function getUsableMint(uint256 mintAmount) public view returns (uint256) {\\n        return (mintAmount * (1000_000 - reserveContribution)) / 1000_000;\\n    }\\n\\n    /**\\n     * Returns the corresponding mint amount (disregarding the limit).\\n     */\\n    function getMintAmount(uint256 usableMint) external view returns (uint256) {\\n        return\\n            usableMint == 0\\n                ? 0\\n                : (usableMint * 1000_000 - 1) / (1000_000 - reserveContribution) + 1;\\n    }\\n\\n    /**\\n     * @notice \\\"All in one\\\" function to adjust the principal, the collateral amount,\\n     * and the price in one transaction.\\n     */\\n    function adjust(uint256 newPrincipal, uint256 newCollateral, uint256 newPrice) external onlyOwner {\\n        uint256 colbal = _collateralBalance();\\n        if (newCollateral > colbal) {\\n            collateral.transferFrom(msg.sender, address(this), newCollateral - colbal);\\n        }\\n        // Must be called after collateral deposit, but before withdrawal\\n        if (newPrincipal < principal) {\\n            uint256 debt = principal + _accrueInterest();\\n            _payDownDebt(debt - newPrincipal);\\n        }\\n        if (newCollateral < colbal) {\\n            _withdrawCollateral(msg.sender, colbal - newCollateral);\\n        }\\n        // Must be called after collateral withdrawal\\n        if (newPrincipal > principal) {\\n            _mint(msg.sender, newPrincipal - principal, newCollateral);\\n        }\\n        if (newPrice != price) {\\n            _adjustPrice(newPrice);\\n        }\\n        emit MintingUpdate(newCollateral, newPrice, newPrincipal);\\n    }\\n\\n    /**\\n     * @notice Allows the position owner to adjust the liquidation price as long as there is no pending challenge.\\n     * Lowering the liquidation price can be done with immediate effect, given that there is enough collateral.\\n     * Increasing the liquidation price triggers a cooldown period of 3 days, during which minting is suspended.\\n     */\\n    function adjustPrice(uint256 newPrice) public onlyOwner {\\n        _adjustPrice(newPrice);\\n        emit MintingUpdate(_collateralBalance(), price, principal);\\n    }\\n\\n    function _adjustPrice(uint256 newPrice) internal noChallenge alive backed {\\n        if (newPrice > price) {\\n            _restrictMinting(3 days);\\n        } else {\\n            _checkCollateral(_collateralBalance(), newPrice); \\n        }\\n        _setPrice(newPrice, principal + availableForMinting());\\n    }\\n\\n    function _setPrice(uint256 newPrice, uint256 bounds) internal {\\n        // REVIEW: Restrict price jumps and price increase during cooldown?\\n        // REVIEW: Should we consider future interest in the bounds?\\n        uint256 colBalance = _collateralBalance();\\n        if (newPrice * colBalance > bounds * ONE_DEC18) {\\n            revert PriceTooHigh(newPrice, (bounds * ONE_DEC18) / colBalance);\\n        }\\n        price = newPrice;\\n    }\\n\\n    function _collateralBalance() internal view returns (uint256) {\\n        return IERC20(collateral).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Mint deuro as long as there is no open challenge, the position is not subject to a cooldown,\\n     * and there is sufficient collateral.\\n     */\\n    function mint(address target, uint256 amount) public ownerOrRoller {\\n        uint256 collateralBalance = _collateralBalance();\\n        _mint(target, amount, collateralBalance);\\n        emit MintingUpdate(collateralBalance, price, principal);\\n    }\\n\\n    /**\\n     * @notice Returns the virtual price of the collateral in dEURO.\\n     */\\n    function virtualPrice() public view returns (uint256) {\\n       return _virtualPrice(_collateralBalance(), price);\\n    }\\n\\n    /**\\n     * @notice Computes the virtual price of the collateral in dEURO, which is the minimum collateral\\n     * price required to cover the entire debt, lower bounded by the floor price. Retuns the challenged price\\n     * if a challenge is active.\\n     * @param colBalance The collateral balance of the position.\\n     * @param floorPrice The minimum price of the collateral in dEURO.\\n     */\\n    function _virtualPrice(uint256 colBalance, uint256 floorPrice) internal view returns (uint256) {   \\n        if (challengedPrice > 0) return challengedPrice;   \\n        if (colBalance == 0) return floorPrice;\\n\\n        uint256 virtPrice = (_getDebt() * ONE_DEC18) / colBalance;\\n        return virtPrice < floorPrice ? floorPrice: virtPrice;\\n    }\\n\\n    /**\\n     * @notice Fixes the annual rate to the current leadrate plus the risk premium.\\n     * This re-prices the entire position based on the current leadrate.\\n     */\\n    function _fixRateToLeadrate(uint24 _riskPremiumPPM) internal {\\n        fixedAnnualRatePPM = IMintingHub(hub).RATE().currentRatePPM() + _riskPremiumPPM;\\n    }\\n\\n    /**\\n     * @notice Accrues interest on the principal amount since the last accrual time.\\n     * @return newInterest The total outstanding interest to be paid.\\n     */\\n    function _accrueInterest() internal returns (uint256 newInterest) {\\n        newInterest = _calculateInterest();\\n\\n        if (newInterest > interest) {\\n            interest = newInterest;\\n        }\\n\\n        lastAccrual = uint40(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Computes the total outstanding interest, including newly accrued interest.\\n     * @dev This function calculates interest accumulated since the last accrual based on\\n     * the principal amount, the annual interest rate, and the elapsed time.\\n     * The newly accrued interest is added to the current outstanding interest.\\n     * @return newInterest The total outstanding interest, including newly accrued interest.\\n     */\\n    function _calculateInterest() internal view returns (uint256 newInterest) {\\n        uint256 timestamp = block.timestamp;\\n        newInterest = interest;\\n\\n        if (timestamp > lastAccrual && principal > 0) {\\n            uint256 delta = timestamp - lastAccrual;\\n            newInterest += (principal * fixedAnnualRatePPM * delta) / (365 days * 1_000_000);\\n        }\\n\\n        return newInterest;\\n    }\\n\\n    function _getDebt() internal view returns (uint256) {\\n        return principal + _calculateInterest();\\n    }\\n\\n    /**\\n     * @notice Public function to calculate current debt\\n     * @return The total current debt (principal + current accrued interest)\\n     */\\n    function getDebt() public view returns (uint256) {\\n        return _getDebt();\\n    }\\n\\n    /**\\n     * @notice Public function to get the current outstanding interest\\n     */\\n    function getInterest() public view returns (uint256) {\\n        return _calculateInterest();\\n    }\\n\\n    function _mint(address target, uint256 amount, uint256 collateral_) internal noChallenge noCooldown alive backed {\\n        if (amount > availableForMinting()) revert LimitExceeded(amount, availableForMinting());\\n\\n        _accrueInterest(); // accrue interest\\n        _fixRateToLeadrate(riskPremiumPPM); // sync interest rate with leadrate\\n\\n        Position(original).notifyMint(amount);\\n        deuro.mintWithReserve(target, amount, reserveContribution);\\n\\n        principal += amount;\\n        _checkCollateral(collateral_, price);\\n    }\\n\\n    function _restrictMinting(uint40 period) internal {\\n        uint40 horizon = uint40(block.timestamp) + period;\\n        if (horizon > cooldown) {\\n            cooldown = horizon;\\n        }\\n    }\\n\\n    /**\\n    * @notice Repays a specified amount of debt from `msg.sender`, prioritizing accrued interest first and then principal.\\n    * @dev This method integrates the logic of paying accrued interest before principal, as introduced in the continuous\\n    *      interest accrual model. Any interest repaid is collected as profit, and principal repayment uses `burnFromWithReserve`.\\n    * \\n    *      Unlike previous implementations, this function delegates the actual repayment steps to `_payDownDebt`, ensuring\\n    *      a clean separation of logic. As a result:\\n    *      - Any surplus `amount` beyond what is needed to pay all outstanding interest and principal is never withdrawn \\n    *        from `msg.sender`\\u2019s account (no leftover handling required).\\n    *      - The function can be called while there are challenges, though in that scenario, collateral withdrawals remain \\n    *        blocked until all challenges are resolved.\\n    * \\n    *      To fully close the position (bring `debt` to 0), the amount required generally follows the formula:\\n    *      `debt = principal + interest`. Under normal conditions, this simplifies to:\\n    *      `amount = (principal * (1000000 - reservePPM)) / 1000000 + interest`.\\n    * \\n    *      For example, if `principal` is 40, `interest` is 10, and `reservePPM` is 200000, repaying 42 dEURO\\n    *      is required to fully close the position.\\n    * \\n    * @param amount The maximum amount of dEURO that `msg.sender` is willing to repay.\\n    * @return used  The actual amount of dEURO used for interest and principal repayment.\\n    * \\n    * Emits a {MintingUpdate} event.\\n    */\\n    function repay(uint256 amount) public returns (uint256) {\\n        uint256 used = _payDownDebt(amount);\\n        emit MintingUpdate(_collateralBalance(), price, principal);\\n        return used;\\n    }\\n\\n    function repayFull() external returns (uint256) {\\n        return repay(principal + _accrueInterest());\\n    }\\n\\n    /**\\n     * @notice Updates oustanding principal and notifies the original position that a portion of the total \\n     * minted has been repaid.\\n     */\\n    function _notifyRepaid(uint256 amount) internal {\\n        if (amount > principal) revert RepaidTooMuch(amount - principal);\\n        Position(original).notifyRepaid(amount);\\n        principal -= amount;\\n    }\\n    \\n    /**\\n     * @notice Updates outstanding interest and notifies the minting hub gateway that interest has been paid.\\n     */\\n    function _notifyInterestPaid(uint256 amount) internal {\\n        if (amount > interest) revert RepaidTooMuch(amount - interest);\\n        if (IERC165(hub).supportsInterface(type(IMintingHubGateway).interfaceId)) {\\n            IMintingHubGateway(hub).notifyInterestPaid(amount);\\n        }\\n        interest -= amount;\\n    }\\n\\n    /**\\n     * @notice Forcefully sells some of the collateral after the position has expired, using the given buyer as the source of proceeds.\\n     * @dev\\n     * - Can only be called by the minting hub once the position is expired.\\n     * - Requires that there are no open challenges, ensuring that a forced sale is not used to circumvent the challenge process.\\n     * - The proceeds from the sale are first used to repay any accrued interest (treated as profit, collected via `collectProfits`),\\n     *   and then the principal (via `burnFromWithReserve`). This ensures correct accounting, where interest is always realized as profit before principal is returned.\\n     * - If all debt is fully repaid and there are surplus proceeds, these are transferred to the position owner.\\n     * - If there is a shortfall (not enough proceeds to fully repay the debt) and no remaining collateral, the system covers the loss.\\n     *\\n     * Do not allow a forced sale as long as there is an open challenge. Otherwise, a forced sale by the owner\\n     * himself could remove any incentive to launch challenges shortly before the expiration. (CS-ZCHF2-001)\\n     *\\n     * @param buyer         The address buying the collateral. This address provides `proceeds` in dEURO to repay the outstanding debt.\\n     * @param colAmount     The amount of collateral to be forcibly sold and transferred to the `buyer`.\\n     * @param proceeds      The amount of dEURO proceeds provided by the `buyer` to repay the outstanding debt.\\n     *\\n     * Emits a {MintingUpdate} event indicating the updated collateral balance, price, and debt after the forced sale.\\n     */\\n    function forceSale(address buyer, uint256 colAmount, uint256 proceeds) external onlyHub expired noChallenge {\\n        uint256 debt = principal + _accrueInterest();\\n        uint256 remainingCollateral = _sendCollateral(buyer, colAmount); // Send collateral to buyer\\n\\n        // No debt, everything goes to owner if proceeds > 0\\n        if (debt == 0) {\\n            if (proceeds > 0) {\\n                deuro.transferFrom(buyer, owner(), proceeds);\\n            }\\n            emit MintingUpdate(_collateralBalance(), price, principal);\\n            return;\\n        }\\n\\n        // Note: A postcondition of _repayPrincipalNet is `principal + interest > 0 => proceeds == 0` (see assert below).\\n        proceeds = _repayInterest(buyer, proceeds);\\n        proceeds = _repayPrincipalNet(buyer, proceeds);\\n\\n        // If remaining collateral is 0 and `principal + interest` > 0, cover the shortfall with the system.\\n        if (remainingCollateral == 0 && principal + interest > 0) {\\n            assert(proceeds == 0);\\n            deuro.coverLoss(address(this), principal + interest);\\n            deuro.burnWithoutReserve(principal + interest, reserveContribution);\\n            _notifyRepaid(principal); // REVIEW: Check if principal > 0 before?\\n            _notifyInterestPaid(interest);\\n        } else if (proceeds > 0) {\\n            // All debt paid, leftover proceeds is profit for owner\\n            deuro.transferFrom(buyer, owner(), proceeds);\\n        }\\n\\n        emit MintingUpdate(_collateralBalance(), price, principal);\\n    }\\n\\n    /**\\n     * @notice Withdraw any ERC20 token that might have ended up on this address.\\n     * Withdrawing collateral is subject to the same restrictions as withdrawCollateral(...).\\n     */\\n    function withdraw(address token, address target, uint256 amount) external onlyOwner {\\n        if (token == address(collateral)) {\\n            withdrawCollateral(target, amount);\\n        } else {\\n            uint256 balance = _collateralBalance();\\n            IERC20(token).transfer(target, amount);\\n            require(balance == _collateralBalance()); // guard against double-entry-point tokens\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral from the position up to the extent that it is still well collateralized afterwards.\\n     * Not possible as long as there is an open challenge or the contract is subject to a cooldown.\\n     *\\n     * Withdrawing collateral below the minimum collateral amount formally closes the position.\\n     */\\n    function withdrawCollateral(address target, uint256 amount) public ownerOrRoller {\\n        uint256 balance = _withdrawCollateral(target, amount);\\n        emit MintingUpdate(balance, price, principal);\\n    }\\n\\n    function _withdrawCollateral(address target, uint256 amount) internal noChallenge returns (uint256) {\\n        if (block.timestamp <= cooldown) revert Hot();\\n        uint256 balance = _sendCollateral(target, amount);\\n        _checkCollateral(balance, price);\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Transfer the challenged collateral to the bidder. Only callable by minting hub.\\n     */\\n    function transferChallengedCollateral(address target, uint256 amount) external onlyHub {\\n        uint256 newBalance = _sendCollateral(target, amount);\\n        emit MintingUpdate(newBalance, price, principal);\\n    }\\n\\n    function _sendCollateral(address target, uint256 amount) internal returns (uint256) {\\n        // Some weird tokens fail when trying to transfer 0 amounts\\n        if (amount > 0) {\\n            IERC20(collateral).transfer(target, amount);\\n        }\\n        uint256 balance = _collateralBalance();\\n        if (balance < minimumCollateral) {\\n            _close();\\n        }\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice This invariant must always hold and must always be checked when any of the three\\n     * variables change in an adverse way.\\n     */\\n    function _checkCollateral(uint256 collateralReserve, uint256 atPrice) internal view {\\n        uint256 relevantCollateral = collateralReserve < minimumCollateral ? 0 : collateralReserve;\\n        uint256 debt = _getDebt();\\n        if (relevantCollateral * atPrice < debt * ONE_DEC18) {\\n            revert InsufficientCollateral(relevantCollateral * atPrice, debt * ONE_DEC18);\\n        }\\n    }\\n\\n    /**\\n     * @notice Repays a specified amount of debt from `msg.sender`, prioritizing accrued interest first and then principal.\\n     * @return The actual amount of dEURO used for interest and principal repayment.\\n     */\\n    function _payDownDebt(uint256 amount) internal returns (uint256) {\\n        _accrueInterest();\\n\\n        if (amount == 0) return 0;\\n\\n        uint256 remaining = amount;\\n        remaining = _repayInterest(msg.sender, remaining); // Repay interest\\n        remaining = _repayPrincipal(msg.sender, remaining); // Repay principal\\n\\n        return amount - remaining;\\n    }\\n\\n    /**\\n     * @notice Repays a specified amount of interest from `msg.sender`.\\n     * @dev Assumes that _accrueInterest has been called before this function.\\n     * @return `amount` remaining after interest repayment.\\n     */\\n    function _repayInterest(address payer, uint256 amount) internal returns (uint256) {\\n        uint256 repayment = (interest > amount) ? amount : interest;\\n        if (repayment > 0) {\\n            deuro.collectProfits(payer, repayment);\\n            _notifyInterestPaid(repayment);\\n            return amount - repayment;\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Repays a specified amount of principal from `msg.sender`.\\n     * @return `amount` remaining after principal repayment.\\n     */\\n    function _repayPrincipal(address payer, uint256 amount) internal returns (uint256) {\\n        uint256 repayment = (principal > amount) ? amount : principal;\\n        if (repayment > 0) {\\n            uint256 returnedReserve = deuro.burnFromWithReserve(payer, repayment, reserveContribution);\\n            _notifyRepaid(repayment);\\n            return amount - (repayment - returnedReserve);\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Repays principal from `payer` using the net repayment amount (excluding reserves).\\n     *\\n     * Repayment occurs in two steps:\\n     * (1) Burn with reserve: Uses `burnFromWithReserveNet` to repay up to `getUsableMint(principal)`,\\n     *     covering both principal and its reserve portion.\\n     * (2) Direct burn: If principal remains, `burnFrom` burns the remaining principal directly from `payer`.\\n     *\\n     * To repay an exact amount including reserves, use `_repayPrincipal(address payer, uint256 amount)`.\\n     *\\n     * @param payer The address of the entity repaying the debt.\\n     * @param amount The repayment amount, excluding the reserve portion, i.e. the net amount.\\n     * @return The remaining `amount` that was not applied to principal repayment.\\n     */\\n    function _repayPrincipalNet(address payer, uint256 amount) internal returns (uint256) {\\n        uint256 repayment = (amount > principal) ? principal : amount;\\n        if (repayment > 0) {\\n            uint256 maxUsableMint = getUsableMint(principal);\\n            uint256 repayWithReserve = maxUsableMint > repayment ? repayment : maxUsableMint;\\n            // REVIEW: Check correctness of DecentralizedEURO.minterReserveE6\\n            uint256 actualRepaid = deuro.burnFromWithReserveNet(payer, repayWithReserve, reserveContribution);\\n            _notifyRepaid(actualRepaid);\\n            amount -= repayWithReserve;\\n            if (principal > 0 && amount > 0) {\\n                uint256 amountToBurn = amount > principal ? principal : amount;\\n                deuro.transferFrom(payer, address(this), amountToBurn);\\n                deuro.burnWithoutReserve(amountToBurn, reserveContribution);\\n                _notifyRepaid(amountToBurn);\\n                amount -= amountToBurn;\\n            }\\n            return amount;\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Returns the liquidation price and the durations for phase1 and phase2 of the challenge.\\n     * Both phases are usually of equal duration, but near expiration, phase one is adjusted such that\\n     * it cannot last beyond the expiration date of the position.\\n     */\\n    function challengeData() external view returns (uint256 liqPrice, uint40 phase) {\\n        return (_virtualPrice(_collateralBalance(), price), challengePeriod);\\n    }\\n\\n    function notifyChallengeStarted(uint256 size, uint256 _price) external onlyHub alive {\\n        // Require minimum size. Collateral balance can be below minimum if it was partially challenged before.\\n        if (size < minimumCollateral && size < _collateralBalance()) revert ChallengeTooSmall();\\n        if (size == 0) revert ChallengeTooSmall();\\n        challengedAmount += size;\\n        // REVIEW: Is this check safe?\\n        if (challengedPrice == 0) { \\n            challengedPrice = _price;\\n        }\\n    }\\n\\n    /**\\n     * @param size   amount of collateral challenged (dec18)\\n     */\\n    function notifyChallengeAverted(uint256 size) external onlyHub {\\n        challengedAmount -= size;\\n        challengedPrice = 0;\\n\\n        // Don't allow minter to close the position immediately so challenge can be repeated before\\n        // the owner has a chance to mint more on an undercollateralized position\\n        _restrictMinting(1 days);\\n    }\\n\\n    /**\\n     * @notice Notifies the position that a challenge was successful.\\n     * Everything else is assumed to be handled by the hub.\\n     *\\n     * @param _size amount of the collateral bid for\\n     * @return (position owner, effective challenge size in deuro, amount of principal to repay, amount of interest to pay, reserve ppm)\\n     */\\n    function notifyChallengeSucceeded(\\n        uint256 _size\\n    ) external onlyHub returns (address, uint256, uint256, uint256, uint32) {\\n        _accrueInterest();\\n\\n        challengedAmount -= _size;\\n        uint256 colBal = _collateralBalance();\\n        if (colBal < _size) {\\n            _size = colBal;\\n        }\\n\\n        // Determine how much of the debt must be repaid based on challenged collateral\\n        uint256 interestToPay = (colBal == 0) ? 0 : (interest * _size) / colBal;\\n        uint256 principalToPay = (colBal == 0) ? 0 : (principal * _size) / colBal;\\n        _notifyInterestPaid(interestToPay);\\n        _notifyRepaid(principalToPay);\\n\\n        // Give time for additional challenges before the owner can mint again.\\n        _restrictMinting(3 days);\\n\\n        return (owner(), _size, principalToPay, interestToPay, reserveContribution);\\n    }\\n}\\n\",\"keccak256\":\"0x63596a6ffcae727516a9ef1a9a8006b8d2907c88d76018728f9ebdafe96d32c3\",\"license\":\"MIT\"},\"contracts/MintingHubV2/PositionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Position} from \\\"./Position.sol\\\";\\nimport {IDecentralizedEURO} from \\\"../interface/IDecentralizedEURO.sol\\\";\\n\\ncontract PositionFactory {\\n    /**\\n     * Create a completely new position in a newly deployed contract.\\n     * Must be called through the minting hub to be recognized as a valid position.\\n     */\\n    function createNewPosition(\\n        address _owner,\\n        address _deuro,\\n        address _collateral,\\n        uint256 _minCollateral,\\n        uint256 _initialLimit,\\n        uint40 _initPeriod,\\n        uint40 _duration,\\n        uint40 _challengePeriod,\\n        uint24 _riskPremiumPPM,\\n        uint256 _liqPrice,\\n        uint24 _reserve\\n    ) external returns (address) {\\n        return\\n            address(\\n                new Position(\\n                    _owner,\\n                    msg.sender,\\n                    _deuro,\\n                    _collateral,\\n                    _minCollateral,\\n                    _initialLimit,\\n                    _initPeriod,\\n                    _duration,\\n                    _challengePeriod,\\n                    _riskPremiumPPM,\\n                    _liqPrice,\\n                    _reserve\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Clone an existing position. This can be a clone of another clone,\\n     * or an original position.\\n     * @param _parent address of the position we want to clone\\n     * @return address of the newly created clone position\\n     */\\n    function clonePosition(address _parent) external returns (address) {\\n        Position parent = Position(_parent);\\n        parent.assertCloneable();\\n        Position clone = Position(_createClone(parent.original()));\\n        return address(clone);\\n    }\\n\\n    // github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n    function _createClone(address target) internal returns (address result) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            result := create(0, clone, 0x37)\\n        }\\n        require(result != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n}\",\"keccak256\":\"0xfc509b0e392c82b8eda4715cc1628531a13aea0d48c14788acf98c9292871234\",\"license\":\"MIT\"},\"contracts/MintingHubV2/PositionRoller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IDecentralizedEURO} from \\\"../interface/IDecentralizedEURO.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IMintingHubGateway} from \\\"../gateway/interface/IMintingHubGateway.sol\\\";\\nimport {IMintingHub} from \\\"./interface/IMintingHub.sol\\\";\\nimport {IPosition} from \\\"./interface/IPosition.sol\\\";\\nimport {IReserve} from \\\"../interface/IReserve.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title PositionRoller\\n *\\n * Helper to roll over a debt from an old position to a new one.\\n * Both positions should have the same collateral. Otherwise, it does not make much sense.\\n */\\ncontract PositionRoller {\\n    IDecentralizedEURO private deuro;\\n\\n    error NotOwner(address pos);\\n    error NotPosition(address pos);\\n    error Log(uint256, uint256, uint256);\\n\\n    event Roll(address source, uint256 collWithdraw, uint256 repay, uint256 interest, address target, uint256 collDeposit, uint256 mint);\\n\\n    constructor(address deuro_) {\\n        deuro = IDecentralizedEURO(deuro_);\\n    }\\n\\n    /**\\n     * Convenience method to roll an old position into a new one.\\n     *\\n     * Pre-condition: an allowance for the roller to spend the collateral asset on behalf of the caller,\\n     * i.e., one should set collateral.approve(roller, collateral.balanceOf(sourcePosition)).\\n     *\\n     * The following is assumed:\\n     * - If the limit of the target position permits, the user wants to roll everything.\\n     * - The user does not want to add additional collateral, but excess collateral is returned.\\n     * - If not enough can be minted in the new position, it is acceptable for the roller to use dEURO from the msg.sender.\\n     */\\n    function rollFully(IPosition source, IPosition target) external {\\n        rollFullyWithExpiration(source, target, target.expiration());\\n    }\\n\\n    /**\\n     * Like rollFully, but with a custom expiration date for the new position.\\n     */\\n    function rollFullyWithExpiration(IPosition source, IPosition target, uint40 expiration) public {\\n        require(source.collateral() == target.collateral());\\n        uint256 repay = source.principal();\\n        uint256 usableMint = source.getUsableMint(repay);\\n        uint256 mintAmount = target.getMintAmount(usableMint);\\n        uint256 collateralToWithdraw = IERC20(source.collateral()).balanceOf(address(source));\\n        uint256 targetPrice = target.price();\\n        uint256 depositAmount = (mintAmount * 10 ** 18 + targetPrice - 1) / targetPrice; // round up\\n        if (depositAmount > collateralToWithdraw) {\\n            // If we need more collateral than available from the old position, we opt for taking\\n            // the missing funds from the caller instead of requiring additional collateral.\\n            depositAmount = collateralToWithdraw;\\n            mintAmount = (depositAmount * target.price()) / 10 ** 18; // round down, rest will be taken from caller\\n        }\\n\\n        roll(source, repay, collateralToWithdraw, target, mintAmount, depositAmount, expiration);\\n    }\\n\\n    /**\\n     * Rolls the source position into the target position using a flash loan.\\n     * Both the source and the target position must recognize this roller.\\n     * It is the responsibility of the caller to ensure that both positions are valid contracts.\\n     *\\n     * @param source The source position, must be owned by the msg.sender.\\n     * @param repay The amount of principal to repay from the source position using a flash loan, freeing up some or all collateral .\\n     * @param collWithdraw Collateral to move from the source position to the msg.sender.\\n     * @param target The target position. If not owned by msg.sender or if it does not have the desired expiration,\\n     *               it is cloned to create a position owned by the msg.sender.\\n     * @param mint The amount to be minted from the target position using collateral from msg.sender.\\n     * @param collDeposit The amount of collateral to be sent from msg.sender to the target position.\\n     * @param expiration The desired expiration date for the target position.\\n     */\\n    function roll(\\n        IPosition source,\\n        uint256 repay,\\n        uint256 collWithdraw,\\n        IPosition target,\\n        uint256 mint,\\n        uint256 collDeposit,\\n        uint40 expiration\\n    ) public valid(source) valid(target) own(source) {\\n        uint256 interest = source.getInterest();\\n        uint256 totRepayment = repay + interest; // add interest to repay\\n        deuro.mint(address(this), totRepayment); // take a flash loan\\n        uint256 used = source.repay(totRepayment);\\n        source.withdrawCollateral(msg.sender, collWithdraw);\\n        if (mint > 0) {\\n            IERC20 targetCollateral = IERC20(target.collateral());\\n            if (Ownable(address(target)).owner() != msg.sender || expiration != target.expiration()) {\\n                targetCollateral.transferFrom(msg.sender, address(this), collDeposit); // get the new collateral\\n                targetCollateral.approve(target.hub(), collDeposit); // approve the new collateral and clone:\\n                target = _cloneTargetPosition(target, source, collDeposit, mint, expiration);\\n            } else {\\n                // We can roll into the provided existing position.\\n                // We do not verify whether the target position was created by the known minting hub in order\\n                // to allow positions to be rolled into future versions of the minting hub.\\n                targetCollateral.transferFrom(msg.sender, address(target), collDeposit);\\n                target.mint(msg.sender, mint);\\n            }\\n        }\\n\\n        // Transfer remaining flash loan to caller for repayment\\n        if (totRepayment > used) {\\n            deuro.transfer(msg.sender, totRepayment - used);\\n        }\\n\\n        deuro.burnFrom(msg.sender, totRepayment); // repay the flash loan\\n        emit Roll(address(source), collWithdraw, repay, interest, address(target), collDeposit, mint);\\n    }\\n\\n    /**\\n     * Clones the target position and mints the specified amount using the given collateral.\\n     */\\n    function _cloneTargetPosition (\\n        IPosition target,\\n        IPosition source,\\n        uint256 collDeposit,\\n        uint256 mint,\\n        uint40 expiration\\n    ) internal returns (IPosition) {\\n        if (IERC165(target.hub()).supportsInterface(type(IMintingHubGateway).interfaceId)) {\\n            bytes32 frontendCode = IMintingHubGateway(target.hub()).GATEWAY().getPositionFrontendCode(\\n                address(source)\\n            );\\n            return IPosition(\\n                IMintingHubGateway(target.hub()).clone(\\n                    msg.sender,\\n                    address(target),\\n                    collDeposit,\\n                    mint,\\n                    expiration,\\n                    frontendCode // use the same frontend code\\n                )\\n            );\\n        } else {\\n            return IPosition(\\n                IMintingHub(target.hub()).clone(msg.sender, address(target), collDeposit, mint, expiration)\\n            );\\n        }\\n    }\\n\\n    modifier own(IPosition pos) {\\n        if (Ownable(address(pos)).owner() != msg.sender) revert NotOwner(address(pos));\\n        _;\\n    }\\n\\n    modifier valid(IPosition pos) {\\n        if (deuro.getPositionParent(address(pos)) == address(0x0)) revert NotPosition(address(pos));\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe5baa048abfbe871d95f2f16c9db2f6bbc046a8282166aa5fb266e9124d26081\",\"license\":\"MIT\"},\"contracts/MintingHubV2/interface/IMintingHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {ILeadrate} from \\\"../../interface/ILeadrate.sol\\\";\\nimport {IPosition} from \\\"./IPosition.sol\\\";\\nimport {PositionRoller} from \\\"../PositionRoller.sol\\\";\\n\\ninterface IMintingHub {\\n    function RATE() external view returns (ILeadrate);\\n\\n    function ROLLER() external view returns (PositionRoller);\\n\\n    function challenge(\\n        address _positionAddr,\\n        uint256 _collateralAmount,\\n        uint256 minimumPrice\\n    ) external returns (uint256);\\n\\n    function bid(uint32 _challengeNumber, uint256 size, bool postponeCollateralReturn) external;\\n\\n    function returnPostponedCollateral(address collateral, address target) external;\\n\\n    function buyExpiredCollateral(IPosition pos, uint256 upToAmount) external returns (uint256);\\n\\n    function clone(address owner, address parent, uint256 _initialCollateral, uint256 _initialMint, uint40 expiration) external returns (address);\\n}\\n\",\"keccak256\":\"0xe355227e76883e6e1642dda9d93ce06b33d95623e26cc696c2ad1b390d71883d\",\"license\":\"MIT\"},\"contracts/MintingHubV2/interface/IPosition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPosition {\\n    function hub() external view returns (address);\\n\\n    function collateral() external view returns (IERC20);\\n\\n    function minimumCollateral() external view returns (uint256);\\n\\n    function price() external view returns (uint256);\\n\\n    function virtualPrice() external view returns (uint256);\\n\\n    function challengedAmount() external view returns (uint256);\\n\\n    function original() external view returns (address);\\n\\n    function expiration() external view returns (uint40);\\n\\n    function cooldown() external view returns (uint40);\\n\\n    function limit() external view returns (uint256);\\n\\n    function challengePeriod() external view returns (uint40);\\n\\n    function start() external view returns (uint40);\\n\\n    function riskPremiumPPM() external view returns (uint24);\\n\\n    function reserveContribution() external view returns (uint24);\\n\\n    function principal() external view returns (uint256);\\n\\n    function interest() external view returns (uint256);\\n\\n    function lastAccrual() external view returns (uint40);\\n\\n    function initialize(address parent, uint40 _expiration) external;\\n\\n    function assertCloneable() external;\\n\\n    function notifyMint(uint256 mint_) external;\\n\\n    function notifyRepaid(uint256 repaid_) external;\\n\\n    function availableForClones() external view returns (uint256);\\n\\n    function availableForMinting() external view returns (uint256);\\n\\n    function deny(address[] calldata helpers, string calldata message) external;\\n\\n    function getUsableMint(uint256 totalMint) external view returns (uint256);\\n\\n    function getMintAmount(uint256 usableMint) external view returns (uint256);\\n\\n    function adjust(uint256 newMinted, uint256 newCollateral, uint256 newPrice) external;\\n\\n    function adjustPrice(uint256 newPrice) external;\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function getDebt() external view returns (uint256);\\n\\n    function getInterest() external view returns (uint256);\\n\\n    function repay(uint256 amount) external returns (uint256);\\n\\n    function repayFull() external returns (uint256);\\n\\n    function forceSale(address buyer, uint256 colAmount, uint256 proceeds) external;\\n\\n    function withdraw(address token, address target, uint256 amount) external;\\n\\n    function withdrawCollateral(address target, uint256 amount) external;\\n\\n    function transferChallengedCollateral(address target, uint256 amount) external;\\n\\n    function challengeData() external view returns (uint256 liqPrice, uint40 phase);\\n\\n    function notifyChallengeStarted(uint256 size, uint256 _price) external;\\n\\n    function notifyChallengeAverted(uint256 size) external;\\n\\n    function notifyChallengeSucceeded(\\n        uint256 _size\\n    ) external returns (address, uint256, uint256, uint256, uint32);\\n}\\n\",\"keccak256\":\"0x478f21aa7b3b2d918aa8b7182107eb884d27d6c9fd16d225cd0b0229a08de76e\",\"license\":\"MIT\"},\"contracts/gateway/interface/IFrontendGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFrontendGateway {\\n    struct FrontendCode {\\n        uint256 balance;\\n        address owner;\\n    }\\n\\n    event FrontendCodeRegistered(address owner, bytes32 frontendCode);\\n    event FrontendCodeTransferred(address from, address to, bytes32 frontendCode);\\n    event FrontendCodeRewardsWithdrawn(address to, uint256 amount, bytes32 frontendCode);\\n    event NewPositionRegistered(address position, bytes32 frontendCode);\\n    event RateChangesProposed(address who, uint24 nextFeeRate, uint24 nextSavingsFeeRate, uint24 nextMintingFeeRate, uint256 nextChange);\\n    event RateChangesExecuted(address who, uint24 nextFeeRate, uint24 nextSavingsFeeRate, uint24 nextMintingFeeRate);\\n\\n    error FrontendCodeAlreadyExists();\\n    error NotFrontendCodeOwner();\\n    error NotGatewayService();\\n    error ProposedChangesToHigh();\\n    error NoOpenChanges();\\n    error NotDoneWaiting(uint256 minmumExecutionTime);\\n    error EquityTooLow();\\n\\n    function invest(uint256 amount, uint256 expectedShares, bytes32 frontendCode) external returns (uint256);\\n    function redeem(address target, uint256 shares, uint256 expectedProceeds, bytes32 frontendCode) external returns (uint256);\\n    function unwrapAndSell(uint256 amount, bytes32 frontendCode) external returns (uint256);\\n\\n    function updateSavingCode(address savingsOwner, bytes32 frontendCode) external;\\n    function updateSavingRewards(address saver, uint256 interest) external;\\n\\n    function registerPosition(address position, bytes32 frontendCode) external;\\n    function updatePositionRewards(address position, uint256 amount) external;\\n    function getPositionFrontendCode(address position)view external  returns(bytes32);\\n\\n    // Frontend Code Logic\\n    function registerFrontendCode(bytes32 frontendCode) external returns (bool);\\n    function transferFrontendCode(bytes32 frontendCode, address to) external returns (bool);\\n    function withdrawRewards(bytes32 frontendCode) external returns (uint256);\\n    function withdrawRewardsTo(bytes32 frontendCode, address to) external returns (uint256);\\n\\n    // Governance\\n    function proposeChanges(uint24 newFeeRatePPM_, uint24 newSavingsFeeRatePPM_, uint24 newMintingFeeRatePPM_, address[] calldata helpers) external;\\n    function executeChanges() external;\\n}\\n\",\"keccak256\":\"0x90fdb56685f8be8e1b6a5a9a67e33f2286043a5b6dc49511718547ca8afca5d5\",\"license\":\"MIT\"},\"contracts/gateway/interface/IMintingHubGateway.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport {IMintingHub} from \\\"../../MintingHubV2/interface/IMintingHub.sol\\\";\\nimport {IFrontendGateway} from \\\"./IFrontendGateway.sol\\\";\\n\\ninterface IMintingHubGateway {\\n    function GATEWAY() external view returns (IFrontendGateway);\\n    function notifyInterestPaid(uint256 amount) external;\\n    function openPosition(address _collateralAddress, uint256 _minCollateral, uint256 _initialCollateral, uint256 _mintingMaximum, uint40 _initPeriodSeconds, uint40 _expirationSeconds, uint40 _challengeSeconds, uint24 _riskPremium, uint256 _liqPrice, uint24 _reservePPM, bytes32 _frontendCode) external returns (address);\\n    function clone(address owner, address parent, uint256 _initialCollateral, uint256 _initialMint, uint40 expiration, bytes32 frontendCode) external returns (address);\\n}\\n\",\"keccak256\":\"0xb9f99341aeba9d07885fd6af50dfa2f4a0404c75136c6cc798adc14db920c618\",\"license\":\"UNLICENSED\"},\"contracts/interface/IDecentralizedEURO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IReserve} from \\\"./IReserve.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDecentralizedEURO is IERC20 {\\n    function suggestMinter(\\n        address _minter,\\n        uint256 _applicationPeriod,\\n        uint256 _applicationFee,\\n        string calldata _message\\n    ) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function minterReserve() external view returns (uint256);\\n\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\n\\n    function equity() external view returns (uint256);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function getPositionParent(address position) external view returns (address);\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address target, uint256 amount) external;\\n\\n    function burnWithoutReserve(uint256 amount, uint32 reservePPM) external;\\n\\n    function burnFromWithReserveNet(\\n        address payer,\\n        uint256 amountExcludingReserve,\\n        uint32 reservePPM\\n    ) external returns (uint256);\\n\\n    function burnFromWithReserve(\\n        address payer,\\n        uint256 targetTotalBurnAmount,\\n        uint32 reservePPM\\n    ) external returns (uint256);\\n\\n    function coverLoss(address source, uint256 amount) external;\\n\\n    function distributeProfits(address recipient, uint256 amount) external;\\n\\n    function collectProfits(address source, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xffc6e41c105bbfb5542052c278b3985e49651decbcb98540b6ee9f2fafc258f5\",\"license\":\"MIT\"},\"contracts/interface/ILeadrate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILeadrate {\\n   function currentRatePPM() external view returns (uint24);\\n   function currentTicks() external view returns (uint64);\\n}\",\"keccak256\":\"0x881b944dbc6c7d79ad5e8de37e31e1c11ff9b75eed314b62b1071f2e5b96dfc4\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IReserve is IERC20 {\\n    function invest(uint256 amount, uint256 expected) external returns (uint256);\\n    function checkQualified(address sender, address[] calldata helpers) external view;\\n}\\n\",\"keccak256\":\"0x8d413b94c7860d6f8a9ba0168642db626830209824e4ad2d879d5f252490d2b9\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Functions for share valuation\\n */\\ncontract MathUtil {\\n    uint256 internal constant ONE_DEC18 = 10 ** 18;\\n\\n    // Let's go for 12 digits of precision (18-6)\\n    uint256 internal constant THRESH_DEC18 = 10 ** 6;\\n\\n    /**\\n     * @notice Fifth root with Halley approximation\\n     *         Number 1e18 decimal\\n     * @param _v     number for which we calculate x**(1/5)\\n     * @return returns _v**(1/5)\\n     */\\n    function _fifthRoot(uint256 _v) internal pure returns (uint256) {\\n        // Good first guess for _v slightly above 1.0, which is often the case in the dEURO system\\n        uint256 x = _v > ONE_DEC18 && _v < 10 ** 19 ? (_v - ONE_DEC18) / 5 + ONE_DEC18 : ONE_DEC18;\\n        uint256 diff;\\n        do {\\n            uint256 powX5 = _power5(x);\\n            uint256 xnew = (x * (2 * powX5 + 3 * _v)) / (3 * powX5 + 2 * _v);\\n            diff = xnew > x ? xnew - x : x - xnew;\\n            x = xnew;\\n        } while (diff > THRESH_DEC18);\\n        return x;\\n    }\\n\\n    function _mulD18(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a * _b) / ONE_DEC18;\\n    }\\n\\n    function _divD18(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a * ONE_DEC18) / _b;\\n    }\\n\\n    function _power5(uint256 _x) internal pure returns (uint256) {\\n        return _mulD18(_mulD18(_mulD18(_mulD18(_x, _x), _x), _x), _x);\\n    }\\n\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x05890b75cecebc9ed779dee07d9163d5f62718255002bb77361b871071a0eef1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50613d348061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635d824f761461003b578063b3e891801461006a575b600080fd5b61004e61004936600461029e565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e61007836600461035b565b6100d9565b60008b338c8c8c8c8c8c8c8c8c8c6040516100979061024c565b6100ac9c9b9a9998979695949392919061037f565b604051809103906000f0801580156100c8573d6000803e3d6000fd5b509c9b505050505050505050505050565b600080829050806001600160a01b0316630e49d77e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561011a57600080fd5b505af115801561012e573d6000803e3d6000fd5b50505050600061019e826001600160a01b03166346c715fa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610175573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610199919061040f565b6101a6565b949350505050565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09250506001600160a01b0382166102465760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b50919050565b6138d28061042d83390190565b6001600160a01b038116811461026e57600080fd5b50565b803564ffffffffff8116811461028657600080fd5b919050565b803562ffffff8116811461028657600080fd5b60008060008060008060008060008060006101608c8e0312156102c057600080fd5b8b356102cb81610259565b9a5060208c01356102db81610259565b995060408c01356102eb81610259565b985060608c0135975060808c0135965061030760a08d01610271565b955061031560c08d01610271565b945061032360e08d01610271565b93506103326101008d0161028b565b92506101208c013591506103496101408d0161028b565b90509295989b509295989b9093969950565b60006020828403121561036d57600080fd5b813561037881610259565b9392505050565b6001600160a01b038d811682528c811660208301528b811660408301528a1660608201526080810189905260a0810188905264ffffffffff87811660c0830152861660e0820152610180810164ffffffffff861661010083015262ffffff8516610120830152836101408301526103fe61016083018462ffffff169052565b9d9c50505050505050505050505050565b60006020828403121561042157600080fd5b81516103788161025956fe6101c060405234801561001157600080fd5b506040516138d23803806138d2833981016040819052610030916103b5565b8b6001600160a01b03811661006057604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61006981610146565b506203f4808664ffffffffff16101561008157600080fd5b3060e0526001600160a01b038b8116610100528a81166101205289166101405262ffffff8084166101805281166101a05261016088905264ffffffffff841660a0526100cd864261049f565b64ffffffffff1660c08190526005805464ffffffffff1916821790556100f490869061049f565b6005805464ffffffffff92909216650100000000000264ffffffffff60281b19909216919091179055608087905261012c8288610196565b6101358361020b565b50505050505050505050505061056e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006101a06102fd565b90506101b4670de0b6b3a7640000836104c2565b6101be82856104c2565b11156102045782816101d8670de0b6b3a7640000856104c2565b6101e291906104d9565b6040516387ebe85d60e01b815260048101929092526024820152604401610057565b5050600155565b80610100516001600160a01b031663664e97046040518163ffffffff1660e01b8152600401602060405180830381865afa15801561024d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027191906104fb565b6001600160a01b03166306a7b3766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d2919061051f565b6102dc919061053a565b6005600b6101000a81548162ffffff021916908362ffffff16021790555050565b610140516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036b9190610555565b905090565b6001600160a01b038116811461038557600080fd5b50565b805164ffffffffff8116811461039d57600080fd5b919050565b805162ffffff8116811461039d57600080fd5b6000806000806000806000806000806000806101808d8f0312156103d857600080fd5b8c516103e381610370565b60208e0151909c506103f481610370565b60408e0151909b5061040581610370565b60608e0151909a5061041681610370565b60808e015160a08f0151919a509850965061043360c08e01610388565b955061044160e08e01610388565b94506104506101008e01610388565b935061045f6101208e016103a2565b6101408e015190935091506104776101608e016103a2565b90509295989b509295989b509295989b565b634e487b7160e01b600052601160045260246000fd5b64ffffffffff81811683821601908111156104bc576104bc610489565b92915050565b80820281158282048414176104bc576104bc610489565b6000826104f657634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561050d57600080fd5b815161051881610370565b9392505050565b60006020828403121561053157600080fd5b610518826103a2565b62ffffff81811683821601908111156104bc576104bc610489565b60006020828403121561056757600080fd5b5051919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a05161317661075c600039600081816103a901528181610d25015281816117c30152818161180901528181611a7a01528181611fa601528181612122015281816126e40152612b7a0152600081816104bc01526125fe0152600081816105f7015281816119d601528181611d8c0152612a75015260008181610691015281816114e801528181611ba901528181611d0f0152611e1f0152600081816105500152818161083f01528181610ae201528181610c2801528181610cc601528181610da2015281816111bb01528181611af901528181611eb201528181611f750152818161209801528181612149015281816126b10152612b490152600081816103570152818161098a01528181610a1b01528181610f220152818161101f0152818161111101528181611197015281816112740152818161149a015281816116c30152818161194901528181611ad5015281816122c20152818161235001526127a701526000818161042e01528181610e0d01528181610e62015281816112f201528181612219015261263801526000818161061e01526107f80152600081816106fc0152610efb0152600081816105ac01528181610e3c015281816118c3015261190401526131766000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c8063787a08a611610167578063babe7c74116100ce578063d8dfeb4511610087578063d8dfeb451461068c578063d9caed12146106b3578063e5a4bed3146106c6578063f2fde38b146106ce578063f37c2ecf146106e1578063f3f480d9146106f757600080fd5b8063babe7c74146105f2578063be9a655514610619578063c2b6b58c14610640578063c392f7661461065d578063c54a89ca14610666578063cfb636f01461067957600080fd5b80639de2f796116101205780639de2f7961461058b578063a035b1fe1461059e578063a4d66daf146105a7578063a8a3e31d146105ce578063b8e2426c146105d6578063ba5d3078146105e957600080fd5b8063787a08a6146104de5780637b3baab4146104ef5780637ccd4f711461050057806382b8eaf51461054b5780638da5cb5b146105725780638ea875f31461058357600080fd5b80633a7c29fb1161020b5780635be980f5116101c45780635be980f5146104635780636d4749fa146104765780636f871cec14610489578063715018a61461049c57806372bf079e146104a4578063730d48b7146104b757600080fd5b80633a7c29fb146103a45780633df01eb2146103df57806340c10f19146103e85780634665096d146103fb57806346c715fa1461042957806349746f101461045057600080fd5b806329d93d671161025d57806329d93d671461030c5780632a37eeae14610314578063329864aa1461031c578063350c35e91461033f578063365a86fc14610352578063371fd8e61461039157600080fd5b80630e49d77e146102a557806314a6bf0f146102af5780631bbea34c146102ca5780631dbcff26146102dd578063211d7983146102f057806324e657fe14610303575b600080fd5b6102ad61071e565b005b6102b76107e7565b6040519081526020015b60405180910390f35b6102ad6102d8366004612ccb565b6107f6565b6102ad6102eb366004612d83565b61097f565b6102ad6102fe366004612daf565b610a10565b6102b760035481565b6102b7610de7565b6102b7610e01565b610324610ee2565b6040805192835264ffffffffff9091166020830152016102c1565b6102ad61034d366004612d83565b610f20565b6103797f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102c1565b6102b761039f366004612de4565b610fce565b6103cb7f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff90911681526020016102c1565b6102b760045481565b6102ad6103f6366004612d83565b61101d565b60055461041390600160281b900464ffffffffff1681565b60405164ffffffffff90911681526020016102c1565b6103797f000000000000000000000000000000000000000000000000000000000000000081565b6102ad61045e366004612de4565b611106565b6102ad610471366004612de4565b61117a565b6102ad610484366004612e10565b611269565b6102ad610497366004612e49565b6114c2565b6102ad611651565b6102ad6104b2366004612de4565b611663565b6103cb7f000000000000000000000000000000000000000000000000000000000000000081565b6005546104139064ffffffffff1681565b6008546104139064ffffffffff1681565b61051361050e366004612de4565b6116b2565b604080516001600160a01b039096168652602086019490945292840191909152606083015263ffffffff16608082015260a0016102c1565b6103797f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316610379565b6102b76117ef565b6102b7610599366004612de4565b6117fc565b6102b760015481565b6102b77f000000000000000000000000000000000000000000000000000000000000000081565b6102b7611872565b6102ad6105e4366004612e75565b61193e565b6102b760065481565b6102b77f000000000000000000000000000000000000000000000000000000000000000081565b6104137f000000000000000000000000000000000000000000000000000000000000000081565b600554600160501b900460ff1660405190151581526020016102c1565b6102b760075481565b6102b7610674366004612de4565b611a6f565b6102ad610687366004612de4565b611ab8565b6103797f000000000000000000000000000000000000000000000000000000000000000081565b6102ad6106c1366004612e97565b611b9f565b6102b7611c85565b6102ad6106dc366004612ed8565b611c8f565b6005546103cb90600160581b900462ffffff1681565b6104137f000000000000000000000000000000000000000000000000000000000000000081565b6003541561073f5760405163d26e2de960e01b815260040160405180910390fd5b60055464ffffffffff16421161076857604051631c02820f60e21b815260040160405180910390fd5b600554600160281b900464ffffffffff1642106107ba576005546040516238ddd760e41b815264ffffffffff4281166004830152600160281b9092049190911660248201526044015b60405180910390fd5b600554600160501b900460ff16156107e557604051631cdde67b60e01b815260040160405180910390fd5b565b60006107f1611cca565b905090565b7f000000000000000000000000000000000000000000000000000000000000000064ffffffffff16421061083d5760405163ecdd1c2960e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf9190612ef5565b6001600160a01b031663352e3a833386866040518463ffffffff1660e01b81526004016108ee93929190612f12565b60006040518083038186803b15801561090657600080fd5b505afa15801561091a573d6000803e3d6000fd5b505050506109366005805460ff60501b1916600160501b179055565b336001600160a01b03167faca80c800ec0d2aa9d9d31b7f886a1dd3067d4676abc637626a18ffb9381653d8383604051610971929190612f70565b60405180910390a250505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109c8576040516313bd2e8360e31b815260040160405180910390fd5b60006109d48383611ce1565b600154600654604080518481526020810193909352820152909150600080516020613121833981519152906060015b60405180910390a1505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a59576040516313bd2e8360e31b815260040160405180910390fd5b600554600160281b900464ffffffffff16421015610a8a576040516302de694d60e41b815260040160405180910390fd5b60035415610aab5760405163d26e2de960e01b815260040160405180910390fd5b6000610ab5611dd1565b600654610ac29190612fb5565b90506000610ad08585611ce1565b905081600003610bde578215610b9c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd86610b226000546001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018690526064016020604051808303816000875af1158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a9190612fc8565b505b600080516020613121833981519152610bb3611e07565b6001546006546040805193845260208401929092529082015260600160405180910390a15050505050565b610be88584611e6e565b9250610bf48584611f31565b925080158015610c1357506000600754600654610c119190612fb5565b115b15610d9a578215610c2657610c26612fea565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d1fa5e9830600754600654610c669190612fb5565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610cac57600080fd5b505af1158015610cc0573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c7641866600754600654610d039190612fb5565b6040516001600160e01b031960e084901b168152600481019190915262ffffff7f0000000000000000000000000000000000000000000000000000000000000000166024820152604401600060405180830381600087803b158015610d6757600080fd5b505af1158015610d7b573d6000803e3d6000fd5b50505050610d8a6006546121d0565b610d9560075461228f565b610b9c565b8215610b9c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd86610b226000546001600160a01b031690565b505050565b60006107f1610df4611dd1565b60065461039f9190612fb5565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610e60576002546107f1907f0000000000000000000000000000000000000000000000000000000000000000613000565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a8a3e31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ebe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190613013565b600080610ef8610ef0611e07565b6001546123c7565b927f000000000000000000000000000000000000000000000000000000000000000092509050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f09e9e3a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa29190612ef5565b6001600160a01b0316336001600160a01b031614610fc257610fc2612422565b60006109d4838361244f565b600080610fda836124b6565b9050600080516020613121833981519152610ff3611e07565b6001546006546040805193845260208401929092529082015260600160405180910390a192915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f09e9e3a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561107b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109f9190612ef5565b6001600160a01b0316336001600160a01b0316146110bf576110bf612422565b60006110c9611e07565b90506110d68383836124f4565b60015460065460408051848152602081019390935282015260008051602061312183398151915290606001610a03565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461114f576040516313bd2e8360e31b815260040160405180910390fd5b80600360008282546111619190613000565b9091555050600060045561117762015180612763565b50565b60405163aa5dd7f160e01b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa158015611204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112289190612ef5565b6001600160a01b03161461124f576040516313bd2e8360e31b815260040160405180910390fd5b80600260008282546112619190613000565b909155505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112b2576040516313bd2e8360e31b815260040160405180910390fd5b600554600160281b900464ffffffffff16156112e05760405162dc149f60e41b815260040160405180910390fd5b428164ffffffffff16108061138357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611372919061302c565b64ffffffffff168164ffffffffff16115b156113a157604051637d9533a960e11b815260040160405180910390fd5b806005806101000a81548164ffffffffff021916908364ffffffffff160217905550816001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114259190613013565b600181905550611495826001600160a01b031663730d48b76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561146c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114909190613049565b6127a4565b6114be7f00000000000000000000000000000000000000000000000000000000000000006128b3565b5050565b6114ca612422565b60006114d4611e07565b905080831115611593576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd33306115198588613000565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561156d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115919190612fc8565b505b6006548410156115cb5760006115a7611dd1565b6006546115b49190612fb5565b90506115c86115c38683613000565b6124b6565b50505b808310156115e8576115e6336115e18584613000565b61244f565b505b60065484111561160a5761160a33600654866116049190613000565b856124f4565b600154821461161c5761161c82612903565b60408051848152602081018490529081018590526000805160206131218339815191529060600160405180910390a150505050565b611659612422565b6107e560006128b3565b61166b612422565b61167481612903565b60008051602061312183398151915261168b611e07565b6001546006546040805193845260208401929092529082015260600160405180910390a150565b600080808080336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611701576040516313bd2e8360e31b815260040160405180910390fd5b611709611dd1565b50856003600082825461171c9190613000565b909155506000905061172c611e07565b90508681101561173a578096505b60008115611760578188600754611751919061306e565b61175b9190613085565b611763565b60005b90506000821561178b57828960065461177c919061306e565b6117869190613085565b61178e565b60005b90506117998261228f565b6117a2816121d0565b6117ae6203f480612763565b6000546001600160a01b0316999097509095507f000000000000000000000000000000000000000000000000000000000000000062ffffff16945092505050565b60006107f1610ef0611e07565b60008115611869576118317f0000000000000000000000000000000000000000000000000000000000000000620f42406130a7565b62ffffff16600161184584620f424061306e565b61184f9190613000565b6118599190613085565b611864906001612fb5565b61186c565b60005b92915050565b600080670de0b6b3a7640000600154611889611e07565b611893919061306e565b61189d9190613085565b9050600081600654116118bc576006546118b79083613000565b6118bf565b60005b90507f0000000000000000000000000000000000000000000000000000000000000000816002546118f09190612fb5565b106118fe5760009250505090565b806002547f000000000000000000000000000000000000000000000000000000000000000061192d9190613000565b6119379190613000565b9250505090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611987576040516313bd2e8360e31b815260040160405180910390fd5b600554600160281b900464ffffffffff1642106119d4576005546040516238ddd760e41b815264ffffffffff4281166004830152600160281b9092049190911660248201526044016107b1565b7f000000000000000000000000000000000000000000000000000000000000000082108015611a095750611a06611e07565b82105b15611a2757604051633c80636b60e21b815260040160405180910390fd5b81600003611a4857604051633c80636b60e21b815260040160405180910390fd5b8160036000828254611a5a9190612fb5565b90915550506004546000036114be5760045550565b6000620f4240611a9f7f0000000000000000000000000000000000000000000000000000000000000000826130a7565b611aae9062ffffff168461306e565b61186c9190613085565b60405163aa5dd7f160e01b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa158015611b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b669190612ef5565b6001600160a01b031614611b8d576040516313bd2e8360e31b815260040160405180910390fd5b80600260008282546112619190612fb5565b611ba7612422565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031603611bea57610de28282610f20565b6000611bf4611e07565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529192509085169063a9059cbb906044016020604051808303816000875af1158015611c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6b9190612fc8565b50611c74611e07565b8114611c7f57600080fd5b50505050565b60006107f16129e6565b611c97612422565b6001600160a01b038116611cc157604051631e4fbdf760e01b8152600060048201526024016107b1565b611177816128b3565b6000611cd46129e6565b6006546107f19190612fb5565b60008115611d7e5760405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7c9190612fc8565b505b6000611d88611e07565b90507f0000000000000000000000000000000000000000000000000000000000000000811015611dca57611dca6005805460ff60501b1916600160501b179055565b9392505050565b6000611ddb6129e6565b9050600754811115611ded5760078190555b6008805464ffffffffff19164264ffffffffff1617905590565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610ebe573d6000803e3d6000fd5b6000808260075411611e8257600754611e84565b825b90508015611f295760405163375edc7760e11b81526001600160a01b038581166004830152602482018390527f00000000000000000000000000000000000000000000000000000000000000001690636ebdb8ee90604401600060405180830381600087803b158015611ef657600080fd5b505af1158015611f0a573d6000803e3d6000fd5b50505050611f178161228f565b611f218184613000565b91505061186c565b509092915050565b6000806006548311611f435782611f47565b6006545b90508015611f29576000611f5c600654611a6f565b90506000828211611f6d5781611f6f565b825b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631aeea54688847f00000000000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b8152600401611fe3939291906130c2565b6020604051808303816000875af1158015612002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120269190613013565b9050612031816121d0565b61203b8287613000565b9550600060065411801561204f5750600086115b156121c457600060065487116120655786612069565b6006545b6040516323b872dd60e01b81526001600160a01b038a81166004830152306024830152604482018390529192507f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af11580156120e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121079190612fc8565b506040516363b20c3360e11b81526004810182905262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c764186690604401600060405180830381600087803b15801561219557600080fd5b505af11580156121a9573d6000803e3d6000fd5b505050506121b6816121d0565b6121c08188613000565b9650505b8594505050505061186c565b600654811115612203576006546121e79082613000565b604051635795d46960e11b81526004016107b191815260200190565b604051635be980f560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635be980f590602401600060405180830381600087803b15801561226557600080fd5b505af1158015612279573d6000803e3d6000fd5b5050505080600660008282546112619190613000565b6007548111156122a6576007546121e79082613000565b6040516301ffc9a760e01b8152632464e41b60e21b60048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906301ffc9a790602401602060405180830381865afa158015612311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123359190612fc8565b156123b557604051637d0ea02d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637d0ea02d90602401600060405180830381600087803b15801561239c57600080fd5b505af11580156123b0573d6000803e3d6000fd5b505050505b80600760008282546112619190613000565b600454600090156123db575060045461186c565b826000036123ea57508061186c565b600083670de0b6b3a76400006123fe611cca565b612408919061306e565b6124129190613085565b9050828110611f29579392505050565b6000546001600160a01b031633146107e55760405163118cdaa760e01b81523360048201526024016107b1565b600354600090156124735760405163d26e2de960e01b815260040160405180910390fd5b60055464ffffffffff16421161249c57604051631c02820f60e21b815260040160405180910390fd5b60006124a88484611ce1565b9050611dca81600154612a71565b60006124c0611dd1565b50816000036124d157506000919050565b816124dc3382611e6e565b90506124e83382612b11565b9050611dca8184613000565b600354156125155760405163d26e2de960e01b815260040160405180910390fd5b60055464ffffffffff16421161253e57604051631c02820f60e21b815260040160405180910390fd5b600554600160281b900464ffffffffff16421061258b576005546040516238ddd760e41b815264ffffffffff4281166004830152600160281b9092049190911660248201526044016107b1565b600554600160501b900460ff16156125b657604051631cdde67b60e01b815260040160405180910390fd5b6125be610e01565b8211156125f057816125ce610e01565b604051634779077960e11b8152600481019290925260248201526044016107b1565b6125f8611dd1565b506126227f00000000000000000000000000000000000000000000000000000000000000006127a4565b604051630cfb636f60e41b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cfb636f090602401600060405180830381600087803b15801561268457600080fd5b505af1158015612698573d6000803e3d6000fd5b505060405163165203b760e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063b2901db8915061270c90869086907f0000000000000000000000000000000000000000000000000000000000000000906004016130c2565b600060405180830381600087803b15801561272657600080fd5b505af115801561273a573d6000803e3d6000fd5b5050505081600660008282546127509190612fb5565b92505081905550610de281600154612a71565b600061276f82426130e8565b60055490915064ffffffffff90811690821611156114be576005805464ffffffffff831664ffffffffff199091161790555050565b807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663664e97046040518163ffffffff1660e01b8152600401602060405180830381865afa158015612803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128279190612ef5565b6001600160a01b03166306a7b3766040518163ffffffff1660e01b8152600401602060405180830381865afa158015612864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128889190613049565b6128929190613105565b6005600b6101000a81548162ffffff021916908362ffffff16021790555050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600354156129245760405163d26e2de960e01b815260040160405180910390fd5b600554600160281b900464ffffffffff164210612971576005546040516238ddd760e41b815264ffffffffff4281166004830152600160281b9092049190911660248201526044016107b1565b600554600160501b900460ff161561299c57604051631cdde67b60e01b815260040160405180910390fd5b6001548111156129b7576129b26203f480612763565b6129c8565b6129c86129c2611e07565b82612a71565b611177816129d4610e01565b6006546129e19190612fb5565b612c0d565b600754600854429064ffffffffff1681118015612a0557506000600654115b15612a6d57600854600090612a219064ffffffffff1683613000565b9050651cae8c13e000816005600b9054906101000a900462ffffff1662ffffff16600654612a4f919061306e565b612a59919061306e565b612a639190613085565b6119379084612fb5565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000008310612aa05782612aa3565b60005b90506000612aaf611cca565b9050612ac3670de0b6b3a76400008261306e565b612acd848461306e565b1015611c7f57612add838361306e565b612aef670de0b6b3a76400008361306e565b604051632c1f8ef160e21b8152600481019290925260248201526044016107b1565b6000808260065411612b2557600654612b27565b825b90508015611f29576040516318af9f3960e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063315f3e7290612ba290889086907f0000000000000000000000000000000000000000000000000000000000000000906004016130c2565b6020604051808303816000875af1158015612bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be59190613013565b9050612bf0826121d0565b612bfa8183613000565b612c049085613000565b9250505061186c565b6000612c17611e07565b9050612c2b670de0b6b3a76400008361306e565b612c35828561306e565b1115612c7b578281612c4f670de0b6b3a76400008561306e565b612c599190613085565b6040516387ebe85d60e01b8152600481019290925260248201526044016107b1565b5050600155565b60008083601f840112612c9457600080fd5b50813567ffffffffffffffff811115612cac57600080fd5b602083019150836020828501011115612cc457600080fd5b9250929050565b60008060008060408587031215612ce157600080fd5b843567ffffffffffffffff811115612cf857600080fd5b8501601f81018713612d0957600080fd5b803567ffffffffffffffff811115612d2057600080fd5b8760208260051b8401011115612d3557600080fd5b60209182019550935085013567ffffffffffffffff811115612d5657600080fd5b612d6287828801612c82565b95989497509550505050565b6001600160a01b038116811461117757600080fd5b60008060408385031215612d9657600080fd5b8235612da181612d6e565b946020939093013593505050565b600080600060608486031215612dc457600080fd5b8335612dcf81612d6e565b95602085013595506040909401359392505050565b600060208284031215612df657600080fd5b5035919050565b64ffffffffff8116811461117757600080fd5b60008060408385031215612e2357600080fd5b8235612e2e81612d6e565b91506020830135612e3e81612dfd565b809150509250929050565b600080600060608486031215612e5e57600080fd5b505081359360208301359350604090920135919050565b60008060408385031215612e8857600080fd5b50508035926020909101359150565b600080600060608486031215612eac57600080fd5b8335612eb781612d6e565b92506020840135612ec781612d6e565b929592945050506040919091013590565b600060208284031215612eea57600080fd5b8135611dca81612d6e565b600060208284031215612f0757600080fd5b8151611dca81612d6e565b6001600160a01b0384168152604060208201819052810182905260008360608301825b85811015612f65578235612f4881612d6e565b6001600160a01b0316825260209283019290910190600101612f35565b509695505050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561186c5761186c612f9f565b600060208284031215612fda57600080fd5b81518015158114611dca57600080fd5b634e487b7160e01b600052600160045260246000fd5b8181038181111561186c5761186c612f9f565b60006020828403121561302557600080fd5b5051919050565b60006020828403121561303e57600080fd5b8151611dca81612dfd565b60006020828403121561305b57600080fd5b815162ffffff81168114611dca57600080fd5b808202811582820484141761186c5761186c612f9f565b6000826130a257634e487b7160e01b600052601260045260246000fd5b500490565b62ffffff828116828216039081111561186c5761186c612f9f565b6001600160a01b03939093168352602083019190915262ffffff16604082015260600190565b64ffffffffff818116838216019081111561186c5761186c612f9f565b62ffffff818116838216019081111561186c5761186c612f9f56fe9483a26ad376f30b5199a79e75df3bb05158c4ee32a348f53e83245a5e50c86ea2646970667358221220d8888469b90fc84bbdcf217de231f02b83b0abb0eb6a12731fd8ba48dea5638064736f6c634300081a0033a2646970667358221220fa4705e72de8a44d474c27bafd3c16e77f12f277560cac941b8ce6a6549e799a64736f6c634300081a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80635d824f761461003b578063b3e891801461006a575b600080fd5b61004e61004936600461029e565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e61007836600461035b565b6100d9565b60008b338c8c8c8c8c8c8c8c8c8c6040516100979061024c565b6100ac9c9b9a9998979695949392919061037f565b604051809103906000f0801580156100c8573d6000803e3d6000fd5b509c9b505050505050505050505050565b600080829050806001600160a01b0316630e49d77e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561011a57600080fd5b505af115801561012e573d6000803e3d6000fd5b50505050600061019e826001600160a01b03166346c715fa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610175573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610199919061040f565b6101a6565b949350505050565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09250506001600160a01b0382166102465760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b50919050565b6138d28061042d83390190565b6001600160a01b038116811461026e57600080fd5b50565b803564ffffffffff8116811461028657600080fd5b919050565b803562ffffff8116811461028657600080fd5b60008060008060008060008060008060006101608c8e0312156102c057600080fd5b8b356102cb81610259565b9a5060208c01356102db81610259565b995060408c01356102eb81610259565b985060608c0135975060808c0135965061030760a08d01610271565b955061031560c08d01610271565b945061032360e08d01610271565b93506103326101008d0161028b565b92506101208c013591506103496101408d0161028b565b90509295989b509295989b9093969950565b60006020828403121561036d57600080fd5b813561037881610259565b9392505050565b6001600160a01b038d811682528c811660208301528b811660408301528a1660608201526080810189905260a0810188905264ffffffffff87811660c0830152861660e0820152610180810164ffffffffff861661010083015262ffffff8516610120830152836101408301526103fe61016083018462ffffff169052565b9d9c50505050505050505050505050565b60006020828403121561042157600080fd5b81516103788161025956fe6101c060405234801561001157600080fd5b506040516138d23803806138d2833981016040819052610030916103b5565b8b6001600160a01b03811661006057604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61006981610146565b506203f4808664ffffffffff16101561008157600080fd5b3060e0526001600160a01b038b8116610100528a81166101205289166101405262ffffff8084166101805281166101a05261016088905264ffffffffff841660a0526100cd864261049f565b64ffffffffff1660c08190526005805464ffffffffff1916821790556100f490869061049f565b6005805464ffffffffff92909216650100000000000264ffffffffff60281b19909216919091179055608087905261012c8288610196565b6101358361020b565b50505050505050505050505061056e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006101a06102fd565b90506101b4670de0b6b3a7640000836104c2565b6101be82856104c2565b11156102045782816101d8670de0b6b3a7640000856104c2565b6101e291906104d9565b6040516387ebe85d60e01b815260048101929092526024820152604401610057565b5050600155565b80610100516001600160a01b031663664e97046040518163ffffffff1660e01b8152600401602060405180830381865afa15801561024d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027191906104fb565b6001600160a01b03166306a7b3766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d2919061051f565b6102dc919061053a565b6005600b6101000a81548162ffffff021916908362ffffff16021790555050565b610140516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036b9190610555565b905090565b6001600160a01b038116811461038557600080fd5b50565b805164ffffffffff8116811461039d57600080fd5b919050565b805162ffffff8116811461039d57600080fd5b6000806000806000806000806000806000806101808d8f0312156103d857600080fd5b8c516103e381610370565b60208e0151909c506103f481610370565b60408e0151909b5061040581610370565b60608e0151909a5061041681610370565b60808e015160a08f0151919a509850965061043360c08e01610388565b955061044160e08e01610388565b94506104506101008e01610388565b935061045f6101208e016103a2565b6101408e015190935091506104776101608e016103a2565b90509295989b509295989b509295989b565b634e487b7160e01b600052601160045260246000fd5b64ffffffffff81811683821601908111156104bc576104bc610489565b92915050565b80820281158282048414176104bc576104bc610489565b6000826104f657634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561050d57600080fd5b815161051881610370565b9392505050565b60006020828403121561053157600080fd5b610518826103a2565b62ffffff81811683821601908111156104bc576104bc610489565b60006020828403121561056757600080fd5b5051919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a05161317661075c600039600081816103a901528181610d25015281816117c30152818161180901528181611a7a01528181611fa601528181612122015281816126e40152612b7a0152600081816104bc01526125fe0152600081816105f7015281816119d601528181611d8c0152612a75015260008181610691015281816114e801528181611ba901528181611d0f0152611e1f0152600081816105500152818161083f01528181610ae201528181610c2801528181610cc601528181610da2015281816111bb01528181611af901528181611eb201528181611f750152818161209801528181612149015281816126b10152612b490152600081816103570152818161098a01528181610a1b01528181610f220152818161101f0152818161111101528181611197015281816112740152818161149a015281816116c30152818161194901528181611ad5015281816122c20152818161235001526127a701526000818161042e01528181610e0d01528181610e62015281816112f201528181612219015261263801526000818161061e01526107f80152600081816106fc0152610efb0152600081816105ac01528181610e3c015281816118c3015261190401526131766000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c8063787a08a611610167578063babe7c74116100ce578063d8dfeb4511610087578063d8dfeb451461068c578063d9caed12146106b3578063e5a4bed3146106c6578063f2fde38b146106ce578063f37c2ecf146106e1578063f3f480d9146106f757600080fd5b8063babe7c74146105f2578063be9a655514610619578063c2b6b58c14610640578063c392f7661461065d578063c54a89ca14610666578063cfb636f01461067957600080fd5b80639de2f796116101205780639de2f7961461058b578063a035b1fe1461059e578063a4d66daf146105a7578063a8a3e31d146105ce578063b8e2426c146105d6578063ba5d3078146105e957600080fd5b8063787a08a6146104de5780637b3baab4146104ef5780637ccd4f711461050057806382b8eaf51461054b5780638da5cb5b146105725780638ea875f31461058357600080fd5b80633a7c29fb1161020b5780635be980f5116101c45780635be980f5146104635780636d4749fa146104765780636f871cec14610489578063715018a61461049c57806372bf079e146104a4578063730d48b7146104b757600080fd5b80633a7c29fb146103a45780633df01eb2146103df57806340c10f19146103e85780634665096d146103fb57806346c715fa1461042957806349746f101461045057600080fd5b806329d93d671161025d57806329d93d671461030c5780632a37eeae14610314578063329864aa1461031c578063350c35e91461033f578063365a86fc14610352578063371fd8e61461039157600080fd5b80630e49d77e146102a557806314a6bf0f146102af5780631bbea34c146102ca5780631dbcff26146102dd578063211d7983146102f057806324e657fe14610303575b600080fd5b6102ad61071e565b005b6102b76107e7565b6040519081526020015b60405180910390f35b6102ad6102d8366004612ccb565b6107f6565b6102ad6102eb366004612d83565b61097f565b6102ad6102fe366004612daf565b610a10565b6102b760035481565b6102b7610de7565b6102b7610e01565b610324610ee2565b6040805192835264ffffffffff9091166020830152016102c1565b6102ad61034d366004612d83565b610f20565b6103797f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102c1565b6102b761039f366004612de4565b610fce565b6103cb7f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff90911681526020016102c1565b6102b760045481565b6102ad6103f6366004612d83565b61101d565b60055461041390600160281b900464ffffffffff1681565b60405164ffffffffff90911681526020016102c1565b6103797f000000000000000000000000000000000000000000000000000000000000000081565b6102ad61045e366004612de4565b611106565b6102ad610471366004612de4565b61117a565b6102ad610484366004612e10565b611269565b6102ad610497366004612e49565b6114c2565b6102ad611651565b6102ad6104b2366004612de4565b611663565b6103cb7f000000000000000000000000000000000000000000000000000000000000000081565b6005546104139064ffffffffff1681565b6008546104139064ffffffffff1681565b61051361050e366004612de4565b6116b2565b604080516001600160a01b039096168652602086019490945292840191909152606083015263ffffffff16608082015260a0016102c1565b6103797f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316610379565b6102b76117ef565b6102b7610599366004612de4565b6117fc565b6102b760015481565b6102b77f000000000000000000000000000000000000000000000000000000000000000081565b6102b7611872565b6102ad6105e4366004612e75565b61193e565b6102b760065481565b6102b77f000000000000000000000000000000000000000000000000000000000000000081565b6104137f000000000000000000000000000000000000000000000000000000000000000081565b600554600160501b900460ff1660405190151581526020016102c1565b6102b760075481565b6102b7610674366004612de4565b611a6f565b6102ad610687366004612de4565b611ab8565b6103797f000000000000000000000000000000000000000000000000000000000000000081565b6102ad6106c1366004612e97565b611b9f565b6102b7611c85565b6102ad6106dc366004612ed8565b611c8f565b6005546103cb90600160581b900462ffffff1681565b6104137f000000000000000000000000000000000000000000000000000000000000000081565b6003541561073f5760405163d26e2de960e01b815260040160405180910390fd5b60055464ffffffffff16421161076857604051631c02820f60e21b815260040160405180910390fd5b600554600160281b900464ffffffffff1642106107ba576005546040516238ddd760e41b815264ffffffffff4281166004830152600160281b9092049190911660248201526044015b60405180910390fd5b600554600160501b900460ff16156107e557604051631cdde67b60e01b815260040160405180910390fd5b565b60006107f1611cca565b905090565b7f000000000000000000000000000000000000000000000000000000000000000064ffffffffff16421061083d5760405163ecdd1c2960e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf9190612ef5565b6001600160a01b031663352e3a833386866040518463ffffffff1660e01b81526004016108ee93929190612f12565b60006040518083038186803b15801561090657600080fd5b505afa15801561091a573d6000803e3d6000fd5b505050506109366005805460ff60501b1916600160501b179055565b336001600160a01b03167faca80c800ec0d2aa9d9d31b7f886a1dd3067d4676abc637626a18ffb9381653d8383604051610971929190612f70565b60405180910390a250505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109c8576040516313bd2e8360e31b815260040160405180910390fd5b60006109d48383611ce1565b600154600654604080518481526020810193909352820152909150600080516020613121833981519152906060015b60405180910390a1505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a59576040516313bd2e8360e31b815260040160405180910390fd5b600554600160281b900464ffffffffff16421015610a8a576040516302de694d60e41b815260040160405180910390fd5b60035415610aab5760405163d26e2de960e01b815260040160405180910390fd5b6000610ab5611dd1565b600654610ac29190612fb5565b90506000610ad08585611ce1565b905081600003610bde578215610b9c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd86610b226000546001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018690526064016020604051808303816000875af1158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a9190612fc8565b505b600080516020613121833981519152610bb3611e07565b6001546006546040805193845260208401929092529082015260600160405180910390a15050505050565b610be88584611e6e565b9250610bf48584611f31565b925080158015610c1357506000600754600654610c119190612fb5565b115b15610d9a578215610c2657610c26612fea565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d1fa5e9830600754600654610c669190612fb5565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610cac57600080fd5b505af1158015610cc0573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c7641866600754600654610d039190612fb5565b6040516001600160e01b031960e084901b168152600481019190915262ffffff7f0000000000000000000000000000000000000000000000000000000000000000166024820152604401600060405180830381600087803b158015610d6757600080fd5b505af1158015610d7b573d6000803e3d6000fd5b50505050610d8a6006546121d0565b610d9560075461228f565b610b9c565b8215610b9c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd86610b226000546001600160a01b031690565b505050565b60006107f1610df4611dd1565b60065461039f9190612fb5565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610e60576002546107f1907f0000000000000000000000000000000000000000000000000000000000000000613000565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a8a3e31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ebe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190613013565b600080610ef8610ef0611e07565b6001546123c7565b927f000000000000000000000000000000000000000000000000000000000000000092509050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f09e9e3a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa29190612ef5565b6001600160a01b0316336001600160a01b031614610fc257610fc2612422565b60006109d4838361244f565b600080610fda836124b6565b9050600080516020613121833981519152610ff3611e07565b6001546006546040805193845260208401929092529082015260600160405180910390a192915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f09e9e3a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561107b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109f9190612ef5565b6001600160a01b0316336001600160a01b0316146110bf576110bf612422565b60006110c9611e07565b90506110d68383836124f4565b60015460065460408051848152602081019390935282015260008051602061312183398151915290606001610a03565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461114f576040516313bd2e8360e31b815260040160405180910390fd5b80600360008282546111619190613000565b9091555050600060045561117762015180612763565b50565b60405163aa5dd7f160e01b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa158015611204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112289190612ef5565b6001600160a01b03161461124f576040516313bd2e8360e31b815260040160405180910390fd5b80600260008282546112619190613000565b909155505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112b2576040516313bd2e8360e31b815260040160405180910390fd5b600554600160281b900464ffffffffff16156112e05760405162dc149f60e41b815260040160405180910390fd5b428164ffffffffff16108061138357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611372919061302c565b64ffffffffff168164ffffffffff16115b156113a157604051637d9533a960e11b815260040160405180910390fd5b806005806101000a81548164ffffffffff021916908364ffffffffff160217905550816001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114259190613013565b600181905550611495826001600160a01b031663730d48b76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561146c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114909190613049565b6127a4565b6114be7f00000000000000000000000000000000000000000000000000000000000000006128b3565b5050565b6114ca612422565b60006114d4611e07565b905080831115611593576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd33306115198588613000565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561156d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115919190612fc8565b505b6006548410156115cb5760006115a7611dd1565b6006546115b49190612fb5565b90506115c86115c38683613000565b6124b6565b50505b808310156115e8576115e6336115e18584613000565b61244f565b505b60065484111561160a5761160a33600654866116049190613000565b856124f4565b600154821461161c5761161c82612903565b60408051848152602081018490529081018590526000805160206131218339815191529060600160405180910390a150505050565b611659612422565b6107e560006128b3565b61166b612422565b61167481612903565b60008051602061312183398151915261168b611e07565b6001546006546040805193845260208401929092529082015260600160405180910390a150565b600080808080336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611701576040516313bd2e8360e31b815260040160405180910390fd5b611709611dd1565b50856003600082825461171c9190613000565b909155506000905061172c611e07565b90508681101561173a578096505b60008115611760578188600754611751919061306e565b61175b9190613085565b611763565b60005b90506000821561178b57828960065461177c919061306e565b6117869190613085565b61178e565b60005b90506117998261228f565b6117a2816121d0565b6117ae6203f480612763565b6000546001600160a01b0316999097509095507f000000000000000000000000000000000000000000000000000000000000000062ffffff16945092505050565b60006107f1610ef0611e07565b60008115611869576118317f0000000000000000000000000000000000000000000000000000000000000000620f42406130a7565b62ffffff16600161184584620f424061306e565b61184f9190613000565b6118599190613085565b611864906001612fb5565b61186c565b60005b92915050565b600080670de0b6b3a7640000600154611889611e07565b611893919061306e565b61189d9190613085565b9050600081600654116118bc576006546118b79083613000565b6118bf565b60005b90507f0000000000000000000000000000000000000000000000000000000000000000816002546118f09190612fb5565b106118fe5760009250505090565b806002547f000000000000000000000000000000000000000000000000000000000000000061192d9190613000565b6119379190613000565b9250505090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611987576040516313bd2e8360e31b815260040160405180910390fd5b600554600160281b900464ffffffffff1642106119d4576005546040516238ddd760e41b815264ffffffffff4281166004830152600160281b9092049190911660248201526044016107b1565b7f000000000000000000000000000000000000000000000000000000000000000082108015611a095750611a06611e07565b82105b15611a2757604051633c80636b60e21b815260040160405180910390fd5b81600003611a4857604051633c80636b60e21b815260040160405180910390fd5b8160036000828254611a5a9190612fb5565b90915550506004546000036114be5760045550565b6000620f4240611a9f7f0000000000000000000000000000000000000000000000000000000000000000826130a7565b611aae9062ffffff168461306e565b61186c9190613085565b60405163aa5dd7f160e01b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa158015611b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b669190612ef5565b6001600160a01b031614611b8d576040516313bd2e8360e31b815260040160405180910390fd5b80600260008282546112619190612fb5565b611ba7612422565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031603611bea57610de28282610f20565b6000611bf4611e07565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529192509085169063a9059cbb906044016020604051808303816000875af1158015611c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6b9190612fc8565b50611c74611e07565b8114611c7f57600080fd5b50505050565b60006107f16129e6565b611c97612422565b6001600160a01b038116611cc157604051631e4fbdf760e01b8152600060048201526024016107b1565b611177816128b3565b6000611cd46129e6565b6006546107f19190612fb5565b60008115611d7e5760405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7c9190612fc8565b505b6000611d88611e07565b90507f0000000000000000000000000000000000000000000000000000000000000000811015611dca57611dca6005805460ff60501b1916600160501b179055565b9392505050565b6000611ddb6129e6565b9050600754811115611ded5760078190555b6008805464ffffffffff19164264ffffffffff1617905590565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610ebe573d6000803e3d6000fd5b6000808260075411611e8257600754611e84565b825b90508015611f295760405163375edc7760e11b81526001600160a01b038581166004830152602482018390527f00000000000000000000000000000000000000000000000000000000000000001690636ebdb8ee90604401600060405180830381600087803b158015611ef657600080fd5b505af1158015611f0a573d6000803e3d6000fd5b50505050611f178161228f565b611f218184613000565b91505061186c565b509092915050565b6000806006548311611f435782611f47565b6006545b90508015611f29576000611f5c600654611a6f565b90506000828211611f6d5781611f6f565b825b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631aeea54688847f00000000000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b8152600401611fe3939291906130c2565b6020604051808303816000875af1158015612002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120269190613013565b9050612031816121d0565b61203b8287613000565b9550600060065411801561204f5750600086115b156121c457600060065487116120655786612069565b6006545b6040516323b872dd60e01b81526001600160a01b038a81166004830152306024830152604482018390529192507f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af11580156120e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121079190612fc8565b506040516363b20c3360e11b81526004810182905262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c764186690604401600060405180830381600087803b15801561219557600080fd5b505af11580156121a9573d6000803e3d6000fd5b505050506121b6816121d0565b6121c08188613000565b9650505b8594505050505061186c565b600654811115612203576006546121e79082613000565b604051635795d46960e11b81526004016107b191815260200190565b604051635be980f560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635be980f590602401600060405180830381600087803b15801561226557600080fd5b505af1158015612279573d6000803e3d6000fd5b5050505080600660008282546112619190613000565b6007548111156122a6576007546121e79082613000565b6040516301ffc9a760e01b8152632464e41b60e21b60048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906301ffc9a790602401602060405180830381865afa158015612311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123359190612fc8565b156123b557604051637d0ea02d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637d0ea02d90602401600060405180830381600087803b15801561239c57600080fd5b505af11580156123b0573d6000803e3d6000fd5b505050505b80600760008282546112619190613000565b600454600090156123db575060045461186c565b826000036123ea57508061186c565b600083670de0b6b3a76400006123fe611cca565b612408919061306e565b6124129190613085565b9050828110611f29579392505050565b6000546001600160a01b031633146107e55760405163118cdaa760e01b81523360048201526024016107b1565b600354600090156124735760405163d26e2de960e01b815260040160405180910390fd5b60055464ffffffffff16421161249c57604051631c02820f60e21b815260040160405180910390fd5b60006124a88484611ce1565b9050611dca81600154612a71565b60006124c0611dd1565b50816000036124d157506000919050565b816124dc3382611e6e565b90506124e83382612b11565b9050611dca8184613000565b600354156125155760405163d26e2de960e01b815260040160405180910390fd5b60055464ffffffffff16421161253e57604051631c02820f60e21b815260040160405180910390fd5b600554600160281b900464ffffffffff16421061258b576005546040516238ddd760e41b815264ffffffffff4281166004830152600160281b9092049190911660248201526044016107b1565b600554600160501b900460ff16156125b657604051631cdde67b60e01b815260040160405180910390fd5b6125be610e01565b8211156125f057816125ce610e01565b604051634779077960e11b8152600481019290925260248201526044016107b1565b6125f8611dd1565b506126227f00000000000000000000000000000000000000000000000000000000000000006127a4565b604051630cfb636f60e41b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cfb636f090602401600060405180830381600087803b15801561268457600080fd5b505af1158015612698573d6000803e3d6000fd5b505060405163165203b760e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063b2901db8915061270c90869086907f0000000000000000000000000000000000000000000000000000000000000000906004016130c2565b600060405180830381600087803b15801561272657600080fd5b505af115801561273a573d6000803e3d6000fd5b5050505081600660008282546127509190612fb5565b92505081905550610de281600154612a71565b600061276f82426130e8565b60055490915064ffffffffff90811690821611156114be576005805464ffffffffff831664ffffffffff199091161790555050565b807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663664e97046040518163ffffffff1660e01b8152600401602060405180830381865afa158015612803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128279190612ef5565b6001600160a01b03166306a7b3766040518163ffffffff1660e01b8152600401602060405180830381865afa158015612864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128889190613049565b6128929190613105565b6005600b6101000a81548162ffffff021916908362ffffff16021790555050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600354156129245760405163d26e2de960e01b815260040160405180910390fd5b600554600160281b900464ffffffffff164210612971576005546040516238ddd760e41b815264ffffffffff4281166004830152600160281b9092049190911660248201526044016107b1565b600554600160501b900460ff161561299c57604051631cdde67b60e01b815260040160405180910390fd5b6001548111156129b7576129b26203f480612763565b6129c8565b6129c86129c2611e07565b82612a71565b611177816129d4610e01565b6006546129e19190612fb5565b612c0d565b600754600854429064ffffffffff1681118015612a0557506000600654115b15612a6d57600854600090612a219064ffffffffff1683613000565b9050651cae8c13e000816005600b9054906101000a900462ffffff1662ffffff16600654612a4f919061306e565b612a59919061306e565b612a639190613085565b6119379084612fb5565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000008310612aa05782612aa3565b60005b90506000612aaf611cca565b9050612ac3670de0b6b3a76400008261306e565b612acd848461306e565b1015611c7f57612add838361306e565b612aef670de0b6b3a76400008361306e565b604051632c1f8ef160e21b8152600481019290925260248201526044016107b1565b6000808260065411612b2557600654612b27565b825b90508015611f29576040516318af9f3960e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063315f3e7290612ba290889086907f0000000000000000000000000000000000000000000000000000000000000000906004016130c2565b6020604051808303816000875af1158015612bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be59190613013565b9050612bf0826121d0565b612bfa8183613000565b612c049085613000565b9250505061186c565b6000612c17611e07565b9050612c2b670de0b6b3a76400008361306e565b612c35828561306e565b1115612c7b578281612c4f670de0b6b3a76400008561306e565b612c599190613085565b6040516387ebe85d60e01b8152600481019290925260248201526044016107b1565b5050600155565b60008083601f840112612c9457600080fd5b50813567ffffffffffffffff811115612cac57600080fd5b602083019150836020828501011115612cc457600080fd5b9250929050565b60008060008060408587031215612ce157600080fd5b843567ffffffffffffffff811115612cf857600080fd5b8501601f81018713612d0957600080fd5b803567ffffffffffffffff811115612d2057600080fd5b8760208260051b8401011115612d3557600080fd5b60209182019550935085013567ffffffffffffffff811115612d5657600080fd5b612d6287828801612c82565b95989497509550505050565b6001600160a01b038116811461117757600080fd5b60008060408385031215612d9657600080fd5b8235612da181612d6e565b946020939093013593505050565b600080600060608486031215612dc457600080fd5b8335612dcf81612d6e565b95602085013595506040909401359392505050565b600060208284031215612df657600080fd5b5035919050565b64ffffffffff8116811461117757600080fd5b60008060408385031215612e2357600080fd5b8235612e2e81612d6e565b91506020830135612e3e81612dfd565b809150509250929050565b600080600060608486031215612e5e57600080fd5b505081359360208301359350604090920135919050565b60008060408385031215612e8857600080fd5b50508035926020909101359150565b600080600060608486031215612eac57600080fd5b8335612eb781612d6e565b92506020840135612ec781612d6e565b929592945050506040919091013590565b600060208284031215612eea57600080fd5b8135611dca81612d6e565b600060208284031215612f0757600080fd5b8151611dca81612d6e565b6001600160a01b0384168152604060208201819052810182905260008360608301825b85811015612f65578235612f4881612d6e565b6001600160a01b0316825260209283019290910190600101612f35565b509695505050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561186c5761186c612f9f565b600060208284031215612fda57600080fd5b81518015158114611dca57600080fd5b634e487b7160e01b600052600160045260246000fd5b8181038181111561186c5761186c612f9f565b60006020828403121561302557600080fd5b5051919050565b60006020828403121561303e57600080fd5b8151611dca81612dfd565b60006020828403121561305b57600080fd5b815162ffffff81168114611dca57600080fd5b808202811582820484141761186c5761186c612f9f565b6000826130a257634e487b7160e01b600052601260045260246000fd5b500490565b62ffffff828116828216039081111561186c5761186c612f9f565b6001600160a01b03939093168352602083019190915262ffffff16604082015260600190565b64ffffffffff818116838216019081111561186c5761186c612f9f565b62ffffff818116838216019081111561186c5761186c612f9f56fe9483a26ad376f30b5199a79e75df3bb05158c4ee32a348f53e83245a5e50c86ea2646970667358221220d8888469b90fc84bbdcf217de231f02b83b0abb0eb6a12731fd8ba48dea5638064736f6c634300081a0033a2646970667358221220fa4705e72de8a44d474c27bafd3c16e77f12f277560cac941b8ce6a6549e799a64736f6c634300081a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "clonePosition(address)": {
        "params": {
          "_parent": "address of the position we want to clone"
        },
        "returns": {
          "_0": "address of the newly created clone position"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "clonePosition(address)": {
        "notice": "Clone an existing position. This can be a clone of another clone, or an original position."
      },
      "createNewPosition(address,address,address,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)": {
        "notice": "Create a completely new position in a newly deployed contract. Must be called through the minting hub to be recognized as a valid position."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}