{
  "address": "0xda1013AdA005e0F8d6a17263888D324c7a551F74",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deur",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_leadrate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IncompatibleCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPos",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LeaveNoDust",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedPrice",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "ChallengeAverted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "ChallengeStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "acquiredCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengeSize",
          "type": "uint256"
        }
      ],
      "name": "ChallengeSucceeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pos",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceE36MinusDecimals",
          "type": "uint256"
        }
      ],
      "name": "ForcedSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "original",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "PositionOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PostponedReturn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHALLENGER_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEURO",
      "outputs": [
        {
          "internalType": "contract IDecentralizedEURO",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXPIRED_PRICE_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPENING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATE",
      "outputs": [
        {
          "internalType": "contract ILeadrate",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLLER",
      "outputs": [
        {
          "internalType": "contract PositionRoller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_challengeNumber",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "postponeCollateralReturn",
          "type": "bool"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPosition",
          "name": "pos",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "upToAmount",
          "type": "uint256"
        }
      ],
      "name": "buyExpiredCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumPrice",
          "type": "uint256"
        }
      ],
      "name": "challenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challenges",
      "outputs": [
        {
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "start",
          "type": "uint40"
        },
        {
          "internalType": "contract IPosition",
          "name": "position",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "parent",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialMint",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "expiration",
          "type": "uint40"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "parent",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialMint",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "expiration",
          "type": "uint40"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPosition",
          "name": "pos",
          "type": "address"
        }
      ],
      "name": "expiredPurchasePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintingMaximum",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "_initPeriodSeconds",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "_expirationSeconds",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "_challengeSeconds",
          "type": "uint40"
        },
        {
          "internalType": "uint24",
          "name": "_riskPremium",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "_liqPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_reservePPM",
          "type": "uint24"
        }
      ],
      "name": "openPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "pendingReturns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "challengeNumber",
          "type": "uint32"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "returnPostponedCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x369a4c6a76b030ca720668ee9c98c10c704345e3e020ce2d2d74ad2451177e3b",
  "receipt": {
    "to": null,
    "from": "0x7246a902fD8Bf96eCe1Dc9DCc3Bfa9299aF4937e",
    "contractAddress": "0xda1013AdA005e0F8d6a17263888D324c7a551F74",
    "transactionIndex": 4,
    "gasUsed": "2373756",
    "logsBloom": "0x
    "blockHash": "0xfbf7b2a17133c4bb955a5243068bd9591f2037826ad3186b360071f77befb6d5",
    "transactionHash": "0x369a4c6a76b030ca720668ee9c98c10c704345e3e020ce2d2d74ad2451177e3b",
    "logs": [],
    "blockNumber": 21568990,
    "cumulativeGasUsed": "2694028",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd02812Be610952aAFBbbfBcA438887A2f3A5f53B",
    "0xa1b05B70107E87CeA3ef8fd2d7a4282a93F1682F",
    "0xa5f63B2A73AaE2F4636F401D3A442082f2D92807",
    "0xeCDE1EF432447ca4504B08DFe0b863BBe5eB62ac"
  ],
  "numDeployments": 4,
  "solcInputHash": "df40c24e49300c503bf9a5b9cc25e87e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deur\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_leadrate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IncompatibleCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPos\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LeaveNoDust\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedPrice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"ChallengeAverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"ChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acquiredCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengeSize\",\"type\":\"uint256\"}],\"name\":\"ChallengeSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pos\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceE36MinusDecimals\",\"type\":\"uint256\"}],\"name\":\"ForcedSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"original\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"PositionOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PostponedReturn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHALLENGER_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEURO\",\"outputs\":[{\"internalType\":\"contract IDecentralizedEURO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXPIRED_PRICE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPENING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"internalType\":\"contract ILeadrate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLLER\",\"outputs\":[{\"internalType\":\"contract PositionRoller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_challengeNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"postponeCollateralReturn\",\"type\":\"bool\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPosition\",\"name\":\"pos\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"upToAmount\",\"type\":\"uint256\"}],\"name\":\"buyExpiredCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"}],\"name\":\"challenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"start\",\"type\":\"uint40\"},{\"internalType\":\"contract IPosition\",\"name\":\"position\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialMint\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialMint\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPosition\",\"name\":\"pos\",\"type\":\"address\"}],\"name\":\"expiredPurchasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"_initPeriodSeconds\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_expirationSeconds\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_challengeSeconds\",\"type\":\"uint40\"},{\"internalType\":\"uint24\",\"name\":\"_riskPremium\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"_liqPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_reservePPM\",\"type\":\"uint24\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"pendingReturns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"challengeNumber\",\"type\":\"uint32\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"returnPostponedCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Only one instance of this contract is required, whereas every new position comes with a new position contract. Pending challenges are stored as structs in an array.\",\"kind\":\"dev\",\"methods\":{\"bid(uint32,uint256,bool)\":{\"details\":\"In case that the collateral cannot be transferred back to the challenger (i.e. because the collateral token has a blacklist and the challenger is on it), it is possible to postpone the return of the collateral.\",\"params\":{\"_challengeNumber\":\"index of the challenge as broadcast in the event\",\"postponeCollateralReturn\":\"To postpone the return of the collateral to the challenger. Usually false.\",\"size\":\"how much of the collateral the caller wants to bid for at most                                  (automatically reduced to the available amount)\"}},\"challenge(address,uint256,uint256)\":{\"params\":{\"_collateralAmount\":\"amount of the collateral we want to challenge\",\"_positionAddr\":\"address of the position we want to challenge\",\"minimumPrice\":\"position.price() to guard against the minter front-running with a price change\"},\"returns\":{\"_0\":\"index of the challenge in the challenge-array\"}},\"clone(address,address,uint256,uint256,uint40)\":{\"details\":\"This needs an allowance to be set on the collateral contract such that the minting hub can get the collateral.\"},\"openPosition(address,uint256,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)\":{\"details\":\"For a successful call, you must set an allowance for the collateral token, allowing the minting hub to transfer the initial collateral amount to the newly created position and to withdraw the fees.\",\"params\":{\"_challengeSeconds\":\"challenge period. Longer for less liquid collateral.\",\"_collateralAddress\":\"address of collateral token\",\"_expirationSeconds\":\"position tenor in seconds from 'now'\",\"_initPeriodSeconds\":\"initial period in seconds\",\"_initialCollateral\":\"amount of initial collateral to be deposited\",\"_liqPrice\":\"Liquidation price with (36 - token decimals) decimals,                            e.g. 18 decimals for an 18 dec collateral, 36 decs for a 0 dec collateral.\",\"_minCollateral\":\"minimum collateral required to prevent dust amounts\",\"_mintingMaximum\":\"maximal amount of deur that can be minted by the position owner\",\"_reservePPM\":\"ppm of minted amount that is locked as borrower's reserve, e.g. 20%\",\"_riskPremium\":\"ppm of minted amount that is added to the applicable minting fee as a risk premium\"},\"returns\":{\"_0\":\"address            address of created position\"}},\"price(uint32)\":{\"details\":\"The price comes with (36 - collateral.decimals()) digits, so multiplying it with the raw collateral amount always yields a price with 36 digits, or 18 digits after dividing by 10**18 again.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"pendingReturns\":{\"details\":\"It maps collateral => beneficiary => amount.\"}},\"title\":\"Minting Hub\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CHALLENGER_REWARD()\":{\"notice\":\"The challenger reward in parts per million (ppm) relative to the challenged amount, whereas challenged amount is defined as the challenged collateral amount times the liquidation price.\"},\"OPENING_FEE()\":{\"notice\":\"Irrevocable fee in deur when proposing a new position (but not when cloning an existing one).\"},\"bid(uint32,uint256,bool)\":{\"notice\":\"Post a bid in deur given an open challenge.\"},\"buyExpiredCollateral(address,uint256)\":{\"notice\":\"Buys up to the desired amount of the collateral asset from the given expired position using the applicable 'expiredPurchasePrice' at that instant. To prevent dust either the remaining collateral needs to be bought or collateral with a value of at least OPENING_FEE (1000 dEURO) needs to remain in the position for a different buyer\"},\"challenge(address,uint256,uint256)\":{\"notice\":\"Launch a challenge (Dutch auction) on a position\"},\"clone(address,address,uint256,uint256,uint40)\":{\"notice\":\"Clones an existing position and immediately tries to mint the specified amount using the given collateral.\"},\"expiredPurchasePrice(address)\":{\"notice\":\"The applicable purchase price when forcing the sale of collateral of an expired position. The price starts at 10x the liquidation price at the expiration time, linearly declines to 1x liquidation price over the course of one challenge period, and then linearly declines less steeply to 0 over the course of another challenge period.\"},\"openPosition(address,uint256,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)\":{\"notice\":\"Open a collateralized loan position. See also https://docs.dEURO.com/positions/open .\"},\"pendingReturns(address,address)\":{\"notice\":\"Map to remember pending postponed collateral returns.\"},\"price(uint32)\":{\"notice\":\"Get the price per unit of the collateral for the given challenge.\"},\"returnPostponedCollateral(address,address)\":{\"notice\":\"Challengers can call this method to withdraw collateral whose return was postponed.\"}},\"notice\":\"The central hub for creating, cloning, and challenging collateralized DecentralizedEURO positions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintingHubV2/MintingHub.sol\":\"MintingHub\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/MintingHubV2/MintingHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {IDecentralizedEURO} from \\\"../interface/IDecentralizedEURO.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ILeadrate} from \\\"../interface/ILeadrate.sol\\\";\\nimport {IMintingHub} from \\\"./interface/IMintingHub.sol\\\";\\nimport {IPositionFactory} from \\\"./interface/IPositionFactory.sol\\\";\\nimport {IPosition} from \\\"./interface/IPosition.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {PositionRoller} from \\\"./PositionRoller.sol\\\";\\n\\n/**\\n * @title Minting Hub\\n * @notice The central hub for creating, cloning, and challenging collateralized DecentralizedEURO positions.\\n * @dev Only one instance of this contract is required, whereas every new position comes with a new position\\n * contract. Pending challenges are stored as structs in an array.\\n */\\ncontract MintingHub is IMintingHub, ERC165 {\\n    /**\\n     * @notice Irrevocable fee in deur when proposing a new position (but not when cloning an existing one).\\n     */\\n    uint256 public constant OPENING_FEE = 1000 * 10 ** 18;\\n\\n    /**\\n     * @notice The challenger reward in parts per million (ppm) relative to the challenged amount, whereas\\n     * challenged amount is defined as the challenged collateral amount times the liquidation price.\\n     */\\n    uint256 public constant CHALLENGER_REWARD = 20000; // 2%\\n    uint256 public constant EXPIRED_PRICE_FACTOR = 10;\\n\\n    IPositionFactory private immutable POSITION_FACTORY; // position contract to clone\\n\\n    IDecentralizedEURO public immutable DEURO; // currency\\n    PositionRoller public immutable ROLLER; // helper to roll positions\\n    ILeadrate public immutable RATE; // to determine the interest rate\\n\\n    Challenge[] public challenges; // list of open challenges\\n\\n    /**\\n     * @notice Map to remember pending postponed collateral returns.\\n     * @dev It maps collateral => beneficiary => amount.\\n     */\\n    mapping(address collateral => mapping(address owner => uint256 amount)) public pendingReturns;\\n\\n    struct Challenge {\\n        address challenger; // the address from which the challenge was initiated\\n        uint40 start; // the start of the challenge\\n        IPosition position; // the position that was challenged\\n        uint256 size; // how much collateral the challenger provided\\n    }\\n\\n    event PositionOpened(address indexed owner, address indexed position, address original, address collateral);\\n    event ChallengeStarted(address indexed challenger, address indexed position, uint256 size, uint256 number);\\n    event ChallengeAverted(address indexed position, uint256 number, uint256 size);\\n    event ChallengeSucceeded(\\n        address indexed position,\\n        uint256 number,\\n        uint256 bid,\\n        uint256 acquiredCollateral,\\n        uint256 challengeSize\\n    );\\n    event PostponedReturn(address collateral, address indexed beneficiary, uint256 amount);\\n    event ForcedSale(address pos, uint256 amount, uint256 priceE36MinusDecimals);\\n\\n    error UnexpectedPrice();\\n    error InvalidPos();\\n    error IncompatibleCollateral();\\n    error InsufficientCollateral();\\n    error LeaveNoDust(uint256 amount);\\n\\n    modifier validPos(address position) {\\n        if (DEURO.getPositionParent(position) != address(this)) revert InvalidPos();\\n        _;\\n    }\\n\\n    constructor(address _deur, address _leadrate, address _roller, address _factory) {\\n        DEURO = IDecentralizedEURO(_deur);\\n        RATE = ILeadrate(_leadrate);\\n        POSITION_FACTORY = IPositionFactory(_factory);\\n        ROLLER = PositionRoller(_roller);\\n    }\\n\\n    /**\\n     * @notice Open a collateralized loan position. See also https://docs.dEURO.com/positions/open .\\n     * @dev For a successful call, you must set an allowance for the collateral token, allowing\\n     * the minting hub to transfer the initial collateral amount to the newly created position and to\\n     * withdraw the fees.\\n     *\\n     * @param _collateralAddress  address of collateral token\\n     * @param _minCollateral      minimum collateral required to prevent dust amounts\\n     * @param _initialCollateral  amount of initial collateral to be deposited\\n     * @param _mintingMaximum     maximal amount of deur that can be minted by the position owner\\n     * @param _initPeriodSeconds  initial period in seconds\\n     * @param _expirationSeconds  position tenor in seconds from 'now'\\n     * @param _challengeSeconds   challenge period. Longer for less liquid collateral.\\n     * @param _riskPremium        ppm of minted amount that is added to the applicable minting fee as a risk premium\\n     * @param _liqPrice           Liquidation price with (36 - token decimals) decimals,\\n     *                            e.g. 18 decimals for an 18 dec collateral, 36 decs for a 0 dec collateral.\\n     * @param _reservePPM         ppm of minted amount that is locked as borrower's reserve, e.g. 20%\\n     * @return address            address of created position\\n     */\\n    function openPosition(\\n        address _collateralAddress,\\n        uint256 _minCollateral,\\n        uint256 _initialCollateral,\\n        uint256 _mintingMaximum,\\n        uint40 _initPeriodSeconds,\\n        uint40 _expirationSeconds,\\n        uint40 _challengeSeconds,\\n        uint24 _riskPremium,\\n        uint256 _liqPrice,\\n        uint24 _reservePPM\\n    ) public returns (address) {\\n        {\\n            require(_riskPremium <= 1000000);\\n            require(CHALLENGER_REWARD <= _reservePPM && _reservePPM <= 1000000);\\n            require(IERC20Metadata(_collateralAddress).decimals() <= 24); // leaves 12 digits for price\\n            uint256 invalidAmount = IERC20(_collateralAddress).totalSupply() + 1;\\n            try IERC20(_collateralAddress).transfer(address(0x123), invalidAmount) {\\n                revert IncompatibleCollateral(); // we need a collateral that reverts on failed transfers\\n            } catch Error(string memory /*reason*/) {} catch Panic(uint /*errorCode*/) {} catch (\\n                bytes memory /*lowLevelData*/\\n            ) {}\\n            if (_initialCollateral < _minCollateral) revert InsufficientCollateral();\\n            // must start with at least 5000 deur worth of collateral\\n            if (_minCollateral * _liqPrice < 5000 ether * 10 ** 18) revert InsufficientCollateral();\\n        }\\n        IPosition pos = IPosition(\\n            POSITION_FACTORY.createNewPosition(\\n                msg.sender,\\n                address(DEURO),\\n                _collateralAddress,\\n                _minCollateral,\\n                _mintingMaximum,\\n                _initPeriodSeconds,\\n                _expirationSeconds,\\n                _challengeSeconds,\\n                _riskPremium,\\n                _liqPrice,\\n                _reservePPM\\n            )\\n        );\\n        DEURO.registerPosition(address(pos));\\n        DEURO.collectProfits(msg.sender, OPENING_FEE);\\n        IERC20(_collateralAddress).transferFrom(msg.sender, address(pos), _initialCollateral);\\n\\n        emit PositionOpened(msg.sender, address(pos), address(pos), _collateralAddress);\\n        return address(pos);\\n    }\\n\\n    function clone(\\n        address parent,\\n        uint256 _initialCollateral,\\n        uint256 _initialMint,\\n        uint40 expiration\\n    ) public returns (address) {\\n        return clone(msg.sender, parent, _initialCollateral, _initialMint, expiration);\\n    }\\n\\n    /**\\n     * @notice Clones an existing position and immediately tries to mint the specified amount using the given collateral.\\n     * @dev This needs an allowance to be set on the collateral contract such that the minting hub can get the collateral.\\n     */\\n    function clone(\\n        address owner,\\n        address parent,\\n        uint256 _initialCollateral,\\n        uint256 _initialMint,\\n        uint40 expiration\\n    ) public validPos(parent) returns (address) {\\n        address pos = POSITION_FACTORY.clonePosition(parent);\\n        IPosition child = IPosition(pos);\\n        child.initialize(parent, expiration);\\n        DEURO.registerPosition(pos);\\n        IERC20 collateral = child.collateral();\\n        if (_initialCollateral < child.minimumCollateral()) revert InsufficientCollateral();\\n        collateral.transferFrom(msg.sender, pos, _initialCollateral); // collateral must still come from sender for security\\n        emit PositionOpened(owner, address(pos), parent, address(collateral));\\n        child.mint(owner, _initialMint);\\n        Ownable(address(child)).transferOwnership(owner);\\n        return address(pos);\\n    }\\n\\n    /**\\n     * @notice Launch a challenge (Dutch auction) on a position\\n     * @param _positionAddr     address of the position we want to challenge\\n     * @param _collateralAmount amount of the collateral we want to challenge\\n     * @param minimumPrice       position.price() to guard against the minter front-running with a price change\\n     * @return index of the challenge in the challenge-array\\n     */\\n    function challenge(\\n        address _positionAddr,\\n        uint256 _collateralAmount,\\n        uint256 minimumPrice\\n    ) external validPos(_positionAddr) returns (uint256) {\\n        IPosition position = IPosition(_positionAddr);\\n        // challenger should be ok if front-run by owner with a higher price\\n        // in case owner front-runs challenger with small price decrease to prevent challenge,\\n        // the challenger should set minimumPrice to market price\\n        if (position.price() < minimumPrice) revert UnexpectedPrice();\\n        IERC20(position.collateral()).transferFrom(msg.sender, address(this), _collateralAmount);\\n        uint256 pos = challenges.length;\\n        challenges.push(Challenge(msg.sender, uint40(block.timestamp), position, _collateralAmount));\\n        position.notifyChallengeStarted(_collateralAmount);\\n        emit ChallengeStarted(msg.sender, address(position), _collateralAmount, pos);\\n        return pos;\\n    }\\n\\n    /**\\n     * @notice Post a bid in deur given an open challenge.\\n     *\\n     * @dev In case that the collateral cannot be transferred back to the challenger (i.e. because the collateral token\\n     * has a blacklist and the challenger is on it), it is possible to postpone the return of the collateral.\\n     *\\n     * @param _challengeNumber          index of the challenge as broadcast in the event\\n     * @param size                      how much of the collateral the caller wants to bid for at most\\n     *                                  (automatically reduced to the available amount)\\n     * @param postponeCollateralReturn  To postpone the return of the collateral to the challenger. Usually false.\\n     */\\n    function bid(uint32 _challengeNumber, uint256 size, bool postponeCollateralReturn) external {\\n        Challenge memory _challenge = challenges[_challengeNumber];\\n        (uint256 liqPrice, uint40 phase) = _challenge.position.challengeData();\\n        size = _challenge.size < size ? _challenge.size : size; // cannot bid for more than the size of the challenge\\n\\n        if (block.timestamp <= _challenge.start + phase) {\\n            _avertChallenge(_challenge, _challengeNumber, liqPrice, size);\\n            emit ChallengeAverted(address(_challenge.position), _challengeNumber, size);\\n        } else {\\n            _returnChallengerCollateral(_challenge, _challengeNumber, size, postponeCollateralReturn);\\n            (uint256 transferredCollateral, uint256 offer) = _finishChallenge(_challenge, liqPrice, phase, size);\\n            emit ChallengeSucceeded(address(_challenge.position), _challengeNumber, offer, transferredCollateral, size);\\n        }\\n    }\\n\\n    function _finishChallenge(\\n        Challenge memory _challenge,\\n        uint256 liqPrice,\\n        uint40 phase,\\n        uint256 size\\n    ) internal returns (uint256, uint256) {\\n        // Repayments depend on what was actually minted, whereas bids depend on the available collateral\\n        (address owner, uint256 collateral, uint256 repayment, uint32 reservePPM) = _challenge\\n            .position\\n            .notifyChallengeSucceeded(msg.sender, size);\\n\\n        // No overflow possible thanks to invariant (col * price <= limit * 10**18)\\n        // enforced in Position.setPrice and knowing that collateral <= col.\\n        uint256 offer = (_calculatePrice(_challenge.start + phase, phase, liqPrice) * collateral) / 10 ** 18;\\n        DEURO.transferFrom(msg.sender, address(this), offer); // get money from bidder\\n        uint256 reward = (offer * CHALLENGER_REWARD) / 1000_000;\\n        DEURO.transfer(_challenge.challenger, reward); // pay out the challenger reward\\n        uint256 fundsAvailable = offer - reward; // funds available after reward\\n\\n        // Example: available funds are 90, repayment is 50, reserve 20%. Then 20%*(90-50)=16 are collected as profits\\n        // and the remaining 34 are sent to the position owner. If the position owner maxed out debt before the challenge\\n        // started and the liquidation price was 100, they would be slightly better off as they would get away with 80\\n        // instead of 40+36 = 76 in this example.\\n        if (fundsAvailable > repayment) {\\n            // The excess amount is distributed between the system and the owner using the reserve ratio\\n            // At this point, we cannot rely on the liquidation price because the challenge might have been started as a\\n            // response to an unreasonable increase of the liquidation price, such that we have to use this heuristic\\n            // for excess fund distribution, which make position owners that maxed out their positions slightly better\\n            // off in comparison to those who did not.\\n            uint256 profits = (reservePPM * (fundsAvailable - repayment)) / 1000_000;\\n            DEURO.collectProfits(address(this), profits);\\n            DEURO.transfer(owner, fundsAvailable - repayment - profits);\\n        } else if (fundsAvailable < repayment) {\\n            DEURO.coverLoss(address(this), repayment - fundsAvailable); // ensure we have enough to pay everything\\n        }\\n        DEURO.burnWithoutReserve(repayment, reservePPM); // Repay the challenged part, example: 50 deur leading to 10 deur in implicit profits\\n        return (collateral, offer);\\n    }\\n\\n    function _avertChallenge(Challenge memory _challenge, uint32 number, uint256 liqPrice, uint256 size) internal {\\n        require(block.timestamp != _challenge.start); // do not allow to avert the challenge in the same transaction, see CS-ZCHF-037\\n        if (msg.sender == _challenge.challenger) {\\n            // allow challenger to cancel challenge without paying themselves\\n        } else {\\n            DEURO.transferFrom(msg.sender, _challenge.challenger, (size * liqPrice) / (10 ** 18));\\n        }\\n\\n        _challenge.position.notifyChallengeAverted(size);\\n        _challenge.position.collateral().transfer(msg.sender, size);\\n        if (size < _challenge.size) {\\n            challenges[number].size = _challenge.size - size;\\n        } else {\\n            require(size == _challenge.size);\\n            delete challenges[number];\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns 'amount' of the collateral to the challenger and reduces or deletes the relevant challenge.\\n     */\\n    function _returnChallengerCollateral(\\n        Challenge memory _challenge,\\n        uint32 number,\\n        uint256 amount,\\n        bool postpone\\n    ) internal {\\n        _returnCollateral(_challenge.position.collateral(), _challenge.challenger, amount, postpone);\\n        if (_challenge.size == amount) {\\n            // bid on full amount\\n            delete challenges[number];\\n        } else {\\n            // bid on partial amount\\n            challenges[number].size -= amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the current Dutch auction price.\\n     * @dev Starts at the full price at time 'start' and linearly goes to 0 as 'phase2' passes.\\n     */\\n    function _calculatePrice(uint40 start, uint40 phase2, uint256 liqPrice) internal view returns (uint256) {\\n        uint40 timeNow = uint40(block.timestamp);\\n        if (timeNow <= start) {\\n            return liqPrice;\\n        } else if (timeNow >= start + phase2) {\\n            return 0;\\n        } else {\\n            uint256 timeLeft = phase2 - (timeNow - start);\\n            return (liqPrice / phase2) * timeLeft;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the price per unit of the collateral for the given challenge.\\n     * @dev The price comes with (36 - collateral.decimals()) digits, so multiplying it with the raw collateral amount\\n     * always yields a price with 36 digits, or 18 digits after dividing by 10**18 again.\\n     */\\n    function price(uint32 challengeNumber) public view returns (uint256) {\\n        Challenge memory _challenge = challenges[challengeNumber];\\n        if (_challenge.challenger == address(0x0)) {\\n            return 0;\\n        } else {\\n            (uint256 liqPrice, uint40 phase) = _challenge.position.challengeData();\\n            return _calculatePrice(_challenge.start + phase, phase, liqPrice);\\n        }\\n    }\\n\\n    /**\\n     * @notice Challengers can call this method to withdraw collateral whose return was postponed.\\n     */\\n    function returnPostponedCollateral(address collateral, address target) external {\\n        uint256 amount = pendingReturns[collateral][msg.sender];\\n        delete pendingReturns[collateral][msg.sender];\\n        IERC20(collateral).transfer(target, amount);\\n    }\\n\\n    function _returnCollateral(IERC20 collateral, address recipient, uint256 amount, bool postpone) internal {\\n        if (postpone) {\\n            // Postponing helps in case the challenger was blacklisted or otherwise cannot receive at the moment.\\n            pendingReturns[address(collateral)][recipient] += amount;\\n            emit PostponedReturn(address(collateral), recipient, amount);\\n        } else {\\n            collateral.transfer(recipient, amount); // return the challenger's collateral\\n        }\\n    }\\n\\n    /**\\n     * The applicable purchase price when forcing the sale of collateral of an expired position.\\n     *\\n     * The price starts at 10x the liquidation price at the expiration time, linearly declines to\\n     * 1x liquidation price over the course of one challenge period, and then linearly declines\\n     * less steeply to 0 over the course of another challenge period.\\n     */\\n    function expiredPurchasePrice(IPosition pos) public view returns (uint256) {\\n        uint256 liqprice = pos.price();\\n        uint256 expiration = pos.expiration();\\n        if (block.timestamp <= expiration) {\\n            return EXPIRED_PRICE_FACTOR * liqprice;\\n        } else {\\n            uint256 challengePeriod = pos.challengePeriod();\\n            uint256 timePassed = block.timestamp - expiration;\\n            if (timePassed <= challengePeriod) {\\n                // from 10x liquidation price to 1x in first phase\\n                uint256 timeLeft = challengePeriod - timePassed;\\n                return liqprice + (((EXPIRED_PRICE_FACTOR - 1) * liqprice) / challengePeriod) * timeLeft;\\n            } else if (timePassed < 2 * challengePeriod) {\\n                // from 1x liquidation price to 0 in second phase\\n                uint256 timeLeft = 2 * challengePeriod - timePassed;\\n                return (liqprice / challengePeriod) * timeLeft;\\n            } else {\\n                // get collateral for free after both phases passed\\n                return 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Buys up to the desired amount of the collateral asset from the given expired position using\\n     * the applicable 'expiredPurchasePrice' at that instant.\\n     *\\n     * To prevent dust either the remaining collateral needs to be bought or collateral with a value\\n     * of at least OPENING_FEE (1000 dEURO) needs to remain in the position for a different buyer\\n     */\\n    function buyExpiredCollateral(IPosition pos, uint256 upToAmount) external returns (uint256) {\\n        uint256 max = pos.collateral().balanceOf(address(pos));\\n        uint256 amount = upToAmount > max ? max : upToAmount;\\n        uint256 forceSalePrice = expiredPurchasePrice(pos);\\n        uint256 costs = (forceSalePrice * amount) / 10 ** 18;\\n\\n        if (max - amount > 0 && ((forceSalePrice * (max - amount)) / 10 ** 18) < (OPENING_FEE)) {\\n            revert LeaveNoDust(max - amount);\\n        }\\n\\n        pos.forceSale(msg.sender, amount, costs);\\n        emit ForcedSale(address(pos), amount, forceSalePrice);\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override virtual returns (bool) {\\n        return\\n            interfaceId == type(IMintingHub).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x840f5fd292c4ebf63217731ff8899bc056d0a96d9f24ec25af00bb081dd3b162\",\"license\":\"MIT\"},\"contracts/MintingHubV2/PositionRoller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IDecentralizedEURO} from \\\"../interface/IDecentralizedEURO.sol\\\";\\nimport {IReserve} from \\\"../interface/IReserve.sol\\\";\\n\\nimport {IPosition} from \\\"./interface/IPosition.sol\\\";\\n\\n/**\\n * @title PositionRoller\\n *\\n * Helper to roll over a debt from an old position to a new one.\\n * Both positions should have the same collateral. Otherwise, it does not make much sense.\\n */\\ncontract PositionRoller {\\n    IDecentralizedEURO private deuro;\\n\\n    error NotOwner(address pos);\\n    error NotPosition(address pos);\\n    error Log(uint256, uint256, uint256);\\n\\n    event Roll(address source, uint256 collWithdraw, uint256 repay, address target, uint256 collDeposit, uint256 mint);\\n\\n    constructor(address deuro_) {\\n        deuro = IDecentralizedEURO(deuro_);\\n    }\\n\\n    /**\\n     * Convenience method to roll an old position into a new one.\\n     *\\n     * Pre-condition: an allowance for the roller to spend the collateral asset on behalf of the caller,\\n     * i.e., one should set collateral.approve(roller, collateral.balanceOf(sourcePosition)).\\n     *\\n     * The following is assumed:\\n     * - If the limit of the target position permits, the user wants to roll everything.\\n     * - The user does not want to add additional collateral, but excess collateral is returned.\\n     * - If not enough can be minted in the new position, it is acceptable for the roller to use dEURO from the msg.sender.\\n     */\\n    function rollFully(IPosition source, IPosition target) external {\\n        rollFullyWithExpiration(source, target, target.expiration());\\n    }\\n\\n    /**\\n     * Like rollFully, but with a custom expiration date for the new position.\\n     */\\n    function rollFullyWithExpiration(IPosition source, IPosition target, uint40 expiration) public {\\n        require(source.collateral() == target.collateral());\\n        uint256 repay = source.getDebt();\\n        uint256 mintAmount = target.getMintAmount(repay);\\n        uint256 collateralToWithdraw = IERC20(source.collateral()).balanceOf(address(source));\\n        uint256 targetPrice = target.price();\\n        uint256 depositAmount = (mintAmount * 10 ** 18 + targetPrice - 1) / targetPrice; // round up\\n        if (depositAmount > collateralToWithdraw) {\\n            // If we need more collateral than available from the old position, we opt for taking\\n            // the missing funds from the caller instead of requiring additional collateral.\\n            depositAmount = collateralToWithdraw;\\n            mintAmount = (depositAmount * target.price()) / 10 ** 18; // round down, rest will be taken from caller\\n        }\\n        roll(source, repay, collateralToWithdraw, target, mintAmount, depositAmount, expiration);\\n    }\\n\\n    /**\\n     * Rolls the source position into the target position using a flash loan.\\n     * Both the source and the target position must recognize this roller.\\n     * It is the responsibility of the caller to ensure that both positions are valid contracts.\\n     *\\n     * @param source The source position, must be owned by the msg.sender.\\n     * @param repay The amount to flash loan in order to repay the source position and free up some or all collateral.\\n     * @param collWithdraw Collateral to move from the source position to the msg.sender.\\n     * @param target The target position. If not owned by msg.sender or if it does not have the desired expiration,\\n     *               it is cloned to create a position owned by the msg.sender.\\n     * @param mint The amount to be minted from the target position using collateral from msg.sender.\\n     * @param collDeposit The amount of collateral to be sent from msg.sender to the target position.\\n     * @param expiration The desired expiration date for the target position.\\n     */\\n    function roll(\\n        IPosition source,\\n        uint256 repay,\\n        uint256 collWithdraw,\\n        IPosition target,\\n        uint256 mint,\\n        uint256 collDeposit,\\n        uint40 expiration\\n    ) public valid(source) valid(target) own(source) {\\n        deuro.mint(address(this), repay); // take a flash loan\\n        source.repay(repay);\\n        source.withdrawCollateral(msg.sender, collWithdraw);\\n        if (mint > 0) {\\n            IERC20 targetCollateral = IERC20(target.collateral());\\n            if (Ownable(address(target)).owner() != msg.sender || expiration != target.expiration()) {\\n                targetCollateral.transferFrom(msg.sender, address(this), collDeposit); // get the new collateral\\n                targetCollateral.approve(target.hub(), collDeposit); // approve the new collateral and clone:\\n                target = IPosition(\\n                    IMintingHub(target.hub()).clone(msg.sender, address(target), collDeposit, mint, expiration)\\n                );\\n            } else {\\n                // We can roll into the provided existing position.\\n                // We do not verify whether the target position was created by the known minting hub in order\\n                // to allow positions to be rolled into future versions of the minting hub.\\n                targetCollateral.transferFrom(msg.sender, address(target), collDeposit);\\n                target.mint(msg.sender, mint);\\n            }\\n        }\\n        deuro.burnFrom(msg.sender, repay); // repay the flash loan\\n        emit Roll(address(source), collWithdraw, repay, address(target), collDeposit, mint);\\n    }\\n\\n    modifier own(IPosition pos) {\\n        if (Ownable(address(pos)).owner() != msg.sender) revert NotOwner(address(pos));\\n        _;\\n    }\\n\\n    modifier valid(IPosition pos) {\\n        if (deuro.getPositionParent(address(pos)) == address(0x0)) revert NotPosition(address(pos));\\n        _;\\n    }\\n}\\n\\ninterface IMintingHub {\\n    function clone(\\n        address owner,\\n        address parent,\\n        uint256 _initialCollateral,\\n        uint256 _initialMint,\\n        uint40 expiration\\n    ) external returns (address);\\n}\",\"keccak256\":\"0xeb3561db51b305283e79ae849d8f73a1efbc22bab27d8962ada288d418fb6090\",\"license\":\"MIT\"},\"contracts/MintingHubV2/interface/IMintingHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {ILeadrate} from \\\"../../interface/ILeadrate.sol\\\";\\nimport {IPosition} from \\\"./IPosition.sol\\\";\\nimport {PositionRoller} from \\\"../PositionRoller.sol\\\";\\n\\ninterface IMintingHub {\\n    function RATE() external view returns (ILeadrate);\\n\\n    function ROLLER() external view returns (PositionRoller);\\n\\n    function challenge(\\n        address _positionAddr,\\n        uint256 _collateralAmount,\\n        uint256 minimumPrice\\n    ) external returns (uint256);\\n\\n    function bid(uint32 _challengeNumber, uint256 size, bool postponeCollateralReturn) external;\\n\\n    function returnPostponedCollateral(address collateral, address target) external;\\n\\n    function buyExpiredCollateral(IPosition pos, uint256 upToAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x7f73a2cbecb1943c1d7f54d60dfb212e7067ce27d337d7f8814354c4b2c81f1f\",\"license\":\"MIT\"},\"contracts/MintingHubV2/interface/IPosition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPosition {\\n    function hub() external view returns (address);\\n\\n    function collateral() external view returns (IERC20);\\n\\n    function minimumCollateral() external view returns (uint256);\\n\\n    function price() external view returns (uint256);\\n\\n    function challengedAmount() external view returns (uint256);\\n\\n    function original() external view returns (address);\\n\\n    function expiration() external view returns (uint40);\\n\\n    function cooldown() external view returns (uint40);\\n\\n    function limit() external view returns (uint256);\\n\\n    function challengePeriod() external view returns (uint40);\\n\\n    function start() external view returns (uint40);\\n\\n    function riskPremiumPPM() external view returns (uint24);\\n\\n    function reserveContribution() external view returns (uint24);\\n\\n    function principal() external view returns (uint256);\\n\\n    function accruedInterest() external view returns (uint256);\\n\\n    function lastAccrual() external view returns (uint40);\\n\\n    function initialize(address parent, uint40 _expiration) external;\\n\\n    function assertCloneable() external;\\n\\n    function notifyMint(uint256 mint_) external;\\n\\n    function notifyRepaid(uint256 repaid_) external;\\n\\n    function availableForClones() external view returns (uint256);\\n\\n    function availableForMinting() external view returns (uint256);\\n\\n    function deny(address[] calldata helpers, string calldata message) external;\\n\\n    function getUsableMint(uint256 totalMint) external view returns (uint256);\\n\\n    function getMintAmount(uint256 usableMint) external view returns (uint256);\\n\\n    function adjust(uint256 newMinted, uint256 newCollateral, uint256 newPrice) external;\\n\\n    function adjustPrice(uint256 newPrice) external;\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function annualInterestPPM() external view returns (uint24);\\n\\n    function getDebt() external view returns (uint256);\\n\\n    function repay(uint256 amount) external returns (uint256);\\n\\n    function repayFull() external returns (uint256);\\n\\n    function forceSale(address buyer, uint256 collAmount, uint256 proceeds) external;\\n\\n    function withdraw(address token, address target, uint256 amount) external;\\n\\n    function withdrawCollateral(address target, uint256 amount) external;\\n\\n    function challengeData() external view returns (uint256 liqPrice, uint40 phase);\\n\\n    function notifyChallengeStarted(uint256 size) external;\\n\\n    function notifyChallengeAverted(uint256 size) external;\\n\\n    function notifyChallengeSucceeded(\\n        address _bidder,\\n        uint256 _size\\n    ) external returns (address, uint256, uint256, uint32);\\n}\\n\",\"keccak256\":\"0xc52f3500aac93daa730420bd34b3194f326ef60e203017a614154a48f00c540d\",\"license\":\"MIT\"},\"contracts/MintingHubV2/interface/IPositionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPositionFactory {\\n    function createNewPosition(\\n        address _owner,\\n        address _deuro,\\n        address _collateral,\\n        uint256 _minCollateral,\\n        uint256 _initialLimit,\\n        uint40 _initPeriod,\\n        uint40 _duration,\\n        uint40 _challengePeriod,\\n        uint24 _riskPremiumPPM,\\n        uint256 _liqPrice,\\n        uint24 _reserve\\n    ) external returns (address);\\n\\n    function clonePosition(address _parent) external returns (address);\\n}\\n\",\"keccak256\":\"0x5235f255a0695ed6d7d8c6ec03930314225d64bd147cbc7e024f2b6092963286\",\"license\":\"MIT\"},\"contracts/interface/IDecentralizedEURO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IReserve} from \\\"./IReserve.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDecentralizedEURO is IERC20 {\\n    function suggestMinter(\\n        address _minter,\\n        uint256 _applicationPeriod,\\n        uint256 _applicationFee,\\n        string calldata _message\\n    ) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function minterReserve() external view returns (uint256);\\n\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\n\\n    function calculateFreedAmount(uint256 amountExcludingReserve, uint32 reservePPM) external view returns (uint256);\\n\\n    function equity() external view returns (uint256);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function getPositionParent(address position) external view returns (address);\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burnFrom(address target, uint256 amount) external;\\n\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnFromWithReserve(\\n        address payer,\\n        uint256 targetTotalBurnAmount,\\n        uint32 _reservePPM\\n    ) external returns (uint256);\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function coverLoss(address source, uint256 amount) external;\\n\\n    function collectProfits(address source, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x5a794e79a91424814795d9f3edd3db86e4d360f652a0250c04c279592417bb8e\",\"license\":\"MIT\"},\"contracts/interface/ILeadrate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILeadrate {\\n   function currentRatePPM() external view returns (uint24);\\n   function currentTicks() external view returns (uint64);\\n}\",\"keccak256\":\"0x881b944dbc6c7d79ad5e8de37e31e1c11ff9b75eed314b62b1071f2e5b96dfc4\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IReserve is IERC20 {\\n    function invest(uint256 amount, uint256 expected) external returns (uint256);\\n    function checkQualified(address sender, address[] calldata helpers) external view;\\n}\\n\",\"keccak256\":\"0x8d413b94c7860d6f8a9ba0168642db626830209824e4ad2d879d5f252490d2b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b50604051612b56380380612b568339810160408190526100309161006f565b6001600160a01b0393841660a05291831660e0529082166080521660c0526100c3565b80516001600160a01b038116811461006a57600080fd5b919050565b6000806000806080858703121561008557600080fd5b61008e85610053565b935061009c60208601610053565b92506100aa60408601610053565b91506100b860608601610053565b905092959194509250565b60805160a05160c05160e0516129f861015e60003960006101ea015260006103000152600081816102a001528181610876015281816109290152818161099c01528181610d4b01528181610efa015281816111ef0152818161196001528181611de201528181611e9701528181611f6a01528181611fd50152818161209301526121350152600081816108460152610e0101526129f86000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638f1d3776116100a2578063dbe8a4c211610071578063dbe8a4c21461029b578063e6ac5ea4146102c2578063e6ca1df2146102d5578063e85cde6f146102e8578063f09e9e3a146102fb57600080fd5b80638f1d3776146102215780639d8ff2a61461026c578063af5806b61461027f578063c14a9f051461028857600080fd5b80632e2c6314116100e95780632e2c63141461017c57806335a4b349146101a7578063643745fb146101ba578063664e9704146101e55780637eb81bb31461020c57600080fd5b806301ffc9a71461011b5780630f2f8e861461014357806325e28124146101595780632bf78dd81461016c575b600080fd5b61012e61012936600461233e565b610322565b60405190151581526020015b60405180910390f35b61014b600a81565b60405190815260200161013a565b61014b610167366004612380565b610359565b61014b683635c9adc5dea0000081565b61018f61018a3660046123bf565b6105a5565b6040516001600160a01b03909116815260200161013a565b61018f6101b5366004612421565b6105bd565b61014b6101c83660046124c7565b600160209081526000928352604080842090915290825290205481565b61018f7f000000000000000000000000000000000000000000000000000000000000000081565b61021f61021a366004612520565b610adb565b005b61023461022f366004612562565b610cd3565b604080516001600160a01b03958616815264ffffffffff9490941660208501529190931690820152606081019190915260800161013a565b61018f61027a36600461257b565b610d25565b61014b614e2081565b61014b6102963660046125da565b6111c9565b61018f7f000000000000000000000000000000000000000000000000000000000000000081565b61014b6102d036600461260f565b61157c565b61014b6102e336600461262c565b611789565b61021f6102f63660046124c7565b611896565b61018f7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b0319821663e49cd2c360e01b148061035357506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080836001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103be9190612649565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a9190612666565b9050600081841161043b578361043d565b815b9050600061044a8661157c565b90506000670de0b6b3a76400006104618484612695565b61046b91906126ac565b9050600061047984866126ce565b1180156104b45750683635c9adc5dea00000670de0b6b3a764000061049e85876126ce565b6104a89085612695565b6104b291906126ac565b105b156104e8576104c383856126ce565b60405163f658c6cf60e01b81526004016104df91815260200190565b60405180910390fd5b60405163211d798360e01b815233600482015260248101849052604481018290526001600160a01b0388169063211d798390606401600060405180830381600087803b15801561053757600080fd5b505af115801561054b573d6000803e3d6000fd5b5050604080516001600160a01b038b168152602081018790529081018590527f67a660133c1fb4c0bb0480a5e4a9919216684052f13f0713e88fa2fbbc81d0829250606001905060405180910390a1509095945050505050565b60006105b43386868686610d25565b95945050505050565b6000620f42408462ffffff1611156105d457600080fd5b8162ffffff16614e20111580156105f35750620f42408262ffffff1611155b6105fc57600080fd5b60188b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066091906126e1565b60ff16111561066e57600080fd5b60008b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d29190612666565b6106dd906001612704565b60405163a9059cbb60e01b81529091506001600160a01b038d169063a9059cbb9061071090610123908590600401612717565b6020604051808303816000875af192505050801561074b575060408051601f3d908101601f1916820190925261074891810190612730565b60015b6107cb5761075761274d565b806308c379a00361077c575061076b6127a4565b806107765750610795565b506107e5565b634e487b71036107955761078e612829565b9061077657505b3d8080156107bf576040519150601f19603f3d011682016040523d82523d6000602084013e6107c4565b606091505b50506107e5565b506040516343befb6960e11b815260040160405180910390fd5b8a8a101561080657604051633a23d82560e01b815260040160405180910390fd5b700eb194f8e1ae525fd5dcfab08000000000610822858d612695565b101561084157604051633a23d82560e01b815260040160405180910390fd5b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635d824f76337f00000000000000000000000000000000000000000000000000000000000000008f8f8e8e8e8e8e8e8e6040518c63ffffffff1660e01b81526004016108c49b9a99989796959493929190612849565b6020604051808303816000875af11580156108e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109079190612649565b60405163b52c696d60e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063b52c696d90602401600060405180830381600087803b15801561096f57600080fd5b505af1158015610983573d6000803e3d6000fd5b505060405163375edc7760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250636ebdb8ee91506109de903390683635c9adc5dea0000090600401612717565b600060405180830381600087803b1580156109f857600080fd5b505af1158015610a0c573d6000803e3d6000fd5b50506040516323b872dd60e01b81526001600160a01b038f1692506323b872dd9150610a4090339085908f906004016128ca565b6020604051808303816000875af1158015610a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a839190612730565b50604080516001600160a01b03808416808352908f1660208301529133917fc9b570ab9d98bdf3e38a40fd71b20edafca42449f23ca51f0bdcbf40e8ffe175910160405180910390a39b9a5050505050505050505050565b6000808463ffffffff1681548110610af557610af56128ee565b600091825260208083206040805160808101825260039490940290910180546001600160a01b038082168652600160a01b90910464ffffffffff169385019390935260018101549092168382018190526002909201546060840152805163194c325560e11b81528151939550849363329864aa926004808401939192918290030181865afa158015610b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baf9190612904565b9150915084836060015110610bc45784610bca565b82606001515b9450808360200151610bdc919061292a565b64ffffffffff164211610c4957610bf58387848861192c565b604080840151815163ffffffff89168152602081018890526001600160a01b03909116917f1eee30d91b773ac47d7485a3acb6bcd8c7c9cd8d95301b1af361baf5f0991d2e910160405180910390a2610ccb565b610c5583878787611bf5565b600080610c648585858a611d08565b604080880151815163ffffffff8d16815260208101849052918201849052606082018b90529294509092506001600160a01b03909116907f7d3a26e8d43c5b70f86266bfa26c212e3c097716ff7240ccb6a9034e48754e239060800160405180910390a250505b505050505050565b60008181548110610ce357600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b038083169450600160a01b90920464ffffffffff1692919091169084565b60405163aa5dd7f160e01b81526001600160a01b038581166004830152600091869130917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa158015610d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db89190612649565b6001600160a01b031614610ddf576040516369229ba760e01b815260040160405180910390fd5b604051630167d12360e71b81526001600160a01b0387811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063b3e89180906024016020604051808303816000875af1158015610e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e709190612649565b6040516336a3a4fd60e11b81526001600160a01b03898116600483015264ffffffffff871660248301529192508291821690636d4749fa90604401600060405180830381600087803b158015610ec557600080fd5b505af1158015610ed9573d6000803e3d6000fd5b505060405163b52c696d60e01b81526001600160a01b0385811660048301527f000000000000000000000000000000000000000000000000000000000000000016925063b52c696d9150602401600060405180830381600087803b158015610f4057600080fd5b505af1158015610f54573d6000803e3d6000fd5b505050506000816001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbc9190612649565b9050816001600160a01b031663babe7c746040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110209190612666565b88101561104057604051633a23d82560e01b815260040160405180910390fd5b6040516323b872dd60e01b81526001600160a01b038216906323b872dd9061107090339087908d906004016128ca565b6020604051808303816000875af115801561108f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b39190612730565b50604080516001600160a01b038b81168252838116602083015280861692908d16917fc9b570ab9d98bdf3e38a40fd71b20edafca42449f23ca51f0bdcbf40e8ffe175910160405180910390a36040516340c10f1960e01b81526001600160a01b038316906340c10f199061112e908d908b90600401612717565b600060405180830381600087803b15801561114857600080fd5b505af115801561115c573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b038d811660048301528516925063f2fde38b9150602401600060405180830381600087803b1580156111a357600080fd5b505af11580156111b7573d6000803e3d6000fd5b50949c9b505050505050505050505050565b60405163aa5dd7f160e01b81526001600160a01b038481166004830152600091859130917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa158015611238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125c9190612649565b6001600160a01b031614611283576040516369229ba760e01b815260040160405180910390fd5b600085905083816001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb9190612666565b101561130a57604051630d57523160e11b815260040160405180910390fd5b806001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136c9190612649565b6001600160a01b03166323b872dd3330886040518463ffffffff1660e01b815260040161139b939291906128ca565b6020604051808303816000875af11580156113ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113de9190612730565b50600080546040805160808101825233815264ffffffffff428116602083019081526001600160a01b03878116848601818152606086018e8152600189018a559880529451600388027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180549551909616600160a01b026001600160c81b0319909516918416919091179390931790935592517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56482018054919094166001600160a01b0319919091161790925593517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56590910155516342d0204160e01b81529091906342d02041906114fa90899060040190815260200190565b600060405180830381600087803b15801561151457600080fd5b505af1158015611528573d6000803e3d6000fd5b505060408051898152602081018590526001600160a01b03861693503392507fc4b384b2c5ca32c8e77081f4083be594a1ea9ba34f208a9f9a458f70608585f5910160405180910390a39695505050505050565b600080826001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e19190612666565b90506000836001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116479190612947565b64ffffffffff16905080421161166a5761166282600a612695565b949350505050565b6000846001600160a01b031663f3f480d96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce9190612947565b64ffffffffff16905060006116e383426126ce565b905081811161173c5760006116f882846126ce565b90508083866117096001600a6126ce565b6117139190612695565b61171d91906126ac565b6117279190612695565b6117319086612704565b979650505050505050565b611747826002612695565b81101561177d5760008161175c846002612695565b61176691906126ce565b90508061177384876126ac565b6117319190612695565b50600095945050505050565b60008060008363ffffffff16815481106117a5576117a56128ee565b60009182526020918290206040805160808101825260039390930290910180546001600160a01b03808216808652600160a01b90920464ffffffffff169585019590955260018201549094169183019190915260020154606082015291506118105750600092915050565b60008082604001516001600160a01b031663329864aa6040518163ffffffff1660e01b81526004016040805180830381865afa158015611854573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118789190612904565b915091506105b481846020015161188f919061292a565b82846121ac565b6001600160a01b038216600081815260016020908152604080832033845290915280822080549290555163a9059cbb60e01b815290919063a9059cbb906118e39085908590600401612717565b6020604051808303816000875af1158015611902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119269190612730565b50505050565b836020015164ffffffffff16420361194357600080fd5b83516001600160a01b03163314611a095783516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd903390670de0b6b3a764000061199c8787612695565b6119a691906126ac565b6040518463ffffffff1660e01b81526004016119c4939291906128ca565b6020604051808303816000875af11580156119e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a079190612730565b505b83604001516001600160a01b03166349746f10826040518263ffffffff1660e01b8152600401611a3b91815260200190565b600060405180830381600087803b158015611a5557600080fd5b505af1158015611a69573d6000803e3d6000fd5b5050505083604001516001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad39190612649565b6001600160a01b031663a9059cbb33836040518363ffffffff1660e01b8152600401611b00929190612717565b6020604051808303816000875af1158015611b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b439190612730565b508360600151811015611b9357808460600151611b6091906126ce565b60008463ffffffff1681548110611b7957611b796128ee565b906000526020600020906003020160020181905550611926565b83606001518114611ba357600080fd5b60008363ffffffff1681548110611bbc57611bbc6128ee565b60009182526020822060039091020180546001600160c81b03191681556001810180546001600160a01b03191690556002015550505050565b611c6784604001516001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e9190612649565b8551848461223a565b81846060015103611cc35760008363ffffffff1681548110611c8b57611c8b6128ee565b60009182526020822060039091020180546001600160c81b03191681556001810180546001600160a01b031916905560020155611926565b8160008463ffffffff1681548110611cdd57611cdd6128ee565b90600052602060002090600302016002016000828254611cfd91906126ce565b909155505050505050565b60008060008060008089604001516001600160a01b03166320aa9e7233896040518363ffffffff1660e01b8152600401611d43929190612717565b6080604051808303816000875af1158015611d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d869190612964565b93509350935093506000670de0b6b3a764000084611db48b8e60200151611dad919061292a565b8c8e6121ac565b611dbe9190612695565b611dc891906126ac565b6040516323b872dd60e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90611e1b903390309086906004016128ca565b6020604051808303816000875af1158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e9190612730565b506000620f4240611e71614e2084612695565b611e7b91906126ac565b8c5160405163a9059cbb60e01b81529192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb91611ecc918590600401612717565b6020604051808303816000875af1158015611eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0f9190612730565b506000611f1c82846126ce565b905084811115612081576000620f4240611f3687846126ce565b611f469063ffffffff8816612695565b611f5091906126ac565b60405163375edc7760e11b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636ebdb8ee90611fa19030908590600401612717565b600060405180830381600087803b158015611fbb57600080fd5b505af1158015611fcf573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb8983898661201091906126ce565b61201a91906126ce565b6040518363ffffffff1660e01b8152600401612037929190612717565b6020604051808303816000875af1158015612056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207a9190612730565b5050612113565b84811015612113576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d1fa5e98306120c384896126ce565b6040518363ffffffff1660e01b81526004016120e0929190612717565b600060405180830381600087803b1580156120fa57600080fd5b505af115801561210e573d6000803e3d6000fd5b505050505b6040516363b20c3360e11b81526004810186905263ffffffff851660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c764186690604401600060405180830381600087803b15801561218157600080fd5b505af1158015612195573d6000803e3d6000fd5b50979f949e50939c50505050505050505050505050565b60004264ffffffffff808616908216116121c95782915050612233565b6121d3848661292a565b64ffffffffff168164ffffffffff16106121f1576000915050612233565b60006121fd86836129a5565b61220790866129a5565b64ffffffffff169050808564ffffffffff168561222491906126ac565b61222e9190612695565b925050505b9392505050565b80156122c6576001600160a01b03808516600090815260016020908152604080832093871683529290529081208054849290612277908490612704565b92505081905550826001600160a01b03167f8dbeeabb7d576986689d0bff912a01b9736f03d95739a5603e59301a50141c5c85846040516122b9929190612717565b60405180910390a2611926565b60405163a9059cbb60e01b81526001600160a01b0385169063a9059cbb906122f49086908690600401612717565b6020604051808303816000875af1158015612313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123379190612730565b5050505050565b60006020828403121561235057600080fd5b81356001600160e01b03198116811461223357600080fd5b6001600160a01b038116811461237d57600080fd5b50565b6000806040838503121561239357600080fd5b823561239e81612368565b946020939093013593505050565b64ffffffffff8116811461237d57600080fd5b600080600080608085870312156123d557600080fd5b84356123e081612368565b9350602085013592506040850135915060608501356123fe816123ac565b939692955090935050565b803562ffffff8116811461241c57600080fd5b919050565b6000806000806000806000806000806101408b8d03121561244157600080fd5b8a3561244c81612368565b995060208b0135985060408b0135975060608b0135965060808b0135612471816123ac565b955060a08b0135612481816123ac565b945060c08b0135612491816123ac565b935061249f60e08c01612409565b92506101008b013591506124b66101208c01612409565b90509295989b9194979a5092959850565b600080604083850312156124da57600080fd5b82356124e581612368565b915060208301356124f581612368565b809150509250929050565b63ffffffff8116811461237d57600080fd5b801515811461237d57600080fd5b60008060006060848603121561253557600080fd5b833561254081612500565b925060208401359150604084013561255781612512565b809150509250925092565b60006020828403121561257457600080fd5b5035919050565b600080600080600060a0868803121561259357600080fd5b853561259e81612368565b945060208601356125ae81612368565b9350604086013592506060860135915060808601356125cc816123ac565b809150509295509295909350565b6000806000606084860312156125ef57600080fd5b83356125fa81612368565b95602085013595506040909401359392505050565b60006020828403121561262157600080fd5b813561223381612368565b60006020828403121561263e57600080fd5b813561223381612500565b60006020828403121561265b57600080fd5b815161223381612368565b60006020828403121561267857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176103535761035361267f565b6000826126c957634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156103535761035361267f565b6000602082840312156126f357600080fd5b815160ff8116811461223357600080fd5b808201808211156103535761035361267f565b6001600160a01b03929092168252602082015260400190565b60006020828403121561274257600080fd5b815161223381612512565b600060033d11156127665760046000803e5060005160e01c5b90565b601f8201601f1916810167ffffffffffffffff8111828210171561279d57634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d10156127b25790565b6040513d600319016004823e80513d602482011167ffffffffffffffff821117156127dc57505090565b808201805167ffffffffffffffff8111156127f8575050505090565b3d8401600319018282016020011115612812575050505090565b61282160208285010185612769565b509392505050565b60008060233d1115612845576020600460003e50506000516001905b9091565b6001600160a01b038c811682528b811660208301528a166040820152606081018990526080810188905264ffffffffff87811660a083015286811660c0830152851660e082015262ffffff84166101008201526101608101836101208301526128ba61014083018462ffffff169052565b9c9b505050505050505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052603260045260246000fd5b6000806040838503121561291757600080fd5b825160208401519092506124f5816123ac565b64ffffffffff81811683821601908111156103535761035361267f565b60006020828403121561295957600080fd5b8151612233816123ac565b6000806000806080858703121561297a57600080fd5b845161298581612368565b60208601516040870151606088015192965090945092506123fe81612500565b64ffffffffff82811682821603908111156103535761035361267f56fea2646970667358221220bf740c7c2c78882ec5f482b5a5598c4461b1705b8028f0d0ba4f3e5eda8efc1564736f6c634300081a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638f1d3776116100a2578063dbe8a4c211610071578063dbe8a4c21461029b578063e6ac5ea4146102c2578063e6ca1df2146102d5578063e85cde6f146102e8578063f09e9e3a146102fb57600080fd5b80638f1d3776146102215780639d8ff2a61461026c578063af5806b61461027f578063c14a9f051461028857600080fd5b80632e2c6314116100e95780632e2c63141461017c57806335a4b349146101a7578063643745fb146101ba578063664e9704146101e55780637eb81bb31461020c57600080fd5b806301ffc9a71461011b5780630f2f8e861461014357806325e28124146101595780632bf78dd81461016c575b600080fd5b61012e61012936600461233e565b610322565b60405190151581526020015b60405180910390f35b61014b600a81565b60405190815260200161013a565b61014b610167366004612380565b610359565b61014b683635c9adc5dea0000081565b61018f61018a3660046123bf565b6105a5565b6040516001600160a01b03909116815260200161013a565b61018f6101b5366004612421565b6105bd565b61014b6101c83660046124c7565b600160209081526000928352604080842090915290825290205481565b61018f7f000000000000000000000000000000000000000000000000000000000000000081565b61021f61021a366004612520565b610adb565b005b61023461022f366004612562565b610cd3565b604080516001600160a01b03958616815264ffffffffff9490941660208501529190931690820152606081019190915260800161013a565b61018f61027a36600461257b565b610d25565b61014b614e2081565b61014b6102963660046125da565b6111c9565b61018f7f000000000000000000000000000000000000000000000000000000000000000081565b61014b6102d036600461260f565b61157c565b61014b6102e336600461262c565b611789565b61021f6102f63660046124c7565b611896565b61018f7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b0319821663e49cd2c360e01b148061035357506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080836001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103be9190612649565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a9190612666565b9050600081841161043b578361043d565b815b9050600061044a8661157c565b90506000670de0b6b3a76400006104618484612695565b61046b91906126ac565b9050600061047984866126ce565b1180156104b45750683635c9adc5dea00000670de0b6b3a764000061049e85876126ce565b6104a89085612695565b6104b291906126ac565b105b156104e8576104c383856126ce565b60405163f658c6cf60e01b81526004016104df91815260200190565b60405180910390fd5b60405163211d798360e01b815233600482015260248101849052604481018290526001600160a01b0388169063211d798390606401600060405180830381600087803b15801561053757600080fd5b505af115801561054b573d6000803e3d6000fd5b5050604080516001600160a01b038b168152602081018790529081018590527f67a660133c1fb4c0bb0480a5e4a9919216684052f13f0713e88fa2fbbc81d0829250606001905060405180910390a1509095945050505050565b60006105b43386868686610d25565b95945050505050565b6000620f42408462ffffff1611156105d457600080fd5b8162ffffff16614e20111580156105f35750620f42408262ffffff1611155b6105fc57600080fd5b60188b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066091906126e1565b60ff16111561066e57600080fd5b60008b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d29190612666565b6106dd906001612704565b60405163a9059cbb60e01b81529091506001600160a01b038d169063a9059cbb9061071090610123908590600401612717565b6020604051808303816000875af192505050801561074b575060408051601f3d908101601f1916820190925261074891810190612730565b60015b6107cb5761075761274d565b806308c379a00361077c575061076b6127a4565b806107765750610795565b506107e5565b634e487b71036107955761078e612829565b9061077657505b3d8080156107bf576040519150601f19603f3d011682016040523d82523d6000602084013e6107c4565b606091505b50506107e5565b506040516343befb6960e11b815260040160405180910390fd5b8a8a101561080657604051633a23d82560e01b815260040160405180910390fd5b700eb194f8e1ae525fd5dcfab08000000000610822858d612695565b101561084157604051633a23d82560e01b815260040160405180910390fd5b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635d824f76337f00000000000000000000000000000000000000000000000000000000000000008f8f8e8e8e8e8e8e8e6040518c63ffffffff1660e01b81526004016108c49b9a99989796959493929190612849565b6020604051808303816000875af11580156108e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109079190612649565b60405163b52c696d60e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063b52c696d90602401600060405180830381600087803b15801561096f57600080fd5b505af1158015610983573d6000803e3d6000fd5b505060405163375edc7760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250636ebdb8ee91506109de903390683635c9adc5dea0000090600401612717565b600060405180830381600087803b1580156109f857600080fd5b505af1158015610a0c573d6000803e3d6000fd5b50506040516323b872dd60e01b81526001600160a01b038f1692506323b872dd9150610a4090339085908f906004016128ca565b6020604051808303816000875af1158015610a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a839190612730565b50604080516001600160a01b03808416808352908f1660208301529133917fc9b570ab9d98bdf3e38a40fd71b20edafca42449f23ca51f0bdcbf40e8ffe175910160405180910390a39b9a5050505050505050505050565b6000808463ffffffff1681548110610af557610af56128ee565b600091825260208083206040805160808101825260039490940290910180546001600160a01b038082168652600160a01b90910464ffffffffff169385019390935260018101549092168382018190526002909201546060840152805163194c325560e11b81528151939550849363329864aa926004808401939192918290030181865afa158015610b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baf9190612904565b9150915084836060015110610bc45784610bca565b82606001515b9450808360200151610bdc919061292a565b64ffffffffff164211610c4957610bf58387848861192c565b604080840151815163ffffffff89168152602081018890526001600160a01b03909116917f1eee30d91b773ac47d7485a3acb6bcd8c7c9cd8d95301b1af361baf5f0991d2e910160405180910390a2610ccb565b610c5583878787611bf5565b600080610c648585858a611d08565b604080880151815163ffffffff8d16815260208101849052918201849052606082018b90529294509092506001600160a01b03909116907f7d3a26e8d43c5b70f86266bfa26c212e3c097716ff7240ccb6a9034e48754e239060800160405180910390a250505b505050505050565b60008181548110610ce357600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b038083169450600160a01b90920464ffffffffff1692919091169084565b60405163aa5dd7f160e01b81526001600160a01b038581166004830152600091869130917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa158015610d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db89190612649565b6001600160a01b031614610ddf576040516369229ba760e01b815260040160405180910390fd5b604051630167d12360e71b81526001600160a01b0387811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063b3e89180906024016020604051808303816000875af1158015610e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e709190612649565b6040516336a3a4fd60e11b81526001600160a01b03898116600483015264ffffffffff871660248301529192508291821690636d4749fa90604401600060405180830381600087803b158015610ec557600080fd5b505af1158015610ed9573d6000803e3d6000fd5b505060405163b52c696d60e01b81526001600160a01b0385811660048301527f000000000000000000000000000000000000000000000000000000000000000016925063b52c696d9150602401600060405180830381600087803b158015610f4057600080fd5b505af1158015610f54573d6000803e3d6000fd5b505050506000816001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbc9190612649565b9050816001600160a01b031663babe7c746040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110209190612666565b88101561104057604051633a23d82560e01b815260040160405180910390fd5b6040516323b872dd60e01b81526001600160a01b038216906323b872dd9061107090339087908d906004016128ca565b6020604051808303816000875af115801561108f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b39190612730565b50604080516001600160a01b038b81168252838116602083015280861692908d16917fc9b570ab9d98bdf3e38a40fd71b20edafca42449f23ca51f0bdcbf40e8ffe175910160405180910390a36040516340c10f1960e01b81526001600160a01b038316906340c10f199061112e908d908b90600401612717565b600060405180830381600087803b15801561114857600080fd5b505af115801561115c573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b038d811660048301528516925063f2fde38b9150602401600060405180830381600087803b1580156111a357600080fd5b505af11580156111b7573d6000803e3d6000fd5b50949c9b505050505050505050505050565b60405163aa5dd7f160e01b81526001600160a01b038481166004830152600091859130917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa158015611238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125c9190612649565b6001600160a01b031614611283576040516369229ba760e01b815260040160405180910390fd5b600085905083816001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb9190612666565b101561130a57604051630d57523160e11b815260040160405180910390fd5b806001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136c9190612649565b6001600160a01b03166323b872dd3330886040518463ffffffff1660e01b815260040161139b939291906128ca565b6020604051808303816000875af11580156113ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113de9190612730565b50600080546040805160808101825233815264ffffffffff428116602083019081526001600160a01b03878116848601818152606086018e8152600189018a559880529451600388027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180549551909616600160a01b026001600160c81b0319909516918416919091179390931790935592517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56482018054919094166001600160a01b0319919091161790925593517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56590910155516342d0204160e01b81529091906342d02041906114fa90899060040190815260200190565b600060405180830381600087803b15801561151457600080fd5b505af1158015611528573d6000803e3d6000fd5b505060408051898152602081018590526001600160a01b03861693503392507fc4b384b2c5ca32c8e77081f4083be594a1ea9ba34f208a9f9a458f70608585f5910160405180910390a39695505050505050565b600080826001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e19190612666565b90506000836001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116479190612947565b64ffffffffff16905080421161166a5761166282600a612695565b949350505050565b6000846001600160a01b031663f3f480d96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce9190612947565b64ffffffffff16905060006116e383426126ce565b905081811161173c5760006116f882846126ce565b90508083866117096001600a6126ce565b6117139190612695565b61171d91906126ac565b6117279190612695565b6117319086612704565b979650505050505050565b611747826002612695565b81101561177d5760008161175c846002612695565b61176691906126ce565b90508061177384876126ac565b6117319190612695565b50600095945050505050565b60008060008363ffffffff16815481106117a5576117a56128ee565b60009182526020918290206040805160808101825260039390930290910180546001600160a01b03808216808652600160a01b90920464ffffffffff169585019590955260018201549094169183019190915260020154606082015291506118105750600092915050565b60008082604001516001600160a01b031663329864aa6040518163ffffffff1660e01b81526004016040805180830381865afa158015611854573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118789190612904565b915091506105b481846020015161188f919061292a565b82846121ac565b6001600160a01b038216600081815260016020908152604080832033845290915280822080549290555163a9059cbb60e01b815290919063a9059cbb906118e39085908590600401612717565b6020604051808303816000875af1158015611902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119269190612730565b50505050565b836020015164ffffffffff16420361194357600080fd5b83516001600160a01b03163314611a095783516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd903390670de0b6b3a764000061199c8787612695565b6119a691906126ac565b6040518463ffffffff1660e01b81526004016119c4939291906128ca565b6020604051808303816000875af11580156119e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a079190612730565b505b83604001516001600160a01b03166349746f10826040518263ffffffff1660e01b8152600401611a3b91815260200190565b600060405180830381600087803b158015611a5557600080fd5b505af1158015611a69573d6000803e3d6000fd5b5050505083604001516001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad39190612649565b6001600160a01b031663a9059cbb33836040518363ffffffff1660e01b8152600401611b00929190612717565b6020604051808303816000875af1158015611b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b439190612730565b508360600151811015611b9357808460600151611b6091906126ce565b60008463ffffffff1681548110611b7957611b796128ee565b906000526020600020906003020160020181905550611926565b83606001518114611ba357600080fd5b60008363ffffffff1681548110611bbc57611bbc6128ee565b60009182526020822060039091020180546001600160c81b03191681556001810180546001600160a01b03191690556002015550505050565b611c6784604001516001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e9190612649565b8551848461223a565b81846060015103611cc35760008363ffffffff1681548110611c8b57611c8b6128ee565b60009182526020822060039091020180546001600160c81b03191681556001810180546001600160a01b031916905560020155611926565b8160008463ffffffff1681548110611cdd57611cdd6128ee565b90600052602060002090600302016002016000828254611cfd91906126ce565b909155505050505050565b60008060008060008089604001516001600160a01b03166320aa9e7233896040518363ffffffff1660e01b8152600401611d43929190612717565b6080604051808303816000875af1158015611d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d869190612964565b93509350935093506000670de0b6b3a764000084611db48b8e60200151611dad919061292a565b8c8e6121ac565b611dbe9190612695565b611dc891906126ac565b6040516323b872dd60e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90611e1b903390309086906004016128ca565b6020604051808303816000875af1158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e9190612730565b506000620f4240611e71614e2084612695565b611e7b91906126ac565b8c5160405163a9059cbb60e01b81529192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb91611ecc918590600401612717565b6020604051808303816000875af1158015611eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0f9190612730565b506000611f1c82846126ce565b905084811115612081576000620f4240611f3687846126ce565b611f469063ffffffff8816612695565b611f5091906126ac565b60405163375edc7760e11b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636ebdb8ee90611fa19030908590600401612717565b600060405180830381600087803b158015611fbb57600080fd5b505af1158015611fcf573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb8983898661201091906126ce565b61201a91906126ce565b6040518363ffffffff1660e01b8152600401612037929190612717565b6020604051808303816000875af1158015612056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207a9190612730565b5050612113565b84811015612113576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d1fa5e98306120c384896126ce565b6040518363ffffffff1660e01b81526004016120e0929190612717565b600060405180830381600087803b1580156120fa57600080fd5b505af115801561210e573d6000803e3d6000fd5b505050505b6040516363b20c3360e11b81526004810186905263ffffffff851660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c764186690604401600060405180830381600087803b15801561218157600080fd5b505af1158015612195573d6000803e3d6000fd5b50979f949e50939c50505050505050505050505050565b60004264ffffffffff808616908216116121c95782915050612233565b6121d3848661292a565b64ffffffffff168164ffffffffff16106121f1576000915050612233565b60006121fd86836129a5565b61220790866129a5565b64ffffffffff169050808564ffffffffff168561222491906126ac565b61222e9190612695565b925050505b9392505050565b80156122c6576001600160a01b03808516600090815260016020908152604080832093871683529290529081208054849290612277908490612704565b92505081905550826001600160a01b03167f8dbeeabb7d576986689d0bff912a01b9736f03d95739a5603e59301a50141c5c85846040516122b9929190612717565b60405180910390a2611926565b60405163a9059cbb60e01b81526001600160a01b0385169063a9059cbb906122f49086908690600401612717565b6020604051808303816000875af1158015612313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123379190612730565b5050505050565b60006020828403121561235057600080fd5b81356001600160e01b03198116811461223357600080fd5b6001600160a01b038116811461237d57600080fd5b50565b6000806040838503121561239357600080fd5b823561239e81612368565b946020939093013593505050565b64ffffffffff8116811461237d57600080fd5b600080600080608085870312156123d557600080fd5b84356123e081612368565b9350602085013592506040850135915060608501356123fe816123ac565b939692955090935050565b803562ffffff8116811461241c57600080fd5b919050565b6000806000806000806000806000806101408b8d03121561244157600080fd5b8a3561244c81612368565b995060208b0135985060408b0135975060608b0135965060808b0135612471816123ac565b955060a08b0135612481816123ac565b945060c08b0135612491816123ac565b935061249f60e08c01612409565b92506101008b013591506124b66101208c01612409565b90509295989b9194979a5092959850565b600080604083850312156124da57600080fd5b82356124e581612368565b915060208301356124f581612368565b809150509250929050565b63ffffffff8116811461237d57600080fd5b801515811461237d57600080fd5b60008060006060848603121561253557600080fd5b833561254081612500565b925060208401359150604084013561255781612512565b809150509250925092565b60006020828403121561257457600080fd5b5035919050565b600080600080600060a0868803121561259357600080fd5b853561259e81612368565b945060208601356125ae81612368565b9350604086013592506060860135915060808601356125cc816123ac565b809150509295509295909350565b6000806000606084860312156125ef57600080fd5b83356125fa81612368565b95602085013595506040909401359392505050565b60006020828403121561262157600080fd5b813561223381612368565b60006020828403121561263e57600080fd5b813561223381612500565b60006020828403121561265b57600080fd5b815161223381612368565b60006020828403121561267857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176103535761035361267f565b6000826126c957634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156103535761035361267f565b6000602082840312156126f357600080fd5b815160ff8116811461223357600080fd5b808201808211156103535761035361267f565b6001600160a01b03929092168252602082015260400190565b60006020828403121561274257600080fd5b815161223381612512565b600060033d11156127665760046000803e5060005160e01c5b90565b601f8201601f1916810167ffffffffffffffff8111828210171561279d57634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d10156127b25790565b6040513d600319016004823e80513d602482011167ffffffffffffffff821117156127dc57505090565b808201805167ffffffffffffffff8111156127f8575050505090565b3d8401600319018282016020011115612812575050505090565b61282160208285010185612769565b509392505050565b60008060233d1115612845576020600460003e50506000516001905b9091565b6001600160a01b038c811682528b811660208301528a166040820152606081018990526080810188905264ffffffffff87811660a083015286811660c0830152851660e082015262ffffff84166101008201526101608101836101208301526128ba61014083018462ffffff169052565b9c9b505050505050505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052603260045260246000fd5b6000806040838503121561291757600080fd5b825160208401519092506124f5816123ac565b64ffffffffff81811683821601908111156103535761035361267f565b60006020828403121561295957600080fd5b8151612233816123ac565b6000806000806080858703121561297a57600080fd5b845161298581612368565b60208601516040870151606088015192965090945092506123fe81612500565b64ffffffffff82811682821603908111156103535761035361267f56fea2646970667358221220bf740c7c2c78882ec5f482b5a5598c4461b1705b8028f0d0ba4f3e5eda8efc1564736f6c634300081a0033",
  "devdoc": {
    "details": "Only one instance of this contract is required, whereas every new position comes with a new position contract. Pending challenges are stored as structs in an array.",
    "kind": "dev",
    "methods": {
      "bid(uint32,uint256,bool)": {
        "details": "In case that the collateral cannot be transferred back to the challenger (i.e. because the collateral token has a blacklist and the challenger is on it), it is possible to postpone the return of the collateral.",
        "params": {
          "_challengeNumber": "index of the challenge as broadcast in the event",
          "postponeCollateralReturn": "To postpone the return of the collateral to the challenger. Usually false.",
          "size": "how much of the collateral the caller wants to bid for at most                                  (automatically reduced to the available amount)"
        }
      },
      "challenge(address,uint256,uint256)": {
        "params": {
          "_collateralAmount": "amount of the collateral we want to challenge",
          "_positionAddr": "address of the position we want to challenge",
          "minimumPrice": "position.price() to guard against the minter front-running with a price change"
        },
        "returns": {
          "_0": "index of the challenge in the challenge-array"
        }
      },
      "clone(address,address,uint256,uint256,uint40)": {
        "details": "This needs an allowance to be set on the collateral contract such that the minting hub can get the collateral."
      },
      "openPosition(address,uint256,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)": {
        "details": "For a successful call, you must set an allowance for the collateral token, allowing the minting hub to transfer the initial collateral amount to the newly created position and to withdraw the fees.",
        "params": {
          "_challengeSeconds": "challenge period. Longer for less liquid collateral.",
          "_collateralAddress": "address of collateral token",
          "_expirationSeconds": "position tenor in seconds from 'now'",
          "_initPeriodSeconds": "initial period in seconds",
          "_initialCollateral": "amount of initial collateral to be deposited",
          "_liqPrice": "Liquidation price with (36 - token decimals) decimals,                            e.g. 18 decimals for an 18 dec collateral, 36 decs for a 0 dec collateral.",
          "_minCollateral": "minimum collateral required to prevent dust amounts",
          "_mintingMaximum": "maximal amount of deur that can be minted by the position owner",
          "_reservePPM": "ppm of minted amount that is locked as borrower's reserve, e.g. 20%",
          "_riskPremium": "ppm of minted amount that is added to the applicable minting fee as a risk premium"
        },
        "returns": {
          "_0": "address            address of created position"
        }
      },
      "price(uint32)": {
        "details": "The price comes with (36 - collateral.decimals()) digits, so multiplying it with the raw collateral amount always yields a price with 36 digits, or 18 digits after dividing by 10**18 again."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "pendingReturns": {
        "details": "It maps collateral => beneficiary => amount."
      }
    },
    "title": "Minting Hub",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CHALLENGER_REWARD()": {
        "notice": "The challenger reward in parts per million (ppm) relative to the challenged amount, whereas challenged amount is defined as the challenged collateral amount times the liquidation price."
      },
      "OPENING_FEE()": {
        "notice": "Irrevocable fee in deur when proposing a new position (but not when cloning an existing one)."
      },
      "bid(uint32,uint256,bool)": {
        "notice": "Post a bid in deur given an open challenge."
      },
      "buyExpiredCollateral(address,uint256)": {
        "notice": "Buys up to the desired amount of the collateral asset from the given expired position using the applicable 'expiredPurchasePrice' at that instant. To prevent dust either the remaining collateral needs to be bought or collateral with a value of at least OPENING_FEE (1000 dEURO) needs to remain in the position for a different buyer"
      },
      "challenge(address,uint256,uint256)": {
        "notice": "Launch a challenge (Dutch auction) on a position"
      },
      "clone(address,address,uint256,uint256,uint40)": {
        "notice": "Clones an existing position and immediately tries to mint the specified amount using the given collateral."
      },
      "expiredPurchasePrice(address)": {
        "notice": "The applicable purchase price when forcing the sale of collateral of an expired position. The price starts at 10x the liquidation price at the expiration time, linearly declines to 1x liquidation price over the course of one challenge period, and then linearly declines less steeply to 0 over the course of another challenge period."
      },
      "openPosition(address,uint256,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)": {
        "notice": "Open a collateralized loan position. See also https://docs.dEURO.com/positions/open ."
      },
      "pendingReturns(address,address)": {
        "notice": "Map to remember pending postponed collateral returns."
      },
      "price(uint32)": {
        "notice": "Get the price per unit of the collateral for the given challenge."
      },
      "returnPostponedCollateral(address,address)": {
        "notice": "Challengers can call this method to withdraw collateral whose return was postponed."
      }
    },
    "notice": "The central hub for creating, cloning, and challenging collateralized DecentralizedEURO positions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8424,
        "contract": "contracts/MintingHubV2/MintingHub.sol:MintingHub",
        "label": "challenges",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Challenge)8441_storage)dyn_storage"
      },
      {
        "astId": 8431,
        "contract": "contracts/MintingHubV2/MintingHub.sol:MintingHub",
        "label": "pendingReturns",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Challenge)8441_storage)dyn_storage": {
        "base": "t_struct(Challenge)8441_storage",
        "encoding": "dynamic_array",
        "label": "struct MintingHub.Challenge[]",
        "numberOfBytes": "32"
      },
      "t_contract(IPosition)12239": {
        "encoding": "inplace",
        "label": "contract IPosition",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Challenge)8441_storage": {
        "encoding": "inplace",
        "label": "struct MintingHub.Challenge",
        "members": [
          {
            "astId": 8433,
            "contract": "contracts/MintingHubV2/MintingHub.sol:MintingHub",
            "label": "challenger",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8435,
            "contract": "contracts/MintingHubV2/MintingHub.sol:MintingHub",
            "label": "start",
            "offset": 20,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 8438,
            "contract": "contracts/MintingHubV2/MintingHub.sol:MintingHub",
            "label": "position",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IPosition)12239"
          },
          {
            "astId": 8440,
            "contract": "contracts/MintingHubV2/MintingHub.sol:MintingHub",
            "label": "size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}